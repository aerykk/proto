// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.game_master {
  
  public static partial class GameMasterTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_Player__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.Player, global::bnet.protocol.game_master.Player.Builder> internal__static_bnet_protocol_game_master_Player__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.ConnectInfo, global::bnet.protocol.game_master.ConnectInfo.Builder> internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameStatsBucket, global::bnet.protocol.game_master.GameStatsBucket.Builder> internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameFactoryDescription, global::bnet.protocol.game_master.GameFactoryDescription.Builder> internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameHandle, global::bnet.protocol.game_master.GameHandle.Builder> internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMasterTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CitzZXJ2aWNlL2dhbWVfbWFzdGVyL2dhbWVfbWFzdGVyX3R5cGVzLnByb3Rv" + 
          "EhlibmV0LnByb3RvY29sLmdhbWVfbWFzdGVyGhxsaWIvcHJvdG9jb2wvYXR0" + 
          "cmlidXRlLnByb3RvGhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvIqkCCgZQ" + 
          "bGF5ZXISOgoEdHlwZRgBIAEoDjImLmJuZXQucHJvdG9jb2wuZ2FtZV9tYXN0" + 
          "ZXIuUGxheWVyLlR5cGU6BFRPT04SKAoHdG9vbl9pZBgCIAEoCzIXLmJuZXQu" + 
          "cHJvdG9jb2wuRW50aXR5SWQSMAoPZ2FtZV9hY2NvdW50X2lkGAMgASgLMhcu" + 
          "Ym5ldC5wcm90b2NvbC5FbnRpdHlJZBIwCg9ibmV0X2FjY291bnRfaWQYBCAB" + 
          "KAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjUKCWF0dHJpYnV0ZRgFIAMo" + 
          "CzIiLmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0ZSIeCgRUeXBl" + 
          "EggKBFRPT04QABIMCghDT01QVVRFUhABIpkBCgtDb25uZWN0SW5mbxIoCgd0" + 
          "b29uX2lkGAEgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIMCgRob3N0" + 
          "GAIgAigJEgwKBHBvcnQYAyACKAUSDQoFdG9rZW4YBCABKAwSNQoJYXR0cmli" + 
          "dXRlGAUgAygLMiIuYm5ldC5wcm90b2NvbC5hdHRyaWJ1dGUuQXR0cmlidXRl" + 
          "Iu8BCg9HYW1lU3RhdHNCdWNrZXQSFQoKYnVja2V0X21pbhgBIAEoAjoBMBIi" + 
          "CgpidWNrZXRfbWF4GAIgASgCOg40LjI5NDk2NzNlKzAwORIcChF3YWl0X21p" + 
          "bGxpc2Vjb25kcxgDIAEoDToBMBIZCg5nYW1lc19wZXJfaG91chgEIAEoDToB" + 
          "MBIXCgxhY3RpdmVfZ2FtZXMYBSABKA06ATASGQoOYWN0aXZlX3BsYXllcnMY" + 
          "BiABKA06ATASGAoNZm9ybWluZ19nYW1lcxgHIAEoDToBMBIaCg93YWl0aW5n" + 
          "X3BsYXllcnMYCCABKA06ATAiqwEKFkdhbWVGYWN0b3J5RGVzY3JpcHRpb24S" + 
          "CgoCaWQYASACKAYSDAoEbmFtZRgCIAEoCRI1CglhdHRyaWJ1dGUYAyADKAsy" + 
          "Ii5ibmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUSQAoMc3RhdHNf" + 
          "YnVja2V0GAQgAygLMiouYm5ldC5wcm90b2NvbC5nYW1lX21hc3Rlci5HYW1l" + 
          "U3RhdHNCdWNrZXQiSgoKR2FtZUhhbmRsZRISCgpmYWN0b3J5X2lkGAEgAigG" + 
          "EigKB2dhbWVfaWQYAiACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlk");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_game_master_Player__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_game_master_Player__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.Player, global::bnet.protocol.game_master.Player.Builder>(internal__static_bnet_protocol_game_master_Player__Descriptor,
                new string[] { "Type", "ToonId", "GameAccountId", "BnetAccountId", "Attribute", });
        internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.ConnectInfo, global::bnet.protocol.game_master.ConnectInfo.Builder>(internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor,
                new string[] { "ToonId", "Host", "Port", "Token", "Attribute", });
        internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameStatsBucket, global::bnet.protocol.game_master.GameStatsBucket.Builder>(internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor,
                new string[] { "BucketMin", "BucketMax", "WaitMilliseconds", "GamesPerHour", "ActiveGames", "ActivePlayers", "FormingGames", "WaitingPlayers", });
        internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameFactoryDescription, global::bnet.protocol.game_master.GameFactoryDescription.Builder>(internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor,
                new string[] { "Id", "Name", "Attribute", "StatsBucket", });
        internal__static_bnet_protocol_game_master_GameHandle__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameHandle, global::bnet.protocol.game_master.GameHandle.Builder>(internal__static_bnet_protocol_game_master_GameHandle__Descriptor,
                new string[] { "FactoryId", "GameId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
    private static readonly Player defaultInstance = new Builder().BuildPartial();
    public static Player DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Player DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Player ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_Player__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_Player__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum Type {
        TOON = 0,
        COMPUTER = 1,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::bnet.protocol.game_master.Player.Types.Type type_ = global::bnet.protocol.game_master.Player.Types.Type.TOON;
    public bool HasType {
      get { return hasType; }
    }
    public global::bnet.protocol.game_master.Player.Types.Type Type {
      get { return type_; }
    }
    
    public const int ToonIdFieldNumber = 2;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int GameAccountIdFieldNumber = 3;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int BnetAccountIdFieldNumber = 4;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int AttributeFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasToonId) {
          if (!ToonId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasType) {
        output.WriteEnum(1, (int) Type);
      }
      if (HasToonId) {
        output.WriteMessage(2, ToonId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(3, GameAccountId);
      }
      if (HasBnetAccountId) {
        output.WriteMessage(4, BnetAccountId);
      }
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(5, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ToonId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GameAccountId);
        }
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, BnetAccountId);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Player ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Player ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Player prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Player result = new Player();
      
      protected override Player MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Player();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.Player.Descriptor; }
      }
      
      public override Player DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.Player.DefaultInstance; }
      }
      
      public override Player BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        Player returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Player) {
          return MergeFrom((Player) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Player other) {
        if (other == global::bnet.protocol.game_master.Player.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::bnet.protocol.game_master.Player.Types.Type), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Type = (global::bnet.protocol.game_master.Player.Types.Type) rawValue;
              }
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::bnet.protocol.game_master.Player.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::bnet.protocol.game_master.Player.Types.Type value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::bnet.protocol.game_master.Player.Types.Type.TOON;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
    }
    static Player() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  public sealed partial class ConnectInfo : pb::GeneratedMessage<ConnectInfo, ConnectInfo.Builder> {
    private static readonly ConnectInfo defaultInstance = new Builder().BuildPartial();
    public static ConnectInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectInfo DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ConnectInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectInfo, ConnectInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private string host_ = "";
    public bool HasHost {
      get { return hasHost; }
    }
    public string Host {
      get { return host_; }
    }
    
    public const int PortFieldNumber = 3;
    private bool hasPort;
    private int port_ = 0;
    public bool HasPort {
      get { return hasPort; }
    }
    public int Port {
      get { return port_; }
    }
    
    public const int TokenFieldNumber = 4;
    private bool hasToken;
    private pb::ByteString token_ = pb::ByteString.Empty;
    public bool HasToken {
      get { return hasToken; }
    }
    public pb::ByteString Token {
      get { return token_; }
    }
    
    public const int AttributeFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!hasHost) return false;
        if (!hasPort) return false;
        if (!ToonId.IsInitialized) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasToonId) {
        output.WriteMessage(1, ToonId);
      }
      if (HasHost) {
        output.WriteString(2, Host);
      }
      if (HasPort) {
        output.WriteInt32(3, Port);
      }
      if (HasToken) {
        output.WriteBytes(4, Token);
      }
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(5, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ToonId);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Host);
        }
        if (HasPort) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Port);
        }
        if (HasToken) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, Token);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectInfo prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ConnectInfo result = new ConnectInfo();
      
      protected override ConnectInfo MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ConnectInfo();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.ConnectInfo.Descriptor; }
      }
      
      public override ConnectInfo DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.ConnectInfo.DefaultInstance; }
      }
      
      public override ConnectInfo BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        ConnectInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectInfo) {
          return MergeFrom((ConnectInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectInfo other) {
        if (other == global::bnet.protocol.game_master.ConnectInfo.DefaultInstance) return this;
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasHost) {
          Host = other.Host;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              Host = input.ReadString();
              break;
            }
            case 24: {
              Port = input.ReadInt32();
              break;
            }
            case 34: {
              Token = input.ReadBytes();
              break;
            }
            case 42: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasHost {
        get { return result.HasHost; }
      }
      public string Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.HasPort; }
      }
      public int Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(int value) {
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasToken {
        get { return result.HasToken; }
      }
      public pb::ByteString Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        result.hasToken = false;
        result.token_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
    }
    static ConnectInfo() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GameStatsBucket : pb::GeneratedMessage<GameStatsBucket, GameStatsBucket.Builder> {
    private static readonly GameStatsBucket defaultInstance = new Builder().BuildPartial();
    public static GameStatsBucket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameStatsBucket DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameStatsBucket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameStatsBucket, GameStatsBucket.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable; }
    }
    
    public const int BucketMinFieldNumber = 1;
    private bool hasBucketMin;
    private float bucketMin_ = 0F;
    public bool HasBucketMin {
      get { return hasBucketMin; }
    }
    public float BucketMin {
      get { return bucketMin_; }
    }
    
    public const int BucketMaxFieldNumber = 2;
    private bool hasBucketMax;
    private float bucketMax_ = 4.294967E+09F;
    public bool HasBucketMax {
      get { return hasBucketMax; }
    }
    public float BucketMax {
      get { return bucketMax_; }
    }
    
    public const int WaitMillisecondsFieldNumber = 3;
    private bool hasWaitMilliseconds;
    private uint waitMilliseconds_ = 0;
    public bool HasWaitMilliseconds {
      get { return hasWaitMilliseconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint WaitMilliseconds {
      get { return waitMilliseconds_; }
    }
    
    public const int GamesPerHourFieldNumber = 4;
    private bool hasGamesPerHour;
    private uint gamesPerHour_ = 0;
    public bool HasGamesPerHour {
      get { return hasGamesPerHour; }
    }
    [global::System.CLSCompliant(false)]
    public uint GamesPerHour {
      get { return gamesPerHour_; }
    }
    
    public const int ActiveGamesFieldNumber = 5;
    private bool hasActiveGames;
    private uint activeGames_ = 0;
    public bool HasActiveGames {
      get { return hasActiveGames; }
    }
    [global::System.CLSCompliant(false)]
    public uint ActiveGames {
      get { return activeGames_; }
    }
    
    public const int ActivePlayersFieldNumber = 6;
    private bool hasActivePlayers;
    private uint activePlayers_ = 0;
    public bool HasActivePlayers {
      get { return hasActivePlayers; }
    }
    [global::System.CLSCompliant(false)]
    public uint ActivePlayers {
      get { return activePlayers_; }
    }
    
    public const int FormingGamesFieldNumber = 7;
    private bool hasFormingGames;
    private uint formingGames_ = 0;
    public bool HasFormingGames {
      get { return hasFormingGames; }
    }
    [global::System.CLSCompliant(false)]
    public uint FormingGames {
      get { return formingGames_; }
    }
    
    public const int WaitingPlayersFieldNumber = 8;
    private bool hasWaitingPlayers;
    private uint waitingPlayers_ = 0;
    public bool HasWaitingPlayers {
      get { return hasWaitingPlayers; }
    }
    [global::System.CLSCompliant(false)]
    public uint WaitingPlayers {
      get { return waitingPlayers_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBucketMin) {
        output.WriteFloat(1, BucketMin);
      }
      if (HasBucketMax) {
        output.WriteFloat(2, BucketMax);
      }
      if (HasWaitMilliseconds) {
        output.WriteUInt32(3, WaitMilliseconds);
      }
      if (HasGamesPerHour) {
        output.WriteUInt32(4, GamesPerHour);
      }
      if (HasActiveGames) {
        output.WriteUInt32(5, ActiveGames);
      }
      if (HasActivePlayers) {
        output.WriteUInt32(6, ActivePlayers);
      }
      if (HasFormingGames) {
        output.WriteUInt32(7, FormingGames);
      }
      if (HasWaitingPlayers) {
        output.WriteUInt32(8, WaitingPlayers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBucketMin) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, BucketMin);
        }
        if (HasBucketMax) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, BucketMax);
        }
        if (HasWaitMilliseconds) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, WaitMilliseconds);
        }
        if (HasGamesPerHour) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GamesPerHour);
        }
        if (HasActiveGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ActiveGames);
        }
        if (HasActivePlayers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, ActivePlayers);
        }
        if (HasFormingGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, FormingGames);
        }
        if (HasWaitingPlayers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, WaitingPlayers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameStatsBucket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameStatsBucket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameStatsBucket prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameStatsBucket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameStatsBucket result = new GameStatsBucket();
      
      protected override GameStatsBucket MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameStatsBucket();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameStatsBucket.Descriptor; }
      }
      
      public override GameStatsBucket DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameStatsBucket.DefaultInstance; }
      }
      
      public override GameStatsBucket BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GameStatsBucket returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameStatsBucket) {
          return MergeFrom((GameStatsBucket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameStatsBucket other) {
        if (other == global::bnet.protocol.game_master.GameStatsBucket.DefaultInstance) return this;
        if (other.HasBucketMin) {
          BucketMin = other.BucketMin;
        }
        if (other.HasBucketMax) {
          BucketMax = other.BucketMax;
        }
        if (other.HasWaitMilliseconds) {
          WaitMilliseconds = other.WaitMilliseconds;
        }
        if (other.HasGamesPerHour) {
          GamesPerHour = other.GamesPerHour;
        }
        if (other.HasActiveGames) {
          ActiveGames = other.ActiveGames;
        }
        if (other.HasActivePlayers) {
          ActivePlayers = other.ActivePlayers;
        }
        if (other.HasFormingGames) {
          FormingGames = other.FormingGames;
        }
        if (other.HasWaitingPlayers) {
          WaitingPlayers = other.WaitingPlayers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              BucketMin = input.ReadFloat();
              break;
            }
            case 21: {
              BucketMax = input.ReadFloat();
              break;
            }
            case 24: {
              WaitMilliseconds = input.ReadUInt32();
              break;
            }
            case 32: {
              GamesPerHour = input.ReadUInt32();
              break;
            }
            case 40: {
              ActiveGames = input.ReadUInt32();
              break;
            }
            case 48: {
              ActivePlayers = input.ReadUInt32();
              break;
            }
            case 56: {
              FormingGames = input.ReadUInt32();
              break;
            }
            case 64: {
              WaitingPlayers = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasBucketMin {
        get { return result.HasBucketMin; }
      }
      public float BucketMin {
        get { return result.BucketMin; }
        set { SetBucketMin(value); }
      }
      public Builder SetBucketMin(float value) {
        result.hasBucketMin = true;
        result.bucketMin_ = value;
        return this;
      }
      public Builder ClearBucketMin() {
        result.hasBucketMin = false;
        result.bucketMin_ = 0F;
        return this;
      }
      
      public bool HasBucketMax {
        get { return result.HasBucketMax; }
      }
      public float BucketMax {
        get { return result.BucketMax; }
        set { SetBucketMax(value); }
      }
      public Builder SetBucketMax(float value) {
        result.hasBucketMax = true;
        result.bucketMax_ = value;
        return this;
      }
      public Builder ClearBucketMax() {
        result.hasBucketMax = false;
        result.bucketMax_ = 4.294967E+09F;
        return this;
      }
      
      public bool HasWaitMilliseconds {
        get { return result.HasWaitMilliseconds; }
      }
      [global::System.CLSCompliant(false)]
      public uint WaitMilliseconds {
        get { return result.WaitMilliseconds; }
        set { SetWaitMilliseconds(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWaitMilliseconds(uint value) {
        result.hasWaitMilliseconds = true;
        result.waitMilliseconds_ = value;
        return this;
      }
      public Builder ClearWaitMilliseconds() {
        result.hasWaitMilliseconds = false;
        result.waitMilliseconds_ = 0;
        return this;
      }
      
      public bool HasGamesPerHour {
        get { return result.HasGamesPerHour; }
      }
      [global::System.CLSCompliant(false)]
      public uint GamesPerHour {
        get { return result.GamesPerHour; }
        set { SetGamesPerHour(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGamesPerHour(uint value) {
        result.hasGamesPerHour = true;
        result.gamesPerHour_ = value;
        return this;
      }
      public Builder ClearGamesPerHour() {
        result.hasGamesPerHour = false;
        result.gamesPerHour_ = 0;
        return this;
      }
      
      public bool HasActiveGames {
        get { return result.HasActiveGames; }
      }
      [global::System.CLSCompliant(false)]
      public uint ActiveGames {
        get { return result.ActiveGames; }
        set { SetActiveGames(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetActiveGames(uint value) {
        result.hasActiveGames = true;
        result.activeGames_ = value;
        return this;
      }
      public Builder ClearActiveGames() {
        result.hasActiveGames = false;
        result.activeGames_ = 0;
        return this;
      }
      
      public bool HasActivePlayers {
        get { return result.HasActivePlayers; }
      }
      [global::System.CLSCompliant(false)]
      public uint ActivePlayers {
        get { return result.ActivePlayers; }
        set { SetActivePlayers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetActivePlayers(uint value) {
        result.hasActivePlayers = true;
        result.activePlayers_ = value;
        return this;
      }
      public Builder ClearActivePlayers() {
        result.hasActivePlayers = false;
        result.activePlayers_ = 0;
        return this;
      }
      
      public bool HasFormingGames {
        get { return result.HasFormingGames; }
      }
      [global::System.CLSCompliant(false)]
      public uint FormingGames {
        get { return result.FormingGames; }
        set { SetFormingGames(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFormingGames(uint value) {
        result.hasFormingGames = true;
        result.formingGames_ = value;
        return this;
      }
      public Builder ClearFormingGames() {
        result.hasFormingGames = false;
        result.formingGames_ = 0;
        return this;
      }
      
      public bool HasWaitingPlayers {
        get { return result.HasWaitingPlayers; }
      }
      [global::System.CLSCompliant(false)]
      public uint WaitingPlayers {
        get { return result.WaitingPlayers; }
        set { SetWaitingPlayers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWaitingPlayers(uint value) {
        result.hasWaitingPlayers = true;
        result.waitingPlayers_ = value;
        return this;
      }
      public Builder ClearWaitingPlayers() {
        result.hasWaitingPlayers = false;
        result.waitingPlayers_ = 0;
        return this;
      }
    }
    static GameStatsBucket() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GameFactoryDescription : pb::GeneratedMessage<GameFactoryDescription, GameFactoryDescription.Builder> {
    private static readonly GameFactoryDescription defaultInstance = new Builder().BuildPartial();
    public static GameFactoryDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameFactoryDescription DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameFactoryDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameFactoryDescription, GameFactoryDescription.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int StatsBucketFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.game_master.GameStatsBucket> statsBucket_ = new pbc::PopsicleList<global::bnet.protocol.game_master.GameStatsBucket>();
    public scg::IList<global::bnet.protocol.game_master.GameStatsBucket> StatsBucketList {
      get { return statsBucket_; }
    }
    public int StatsBucketCount {
      get { return statsBucket_.Count; }
    }
    public global::bnet.protocol.game_master.GameStatsBucket GetStatsBucket(int index) {
      return statsBucket_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteFixed64(1, Id);
      }
      if (HasName) {
        output.WriteString(2, Name);
      }
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(3, element);
      }
      foreach (global::bnet.protocol.game_master.GameStatsBucket element in StatsBucketList) {
        output.WriteMessage(4, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.game_master.GameStatsBucket element in StatsBucketList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameFactoryDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameFactoryDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameFactoryDescription prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameFactoryDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameFactoryDescription result = new GameFactoryDescription();
      
      protected override GameFactoryDescription MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameFactoryDescription();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameFactoryDescription.Descriptor; }
      }
      
      public override GameFactoryDescription DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameFactoryDescription.DefaultInstance; }
      }
      
      public override GameFactoryDescription BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        result.statsBucket_.MakeReadOnly();
        GameFactoryDescription returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameFactoryDescription) {
          return MergeFrom((GameFactoryDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameFactoryDescription other) {
        if (other == global::bnet.protocol.game_master.GameFactoryDescription.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.statsBucket_.Count != 0) {
          base.AddRange(other.statsBucket_, result.statsBucket_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              Id = input.ReadFixed64();
              break;
            }
            case 18: {
              Name = input.ReadString();
              break;
            }
            case 26: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::bnet.protocol.game_master.GameStatsBucket.Builder subBuilder = global::bnet.protocol.game_master.GameStatsBucket.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddStatsBucket(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.game_master.GameStatsBucket> StatsBucketList {
        get { return result.statsBucket_; }
      }
      public int StatsBucketCount {
        get { return result.StatsBucketCount; }
      }
      public global::bnet.protocol.game_master.GameStatsBucket GetStatsBucket(int index) {
        return result.GetStatsBucket(index);
      }
      public Builder SetStatsBucket(int index, global::bnet.protocol.game_master.GameStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.statsBucket_[index] = value;
        return this;
      }
      public Builder SetStatsBucket(int index, global::bnet.protocol.game_master.GameStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.statsBucket_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStatsBucket(global::bnet.protocol.game_master.GameStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.statsBucket_.Add(value);
        return this;
      }
      public Builder AddStatsBucket(global::bnet.protocol.game_master.GameStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.statsBucket_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStatsBucket(scg::IEnumerable<global::bnet.protocol.game_master.GameStatsBucket> values) {
        base.AddRange(values, result.statsBucket_);
        return this;
      }
      public Builder ClearStatsBucket() {
        result.statsBucket_.Clear();
        return this;
      }
    }
    static GameFactoryDescription() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GameHandle : pb::GeneratedMessage<GameHandle, GameHandle.Builder> {
    private static readonly GameHandle defaultInstance = new Builder().BuildPartial();
    public static GameHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameHandle DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameHandle, GameHandle.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable; }
    }
    
    public const int FactoryIdFieldNumber = 1;
    private bool hasFactoryId;
    private ulong factoryId_ = 0;
    public bool HasFactoryId {
      get { return hasFactoryId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong FactoryId {
      get { return factoryId_; }
    }
    
    public const int GameIdFieldNumber = 2;
    private bool hasGameId;
    private global::bnet.protocol.EntityId gameId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameId {
      get { return hasGameId; }
    }
    public global::bnet.protocol.EntityId GameId {
      get { return gameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactoryId) return false;
        if (!hasGameId) return false;
        if (!GameId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFactoryId) {
        output.WriteFixed64(1, FactoryId);
      }
      if (HasGameId) {
        output.WriteMessage(2, GameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFactoryId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, FactoryId);
        }
        if (HasGameId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameHandle prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameHandle result = new GameHandle();
      
      protected override GameHandle MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameHandle();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameHandle.Descriptor; }
      }
      
      public override GameHandle DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameHandle.DefaultInstance; }
      }
      
      public override GameHandle BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GameHandle returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameHandle) {
          return MergeFrom((GameHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameHandle other) {
        if (other == global::bnet.protocol.game_master.GameHandle.DefaultInstance) return this;
        if (other.HasFactoryId) {
          FactoryId = other.FactoryId;
        }
        if (other.HasGameId) {
          MergeGameId(other.GameId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              FactoryId = input.ReadFixed64();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameId) {
                subBuilder.MergeFrom(GameId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasFactoryId {
        get { return result.HasFactoryId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FactoryId {
        get { return result.FactoryId; }
        set { SetFactoryId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFactoryId(ulong value) {
        result.hasFactoryId = true;
        result.factoryId_ = value;
        return this;
      }
      public Builder ClearFactoryId() {
        result.hasFactoryId = false;
        result.factoryId_ = 0;
        return this;
      }
      
      public bool HasGameId {
       get { return result.HasGameId; }
      }
      public global::bnet.protocol.EntityId GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder SetGameId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameId = true;
        result.gameId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameId &&
            result.gameId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameId_ = value;
        }
        result.hasGameId = true;
        return this;
      }
      public Builder ClearGameId() {
        result.hasGameId = false;
        result.gameId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
    }
    static GameHandle() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}
