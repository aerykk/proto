// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.connection {
  
  public static partial class Connection {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_ConnectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectRequest, global::bnet.protocol.connection.ConnectRequest.Builder> internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_ConnectResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder> internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BoundService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BoundService, global::bnet.protocol.connection.BoundService.Builder> internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BindRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindRequest, global::bnet.protocol.connection.BindRequest.Builder> internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BindResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder> internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EchoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoRequest, global::bnet.protocol.connection.EchoRequest.Builder> internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EchoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder> internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectRequest, global::bnet.protocol.connection.DisconnectRequest.Builder> internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectNotification, global::bnet.protocol.connection.DisconnectNotification.Builder> internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_NullRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.NullRequest, global::bnet.protocol.connection.NullRequest.Builder> internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EncryptRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EncryptRequest, global::bnet.protocol.connection.EncryptRequest.Builder> internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Connection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChhsaWIvcnBjL2Nvbm5lY3Rpb24ucHJvdG8SGGJuZXQucHJvdG9jb2wuY29u" + 
          "bmVjdGlvbhoRbGliL3JwYy9ycGMucHJvdG8iPQoOQ29ubmVjdFJlcXVlc3QS" + 
          "KwoJY2xpZW50X2lkGAEgASgLMhguYm5ldC5wcm90b2NvbC5Qcm9jZXNzSWQi" + 
          "awoPQ29ubmVjdFJlc3BvbnNlEisKCXNlcnZlcl9pZBgBIAIoCzIYLmJuZXQu" + 
          "cHJvdG9jb2wuUHJvY2Vzc0lkEisKCWNsaWVudF9pZBgCIAEoCzIYLmJuZXQu" + 
          "cHJvdG9jb2wuUHJvY2Vzc0lkIigKDEJvdW5kU2VydmljZRIMCgRoYXNoGAEg" + 
          "AigHEgoKAmlkGAIgAigNInIKC0JpbmRSZXF1ZXN0EiEKFWltcG9ydGVkX3Nl" + 
          "cnZpY2VfaGFzaBgBIAMoB0ICEAESQAoQZXhwb3J0ZWRfc2VydmljZRgCIAMo" + 
          "CzImLmJuZXQucHJvdG9jb2wuY29ubmVjdGlvbi5Cb3VuZFNlcnZpY2UiLwoM" + 
          "QmluZFJlc3BvbnNlEh8KE2ltcG9ydGVkX3NlcnZpY2VfaWQYASADKA1CAhAB" + 
          "IkkKC0VjaG9SZXF1ZXN0EgwKBHRpbWUYASABKAYSGwoMbmV0d29ya19vbmx5" + 
          "GAIgASgIOgVmYWxzZRIPCgdwYXlsb2FkGAMgASgMIi0KDEVjaG9SZXNwb25z" + 
          "ZRIMCgR0aW1lGAEgASgGEg8KB3BheWxvYWQYAiABKAwiJwoRRGlzY29ubmVj" + 
          "dFJlcXVlc3QSEgoKZXJyb3JfY29kZRgBIAIoDSI8ChZEaXNjb25uZWN0Tm90" + 
          "aWZpY2F0aW9uEhIKCmVycm9yX2NvZGUYASACKA0SDgoGcmVhc29uGAIgASgJ" + 
          "Ig0KC051bGxSZXF1ZXN0IhAKDkVuY3J5cHRSZXF1ZXN0MvcEChFDb25uZWN0" + 
          "aW9uU2VydmljZRJeCgdDb25uZWN0EiguYm5ldC5wcm90b2NvbC5jb25uZWN0" + 
          "aW9uLkNvbm5lY3RSZXF1ZXN0GikuYm5ldC5wcm90b2NvbC5jb25uZWN0aW9u" + 
          "LkNvbm5lY3RSZXNwb25zZRJVCgRCaW5kEiUuYm5ldC5wcm90b2NvbC5jb25u" + 
          "ZWN0aW9uLkJpbmRSZXF1ZXN0GiYuYm5ldC5wcm90b2NvbC5jb25uZWN0aW9u" + 
          "LkJpbmRSZXNwb25zZRJVCgRFY2hvEiUuYm5ldC5wcm90b2NvbC5jb25uZWN0" + 
          "aW9uLkVjaG9SZXF1ZXN0GiYuYm5ldC5wcm90b2NvbC5jb25uZWN0aW9uLkVj" + 
          "aG9SZXNwb25zZRJfCg9Gb3JjZURpc2Nvbm5lY3QSMC5ibmV0LnByb3RvY29s" + 
          "LmNvbm5lY3Rpb24uRGlzY29ubmVjdE5vdGlmaWNhdGlvbhoaLmJuZXQucHJv" + 
          "dG9jb2wuTk9fUkVTUE9OU0USSQoETnVsbBIlLmJuZXQucHJvdG9jb2wuY29u" + 
          "bmVjdGlvbi5OdWxsUmVxdWVzdBoaLmJuZXQucHJvdG9jb2wuTk9fUkVTUE9O" + 
          "U0USSgoHRW5jcnlwdBIoLmJuZXQucHJvdG9jb2wuY29ubmVjdGlvbi5FbmNy" + 
          "eXB0UmVxdWVzdBoVLmJuZXQucHJvdG9jb2wuTm9EYXRhElwKEVJlcXVlc3RE" + 
          "aXNjb25uZWN0EisuYm5ldC5wcm90b2NvbC5jb25uZWN0aW9uLkRpc2Nvbm5l" + 
          "Y3RSZXF1ZXN0GhouYm5ldC5wcm90b2NvbC5OT19SRVNQT05TRUIDgAEB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_connection_ConnectRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectRequest, global::bnet.protocol.connection.ConnectRequest.Builder>(internal__static_bnet_protocol_connection_ConnectRequest__Descriptor,
                new string[] { "ClientId", });
        internal__static_bnet_protocol_connection_ConnectResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder>(internal__static_bnet_protocol_connection_ConnectResponse__Descriptor,
                new string[] { "ServerId", "ClientId", });
        internal__static_bnet_protocol_connection_BoundService__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BoundService, global::bnet.protocol.connection.BoundService.Builder>(internal__static_bnet_protocol_connection_BoundService__Descriptor,
                new string[] { "Hash", "Id", });
        internal__static_bnet_protocol_connection_BindRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindRequest, global::bnet.protocol.connection.BindRequest.Builder>(internal__static_bnet_protocol_connection_BindRequest__Descriptor,
                new string[] { "ImportedServiceHash", "ExportedService", });
        internal__static_bnet_protocol_connection_BindResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder>(internal__static_bnet_protocol_connection_BindResponse__Descriptor,
                new string[] { "ImportedServiceId", });
        internal__static_bnet_protocol_connection_EchoRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoRequest, global::bnet.protocol.connection.EchoRequest.Builder>(internal__static_bnet_protocol_connection_EchoRequest__Descriptor,
                new string[] { "Time", "NetworkOnly", "Payload", });
        internal__static_bnet_protocol_connection_EchoResponse__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder>(internal__static_bnet_protocol_connection_EchoResponse__Descriptor,
                new string[] { "Time", "Payload", });
        internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectRequest, global::bnet.protocol.connection.DisconnectRequest.Builder>(internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor,
                new string[] { "ErrorCode", });
        internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectNotification, global::bnet.protocol.connection.DisconnectNotification.Builder>(internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor,
                new string[] { "ErrorCode", "Reason", });
        internal__static_bnet_protocol_connection_NullRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.NullRequest, global::bnet.protocol.connection.NullRequest.Builder>(internal__static_bnet_protocol_connection_NullRequest__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_connection_EncryptRequest__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EncryptRequest, global::bnet.protocol.connection.EncryptRequest.Builder>(internal__static_bnet_protocol_connection_EncryptRequest__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Rpc.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class ConnectRequest : pb::GeneratedMessage<ConnectRequest, ConnectRequest.Builder> {
    private static readonly ConnectRequest defaultInstance = new Builder().BuildPartial();
    public static ConnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ConnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_ConnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectRequest, ConnectRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable; }
    }
    
    public const int ClientIdFieldNumber = 1;
    private bool hasClientId;
    private global::bnet.protocol.ProcessId clientId_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasClientId {
      get { return hasClientId; }
    }
    public global::bnet.protocol.ProcessId ClientId {
      get { return clientId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasClientId) {
          if (!ClientId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasClientId) {
        output.WriteMessage(1, ClientId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasClientId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ClientId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ConnectRequest result = new ConnectRequest();
      
      protected override ConnectRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ConnectRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.ConnectRequest.Descriptor; }
      }
      
      public override ConnectRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.ConnectRequest.DefaultInstance; }
      }
      
      public override ConnectRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ConnectRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectRequest) {
          return MergeFrom((ConnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectRequest other) {
        if (other == global::bnet.protocol.connection.ConnectRequest.DefaultInstance) return this;
        if (other.HasClientId) {
          MergeClientId(other.ClientId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasClientId) {
                subBuilder.MergeFrom(ClientId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasClientId {
       get { return result.HasClientId; }
      }
      public global::bnet.protocol.ProcessId ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClientId = true;
        result.clientId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClientId &&
            result.clientId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.clientId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.clientId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientId_ = value;
        }
        result.hasClientId = true;
        return this;
      }
      public Builder ClearClientId() {
        result.hasClientId = false;
        result.clientId_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static ConnectRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class ConnectResponse : pb::GeneratedMessage<ConnectResponse, ConnectResponse.Builder> {
    private static readonly ConnectResponse defaultInstance = new Builder().BuildPartial();
    public static ConnectResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ConnectResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_ConnectResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectResponse, ConnectResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private global::bnet.protocol.ProcessId serverId_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public global::bnet.protocol.ProcessId ServerId {
      get { return serverId_; }
    }
    
    public const int ClientIdFieldNumber = 2;
    private bool hasClientId;
    private global::bnet.protocol.ProcessId clientId_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasClientId {
      get { return hasClientId; }
    }
    public global::bnet.protocol.ProcessId ClientId {
      get { return clientId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!ServerId.IsInitialized) return false;
        if (HasClientId) {
          if (!ClientId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasServerId) {
        output.WriteMessage(1, ServerId);
      }
      if (HasClientId) {
        output.WriteMessage(2, ClientId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasServerId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ServerId);
        }
        if (HasClientId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ClientId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ConnectResponse result = new ConnectResponse();
      
      protected override ConnectResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ConnectResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.ConnectResponse.Descriptor; }
      }
      
      public override ConnectResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.ConnectResponse.DefaultInstance; }
      }
      
      public override ConnectResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ConnectResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectResponse) {
          return MergeFrom((ConnectResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectResponse other) {
        if (other == global::bnet.protocol.connection.ConnectResponse.DefaultInstance) return this;
        if (other.HasServerId) {
          MergeServerId(other.ServerId);
        }
        if (other.HasClientId) {
          MergeClientId(other.ClientId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasServerId) {
                subBuilder.MergeFrom(ServerId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ServerId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasClientId) {
                subBuilder.MergeFrom(ClientId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasServerId {
       get { return result.HasServerId; }
      }
      public global::bnet.protocol.ProcessId ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder SetServerId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasServerId = true;
        result.serverId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasServerId &&
            result.serverId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.serverId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.serverId_).MergeFrom(value).BuildPartial();
        } else {
          result.serverId_ = value;
        }
        result.hasServerId = true;
        return this;
      }
      public Builder ClearServerId() {
        result.hasServerId = false;
        result.serverId_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
      
      public bool HasClientId {
       get { return result.HasClientId; }
      }
      public global::bnet.protocol.ProcessId ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClientId = true;
        result.clientId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClientId &&
            result.clientId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.clientId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.clientId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientId_ = value;
        }
        result.hasClientId = true;
        return this;
      }
      public Builder ClearClientId() {
        result.hasClientId = false;
        result.clientId_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static ConnectResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class BoundService : pb::GeneratedMessage<BoundService, BoundService.Builder> {
    private static readonly BoundService defaultInstance = new Builder().BuildPartial();
    public static BoundService DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BoundService DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BoundService ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BoundService__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BoundService, BoundService.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private uint hash_ = 0;
    public bool HasHash {
      get { return hasHash; }
    }
    [global::System.CLSCompliant(false)]
    public uint Hash {
      get { return hash_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHash) return false;
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHash) {
        output.WriteFixed32(1, Hash);
      }
      if (HasId) {
        output.WriteUInt32(2, Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHash) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Hash);
        }
        if (HasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BoundService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoundService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoundService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoundService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BoundService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BoundService ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoundService ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BoundService prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BoundService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BoundService result = new BoundService();
      
      protected override BoundService MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BoundService();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BoundService.Descriptor; }
      }
      
      public override BoundService DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BoundService.DefaultInstance; }
      }
      
      public override BoundService BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        BoundService returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BoundService) {
          return MergeFrom((BoundService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BoundService other) {
        if (other == global::bnet.protocol.connection.BoundService.DefaultInstance) return this;
        if (other.HasHash) {
          Hash = other.Hash;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              Hash = input.ReadFixed32();
              break;
            }
            case 16: {
              Id = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasHash {
        get { return result.HasHash; }
      }
      [global::System.CLSCompliant(false)]
      public uint Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHash(uint value) {
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        result.hasHash = false;
        result.hash_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.HasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static BoundService() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class BindRequest : pb::GeneratedMessage<BindRequest, BindRequest.Builder> {
    private static readonly BindRequest defaultInstance = new Builder().BuildPartial();
    public static BindRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BindRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BindRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindRequest, BindRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable; }
    }
    
    public const int ImportedServiceHashFieldNumber = 1;
    private int importedServiceHashMemoizedSerializedSize;
    private pbc::PopsicleList<uint> importedServiceHash_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ImportedServiceHashList {
      get { return pbc::Lists.AsReadOnly(importedServiceHash_); }
    }
    public int ImportedServiceHashCount {
      get { return importedServiceHash_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetImportedServiceHash(int index) {
      return importedServiceHash_[index];
    }
    
    public const int ExportedServiceFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.connection.BoundService> exportedService_ = new pbc::PopsicleList<global::bnet.protocol.connection.BoundService>();
    public scg::IList<global::bnet.protocol.connection.BoundService> ExportedServiceList {
      get { return exportedService_; }
    }
    public int ExportedServiceCount {
      get { return exportedService_.Count; }
    }
    public global::bnet.protocol.connection.BoundService GetExportedService(int index) {
      return exportedService_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.connection.BoundService element in ExportedServiceList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (importedServiceHash_.Count > 0) {
        output.WriteRawVarint32(10);
        output.WriteRawVarint32((uint) importedServiceHashMemoizedSerializedSize);
        foreach (uint element in importedServiceHash_) {
          output.WriteFixed32NoTag(element);
        }
      }
      foreach (global::bnet.protocol.connection.BoundService element in ExportedServiceList) {
        output.WriteMessage(2, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * importedServiceHash_.Count;
          size += dataSize;
          if (importedServiceHash_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          importedServiceHashMemoizedSerializedSize = dataSize;
        }
        foreach (global::bnet.protocol.connection.BoundService element in ExportedServiceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BindRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BindRequest result = new BindRequest();
      
      protected override BindRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BindRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BindRequest.Descriptor; }
      }
      
      public override BindRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BindRequest.DefaultInstance; }
      }
      
      public override BindRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.importedServiceHash_.MakeReadOnly();
        result.exportedService_.MakeReadOnly();
        BindRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindRequest) {
          return MergeFrom((BindRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindRequest other) {
        if (other == global::bnet.protocol.connection.BindRequest.DefaultInstance) return this;
        if (other.importedServiceHash_.Count != 0) {
          base.AddRange(other.importedServiceHash_, result.importedServiceHash_);
        }
        if (other.exportedService_.Count != 0) {
          base.AddRange(other.exportedService_, result.exportedService_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              int length = input.ReadInt32();
              int limit = input.PushLimit(length);
              while (!input.ReachedLimit) {
                AddImportedServiceHash(input.ReadFixed32());
              }
              input.PopLimit(limit);
              break;
            }
            case 18: {
              global::bnet.protocol.connection.BoundService.Builder subBuilder = global::bnet.protocol.connection.BoundService.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddExportedService(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ImportedServiceHashList {
        get { return result.importedServiceHash_; }
      }
      public int ImportedServiceHashCount {
        get { return result.ImportedServiceHashCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetImportedServiceHash(int index) {
        return result.GetImportedServiceHash(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetImportedServiceHash(int index, uint value) {
        result.importedServiceHash_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddImportedServiceHash(uint value) {
        result.importedServiceHash_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeImportedServiceHash(scg::IEnumerable<uint> values) {
        base.AddRange(values, result.importedServiceHash_);
        return this;
      }
      public Builder ClearImportedServiceHash() {
        result.importedServiceHash_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.connection.BoundService> ExportedServiceList {
        get { return result.exportedService_; }
      }
      public int ExportedServiceCount {
        get { return result.ExportedServiceCount; }
      }
      public global::bnet.protocol.connection.BoundService GetExportedService(int index) {
        return result.GetExportedService(index);
      }
      public Builder SetExportedService(int index, global::bnet.protocol.connection.BoundService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.exportedService_[index] = value;
        return this;
      }
      public Builder SetExportedService(int index, global::bnet.protocol.connection.BoundService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.exportedService_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExportedService(global::bnet.protocol.connection.BoundService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.exportedService_.Add(value);
        return this;
      }
      public Builder AddExportedService(global::bnet.protocol.connection.BoundService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.exportedService_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExportedService(scg::IEnumerable<global::bnet.protocol.connection.BoundService> values) {
        base.AddRange(values, result.exportedService_);
        return this;
      }
      public Builder ClearExportedService() {
        result.exportedService_.Clear();
        return this;
      }
    }
    static BindRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class BindResponse : pb::GeneratedMessage<BindResponse, BindResponse.Builder> {
    private static readonly BindResponse defaultInstance = new Builder().BuildPartial();
    public static BindResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BindResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BindResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindResponse, BindResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable; }
    }
    
    public const int ImportedServiceIdFieldNumber = 1;
    private int importedServiceIdMemoizedSerializedSize;
    private pbc::PopsicleList<uint> importedServiceId_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ImportedServiceIdList {
      get { return pbc::Lists.AsReadOnly(importedServiceId_); }
    }
    public int ImportedServiceIdCount {
      get { return importedServiceId_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetImportedServiceId(int index) {
      return importedServiceId_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (importedServiceId_.Count > 0) {
        output.WriteRawVarint32(10);
        output.WriteRawVarint32((uint) importedServiceIdMemoizedSerializedSize);
        foreach (uint element in importedServiceId_) {
          output.WriteUInt32NoTag(element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in ImportedServiceIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (importedServiceId_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          importedServiceIdMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BindResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BindResponse result = new BindResponse();
      
      protected override BindResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BindResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BindResponse.Descriptor; }
      }
      
      public override BindResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BindResponse.DefaultInstance; }
      }
      
      public override BindResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.importedServiceId_.MakeReadOnly();
        BindResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindResponse) {
          return MergeFrom((BindResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindResponse other) {
        if (other == global::bnet.protocol.connection.BindResponse.DefaultInstance) return this;
        if (other.importedServiceId_.Count != 0) {
          base.AddRange(other.importedServiceId_, result.importedServiceId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              int length = input.ReadInt32();
              int limit = input.PushLimit(length);
              while (!input.ReachedLimit) {
                AddImportedServiceId(input.ReadUInt32());
              }
              input.PopLimit(limit);
              break;
            }
          }
        }
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ImportedServiceIdList {
        get { return result.importedServiceId_; }
      }
      public int ImportedServiceIdCount {
        get { return result.ImportedServiceIdCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetImportedServiceId(int index) {
        return result.GetImportedServiceId(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetImportedServiceId(int index, uint value) {
        result.importedServiceId_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddImportedServiceId(uint value) {
        result.importedServiceId_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeImportedServiceId(scg::IEnumerable<uint> values) {
        base.AddRange(values, result.importedServiceId_);
        return this;
      }
      public Builder ClearImportedServiceId() {
        result.importedServiceId_.Clear();
        return this;
      }
    }
    static BindResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class EchoRequest : pb::GeneratedMessage<EchoRequest, EchoRequest.Builder> {
    private static readonly EchoRequest defaultInstance = new Builder().BuildPartial();
    public static EchoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EchoRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override EchoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EchoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EchoRequest, EchoRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable; }
    }
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private ulong time_ = 0;
    public bool HasTime {
      get { return hasTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Time {
      get { return time_; }
    }
    
    public const int NetworkOnlyFieldNumber = 2;
    private bool hasNetworkOnly;
    private bool networkOnly_ = false;
    public bool HasNetworkOnly {
      get { return hasNetworkOnly; }
    }
    public bool NetworkOnly {
      get { return networkOnly_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTime) {
        output.WriteFixed64(1, Time);
      }
      if (HasNetworkOnly) {
        output.WriteBool(2, NetworkOnly);
      }
      if (HasPayload) {
        output.WriteBytes(3, Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTime) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Time);
        }
        if (HasNetworkOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, NetworkOnly);
        }
        if (HasPayload) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Payload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EchoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EchoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EchoRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<EchoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      EchoRequest result = new EchoRequest();
      
      protected override EchoRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new EchoRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EchoRequest.Descriptor; }
      }
      
      public override EchoRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EchoRequest.DefaultInstance; }
      }
      
      public override EchoRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        EchoRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EchoRequest) {
          return MergeFrom((EchoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EchoRequest other) {
        if (other == global::bnet.protocol.connection.EchoRequest.DefaultInstance) return this;
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasNetworkOnly) {
          NetworkOnly = other.NetworkOnly;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              Time = input.ReadFixed64();
              break;
            }
            case 16: {
              NetworkOnly = input.ReadBool();
              break;
            }
            case 26: {
              Payload = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasTime {
        get { return result.HasTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTime(ulong value) {
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasNetworkOnly {
        get { return result.HasNetworkOnly; }
      }
      public bool NetworkOnly {
        get { return result.NetworkOnly; }
        set { SetNetworkOnly(value); }
      }
      public Builder SetNetworkOnly(bool value) {
        result.hasNetworkOnly = true;
        result.networkOnly_ = value;
        return this;
      }
      public Builder ClearNetworkOnly() {
        result.hasNetworkOnly = false;
        result.networkOnly_ = false;
        return this;
      }
      
      public bool HasPayload {
        get { return result.HasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static EchoRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class EchoResponse : pb::GeneratedMessage<EchoResponse, EchoResponse.Builder> {
    private static readonly EchoResponse defaultInstance = new Builder().BuildPartial();
    public static EchoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EchoResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override EchoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EchoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EchoResponse, EchoResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable; }
    }
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private ulong time_ = 0;
    public bool HasTime {
      get { return hasTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Time {
      get { return time_; }
    }
    
    public const int PayloadFieldNumber = 2;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTime) {
        output.WriteFixed64(1, Time);
      }
      if (HasPayload) {
        output.WriteBytes(2, Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTime) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Time);
        }
        if (HasPayload) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Payload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EchoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EchoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EchoResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<EchoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      EchoResponse result = new EchoResponse();
      
      protected override EchoResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new EchoResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EchoResponse.Descriptor; }
      }
      
      public override EchoResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EchoResponse.DefaultInstance; }
      }
      
      public override EchoResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        EchoResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EchoResponse) {
          return MergeFrom((EchoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EchoResponse other) {
        if (other == global::bnet.protocol.connection.EchoResponse.DefaultInstance) return this;
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              Time = input.ReadFixed64();
              break;
            }
            case 18: {
              Payload = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasTime {
        get { return result.HasTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTime(ulong value) {
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasPayload {
        get { return result.HasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static EchoResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class DisconnectRequest : pb::GeneratedMessage<DisconnectRequest, DisconnectRequest.Builder> {
    private static readonly DisconnectRequest defaultInstance = new Builder().BuildPartial();
    public static DisconnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DisconnectRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DisconnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DisconnectRequest, DisconnectRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_ = 0;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasErrorCode) {
        output.WriteUInt32(1, ErrorCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DisconnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DisconnectRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DisconnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DisconnectRequest result = new DisconnectRequest();
      
      protected override DisconnectRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DisconnectRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.DisconnectRequest.Descriptor; }
      }
      
      public override DisconnectRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.DisconnectRequest.DefaultInstance; }
      }
      
      public override DisconnectRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DisconnectRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DisconnectRequest) {
          return MergeFrom((DisconnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DisconnectRequest other) {
        if (other == global::bnet.protocol.connection.DisconnectRequest.DefaultInstance) return this;
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ErrorCode = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasErrorCode {
        get { return result.HasErrorCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCode(uint value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
    }
    static DisconnectRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class DisconnectNotification : pb::GeneratedMessage<DisconnectNotification, DisconnectNotification.Builder> {
    private static readonly DisconnectNotification defaultInstance = new Builder().BuildPartial();
    public static DisconnectNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DisconnectNotification DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DisconnectNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DisconnectNotification, DisconnectNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_ = 0;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasErrorCode) {
        output.WriteUInt32(1, ErrorCode);
      }
      if (HasReason) {
        output.WriteString(2, Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        if (HasReason) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DisconnectNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DisconnectNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DisconnectNotification prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DisconnectNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DisconnectNotification result = new DisconnectNotification();
      
      protected override DisconnectNotification MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DisconnectNotification();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.DisconnectNotification.Descriptor; }
      }
      
      public override DisconnectNotification DefaultInstanceForType {
        get { return global::bnet.protocol.connection.DisconnectNotification.DefaultInstance; }
      }
      
      public override DisconnectNotification BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DisconnectNotification returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DisconnectNotification) {
          return MergeFrom((DisconnectNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DisconnectNotification other) {
        if (other == global::bnet.protocol.connection.DisconnectNotification.DefaultInstance) return this;
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ErrorCode = input.ReadUInt32();
              break;
            }
            case 18: {
              Reason = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasErrorCode {
        get { return result.HasErrorCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCode(uint value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.HasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static DisconnectNotification() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class NullRequest : pb::GeneratedMessage<NullRequest, NullRequest.Builder> {
    private static readonly NullRequest defaultInstance = new Builder().BuildPartial();
    public static NullRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NullRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NullRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_NullRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NullRequest, NullRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NullRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NullRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NullRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NullRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NullRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<NullRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NullRequest result = new NullRequest();
      
      protected override NullRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NullRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.NullRequest.Descriptor; }
      }
      
      public override NullRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.NullRequest.DefaultInstance; }
      }
      
      public override NullRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        NullRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NullRequest) {
          return MergeFrom((NullRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NullRequest other) {
        if (other == global::bnet.protocol.connection.NullRequest.DefaultInstance) return this;
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
          }
        }
      }
      
    }
    static NullRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  public sealed partial class EncryptRequest : pb::GeneratedMessage<EncryptRequest, EncryptRequest.Builder> {
    private static readonly EncryptRequest defaultInstance = new Builder().BuildPartial();
    public static EncryptRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EncryptRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override EncryptRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EncryptRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EncryptRequest, EncryptRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Connection.internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EncryptRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EncryptRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EncryptRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<EncryptRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      EncryptRequest result = new EncryptRequest();
      
      protected override EncryptRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new EncryptRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EncryptRequest.Descriptor; }
      }
      
      public override EncryptRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EncryptRequest.DefaultInstance; }
      }
      
      public override EncryptRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        EncryptRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EncryptRequest) {
          return MergeFrom((EncryptRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EncryptRequest other) {
        if (other == global::bnet.protocol.connection.EncryptRequest.DefaultInstance) return this;
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
          }
        }
      }
      
    }
    static EncryptRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Connection.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public abstract class ConnectionService : pb::IService {
    public abstract void Connect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.ConnectRequest request,
        global::System.Action<global::bnet.protocol.connection.ConnectResponse> done);
    public abstract void Bind(
        pb::IRpcController controller,
        global::bnet.protocol.connection.BindRequest request,
        global::System.Action<global::bnet.protocol.connection.BindResponse> done);
    public abstract void Echo(
        pb::IRpcController controller,
        global::bnet.protocol.connection.EchoRequest request,
        global::System.Action<global::bnet.protocol.connection.EchoResponse> done);
    public abstract void ForceDisconnect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.DisconnectNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void Null(
        pb::IRpcController controller,
        global::bnet.protocol.connection.NullRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void Encrypt(
        pb::IRpcController controller,
        global::bnet.protocol.connection.EncryptRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void RequestDisconnect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.DisconnectRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Connection.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.Connect(controller, (global::bnet.protocol.connection.ConnectRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.ConnectResponse>(
              done));
          return;
        case 1:
          this.Bind(controller, (global::bnet.protocol.connection.BindRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.BindResponse>(
              done));
          return;
        case 2:
          this.Echo(controller, (global::bnet.protocol.connection.EchoRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.EchoResponse>(
              done));
          return;
        case 3:
          this.ForceDisconnect(controller, (global::bnet.protocol.connection.DisconnectNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 4:
          this.Null(controller, (global::bnet.protocol.connection.NullRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 5:
          this.Encrypt(controller, (global::bnet.protocol.connection.EncryptRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 6:
          this.RequestDisconnect(controller, (global::bnet.protocol.connection.DisconnectRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.connection.ConnectRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.connection.BindRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.connection.EchoRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.connection.DisconnectNotification.DefaultInstance;
        case 4:
          return global::bnet.protocol.connection.NullRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.connection.EncryptRequest.DefaultInstance;
        case 6:
          return global::bnet.protocol.connection.DisconnectRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.connection.ConnectResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.connection.BindResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.connection.EchoResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 4:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 5:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 6:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    public class Stub : global::bnet.protocol.connection.ConnectionService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void Connect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.ConnectRequest request,
          global::System.Action<global::bnet.protocol.connection.ConnectResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.connection.ConnectResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder>(done, global::bnet.protocol.connection.ConnectResponse.DefaultInstance));
      }
      
      public override void Bind(
          pb::IRpcController controller,
          global::bnet.protocol.connection.BindRequest request,
          global::System.Action<global::bnet.protocol.connection.BindResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.connection.BindResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder>(done, global::bnet.protocol.connection.BindResponse.DefaultInstance));
      }
      
      public override void Echo(
          pb::IRpcController controller,
          global::bnet.protocol.connection.EchoRequest request,
          global::System.Action<global::bnet.protocol.connection.EchoResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.connection.EchoResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder>(done, global::bnet.protocol.connection.EchoResponse.DefaultInstance));
      }
      
      public override void ForceDisconnect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.DisconnectNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void Null(
          pb::IRpcController controller,
          global::bnet.protocol.connection.NullRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void Encrypt(
          pb::IRpcController controller,
          global::bnet.protocol.connection.EncryptRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void RequestDisconnect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.DisconnectRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[6],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}
