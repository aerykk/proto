// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.exchange {
  
  public static partial class Exchange {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_PartitionId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.PartitionId, global::bnet.protocol.exchange.PartitionId.Builder> internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobFrom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFrom, global::bnet.protocol.exchange.BlobFrom.Builder> internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobOfType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobOfType, global::bnet.protocol.exchange.BlobOfType.Builder> internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFromOfType, global::bnet.protocol.exchange.BlobFromOfType.Builder> internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Exchange() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChtsaWIvcHJvdG9jb2wvZXhjaGFuZ2UucHJvdG8SFmJuZXQucHJvdG9jb2wu" + 
          "ZXhjaGFuZ2UiKAoLUGFydGl0aW9uSWQSDAoEaGlnaBgBIAIoBhILCgNsb3cY" + 
          "AiACKAYiPAoIQmxvYkZyb20SDgoGc291cmNlGAEgAigHEgwKBGRhdGEYAiAC" + 
          "KAwSEgoKZXh0cmFfZGF0YRgDIAEoDCI8CgpCbG9iT2ZUeXBlEgwKBHR5cGUY" + 
          "ASACKAkSDAoEZGF0YRgCIAEoDBISCgpleHRyYV9kYXRhGAMgASgMIjwKDkJs" + 
          "b2JGcm9tT2ZUeXBlEg4KBnNvdXJjZRgBIAIoBxIMCgR0eXBlGAIgAigJEgwK" + 
          "BGRhdGEYAyACKAxCEUIMQ0V4Y2hhbmdlTGligAEB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_exchange_PartitionId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.PartitionId, global::bnet.protocol.exchange.PartitionId.Builder>(internal__static_bnet_protocol_exchange_PartitionId__Descriptor,
                new string[] { "High", "Low", });
        internal__static_bnet_protocol_exchange_BlobFrom__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFrom, global::bnet.protocol.exchange.BlobFrom.Builder>(internal__static_bnet_protocol_exchange_BlobFrom__Descriptor,
                new string[] { "Source", "Data", "ExtraData", });
        internal__static_bnet_protocol_exchange_BlobOfType__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobOfType, global::bnet.protocol.exchange.BlobOfType.Builder>(internal__static_bnet_protocol_exchange_BlobOfType__Descriptor,
                new string[] { "Type", "Data", "ExtraData", });
        internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFromOfType, global::bnet.protocol.exchange.BlobFromOfType.Builder>(internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor,
                new string[] { "Source", "Type", "Data", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class PartitionId : pb::GeneratedMessage<PartitionId, PartitionId.Builder> {
    private static readonly PartitionId defaultInstance = new Builder().BuildPartial();
    public static PartitionId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PartitionId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PartitionId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_PartitionId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PartitionId, PartitionId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable; }
    }
    
    public const int HighFieldNumber = 1;
    private bool hasHigh;
    private ulong high_ = 0;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public ulong High {
      get { return high_; }
    }
    
    public const int LowFieldNumber = 2;
    private bool hasLow;
    private ulong low_ = 0;
    public bool HasLow {
      get { return hasLow; }
    }
    public ulong Low {
      get { return low_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHigh) return false;
        if (!hasLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHigh) {
        output.WriteFixed64(1, High);
      }
      if (HasLow) {
        output.WriteFixed64(2, Low);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHigh) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, High);
        }
        if (HasLow) {
          size += pb::CodedOutputStream.ComputeFixed64Size(2, Low);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PartitionId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PartitionId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PartitionId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PartitionId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PartitionId result = new PartitionId();
      
      protected override PartitionId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PartitionId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.PartitionId.Descriptor; }
      }
      
      public override PartitionId DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.PartitionId.DefaultInstance; }
      }
      
      public override PartitionId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PartitionId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PartitionId) {
          return MergeFrom((PartitionId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PartitionId other) {
        if (other == global::bnet.protocol.exchange.PartitionId.DefaultInstance) return this;
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              High = input.ReadFixed64();
              break;
            }
            case 17: {
              Low = input.ReadFixed64();
              break;
            }
          }
        }
      }
      
      
      public bool HasHigh {
        get { return result.HasHigh; }
      }
      public ulong High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(ulong value) {
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        result.hasHigh = false;
        result.high_ = 0;
        return this;
      }
      
      public bool HasLow {
        get { return result.HasLow; }
      }
      public ulong Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(ulong value) {
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        result.hasLow = false;
        result.low_ = 0;
        return this;
      }
    }
    static PartitionId() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  public sealed partial class BlobFrom : pb::GeneratedMessage<BlobFrom, BlobFrom.Builder> {
    private static readonly BlobFrom defaultInstance = new Builder().BuildPartial();
    public static BlobFrom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobFrom DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BlobFrom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFrom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobFrom, BlobFrom.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable; }
    }
    
    public const int SourceFieldNumber = 1;
    private bool hasSource;
    private uint source_ = 0;
    public bool HasSource {
      get { return hasSource; }
    }
    public uint Source {
      get { return source_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int ExtraDataFieldNumber = 3;
    private bool hasExtraData;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public pb::ByteString ExtraData {
      get { return extraData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSource) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSource) {
        output.WriteFixed32(1, Source);
      }
      if (HasData) {
        output.WriteBytes(2, Data);
      }
      if (HasExtraData) {
        output.WriteBytes(3, ExtraData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSource) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Source);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        if (HasExtraData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ExtraData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobFrom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFrom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFrom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobFrom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobFrom prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BlobFrom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BlobFrom result = new BlobFrom();
      
      protected override BlobFrom MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BlobFrom();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobFrom.Descriptor; }
      }
      
      public override BlobFrom DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobFrom.DefaultInstance; }
      }
      
      public override BlobFrom BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        BlobFrom returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobFrom) {
          return MergeFrom((BlobFrom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobFrom other) {
        if (other == global::bnet.protocol.exchange.BlobFrom.DefaultInstance) return this;
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              Source = input.ReadFixed32();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
            case 26: {
              ExtraData = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasSource {
        get { return result.HasSource; }
      }
      public uint Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(uint value) {
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        result.hasSource = false;
        result.source_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.HasExtraData; }
      }
      public pb::ByteString ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        result.hasExtraData = false;
        result.extraData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobFrom() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  public sealed partial class BlobOfType : pb::GeneratedMessage<BlobOfType, BlobOfType.Builder> {
    private static readonly BlobOfType defaultInstance = new Builder().BuildPartial();
    public static BlobOfType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobOfType DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BlobOfType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobOfType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobOfType, BlobOfType.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int ExtraDataFieldNumber = 3;
    private bool hasExtraData;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public pb::ByteString ExtraData {
      get { return extraData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasType) {
        output.WriteString(1, Type);
      }
      if (HasData) {
        output.WriteBytes(2, Data);
      }
      if (HasExtraData) {
        output.WriteBytes(3, ExtraData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        if (HasExtraData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ExtraData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobOfType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobOfType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobOfType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobOfType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobOfType prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BlobOfType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BlobOfType result = new BlobOfType();
      
      protected override BlobOfType MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BlobOfType();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobOfType.Descriptor; }
      }
      
      public override BlobOfType DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobOfType.DefaultInstance; }
      }
      
      public override BlobOfType BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        BlobOfType returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobOfType) {
          return MergeFrom((BlobOfType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobOfType other) {
        if (other == global::bnet.protocol.exchange.BlobOfType.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Type = input.ReadString();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
            case 26: {
              ExtraData = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
        get { return result.HasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.HasExtraData; }
      }
      public pb::ByteString ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        result.hasExtraData = false;
        result.extraData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobOfType() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  public sealed partial class BlobFromOfType : pb::GeneratedMessage<BlobFromOfType, BlobFromOfType.Builder> {
    private static readonly BlobFromOfType defaultInstance = new Builder().BuildPartial();
    public static BlobFromOfType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobFromOfType DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BlobFromOfType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobFromOfType, BlobFromOfType.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable; }
    }
    
    public const int SourceFieldNumber = 1;
    private bool hasSource;
    private uint source_ = 0;
    public bool HasSource {
      get { return hasSource; }
    }
    public uint Source {
      get { return source_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSource) return false;
        if (!hasType) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSource) {
        output.WriteFixed32(1, Source);
      }
      if (HasType) {
        output.WriteString(2, Type);
      }
      if (HasData) {
        output.WriteBytes(3, Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSource) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Source);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Type);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobFromOfType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobFromOfType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobFromOfType prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<BlobFromOfType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BlobFromOfType result = new BlobFromOfType();
      
      protected override BlobFromOfType MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BlobFromOfType();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobFromOfType.Descriptor; }
      }
      
      public override BlobFromOfType DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobFromOfType.DefaultInstance; }
      }
      
      public override BlobFromOfType BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        BlobFromOfType returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobFromOfType) {
          return MergeFrom((BlobFromOfType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobFromOfType other) {
        if (other == global::bnet.protocol.exchange.BlobFromOfType.DefaultInstance) return this;
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              Source = input.ReadFixed32();
              break;
            }
            case 18: {
              Type = input.ReadString();
              break;
            }
            case 26: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasSource {
        get { return result.HasSource; }
      }
      public uint Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(uint value) {
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        result.hasSource = false;
        result.source_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.HasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobFromOfType() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  #endregion
  
}
