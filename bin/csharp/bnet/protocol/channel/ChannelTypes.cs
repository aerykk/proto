// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.channel {
  
  public static partial class ChannelTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Message, global::bnet.protocol.channel.Message.Builder> internal__static_bnet_protocol_channel_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelDescription, global::bnet.protocol.channel.ChannelDescription.Builder> internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelInfo, global::bnet.protocol.channel.ChannelInfo.Builder> internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoRequest, global::bnet.protocol.channel.GetChannelInfoRequest.Builder> internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoResponse, global::bnet.protocol.channel.GetChannelInfoResponse.Builder> internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdRequest, global::bnet.protocol.channel.GetChannelIdRequest.Builder> internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdResponse, global::bnet.protocol.channel.GetChannelIdResponse.Builder> internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelRequest, global::bnet.protocol.channel.CreateChannelRequest.Builder> internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelResponse, global::bnet.protocol.channel.CreateChannelResponse.Builder> internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelRequest, global::bnet.protocol.channel.JoinChannelRequest.Builder> internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelResponse, global::bnet.protocol.channel.JoinChannelResponse.Builder> internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelRequest, global::bnet.protocol.channel.FindChannelRequest.Builder> internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelResponse, global::bnet.protocol.channel.FindChannelResponse.Builder> internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelState, global::bnet.protocol.channel.ChannelState.Builder> internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_MemberState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.MemberState, global::bnet.protocol.channel.MemberState.Builder> internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_Member__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Member, global::bnet.protocol.channel.Member.Builder> internal__static_bnet_protocol_channel_Member__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ChannelTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiNzZXJ2aWNlL2NoYW5uZWwvY2hhbm5lbF90eXBlcy5wcm90bxIVYm5ldC5w" + 
          "cm90b2NvbC5jaGFubmVsGhxsaWIvcHJvdG9jb2wvYXR0cmlidXRlLnByb3Rv" + 
          "GhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvGh1saWIvcHJvdG9jb2wvaW52" + 
          "aXRhdGlvbi5wcm90byJVCgdNZXNzYWdlEjUKCWF0dHJpYnV0ZRgBIAMoCzIi" + 
          "LmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0ZRIMCgRyb2xlGAIg" + 
          "ASgNKgUIZBCQTiKVAQoSQ2hhbm5lbERlc2NyaXB0aW9uEisKCmNoYW5uZWxf" + 
          "aWQYASACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhcKD2N1cnJlbnRf" + 
          "bWVtYmVycxgCIAEoDRIyCgVzdGF0ZRgDIAEoCzIjLmJuZXQucHJvdG9jb2wu" + 
          "Y2hhbm5lbC5DaGFubmVsU3RhdGUqBQhkEJBOIoMBCgtDaGFubmVsSW5mbxI+" + 
          "CgtkZXNjcmlwdGlvbhgBIAIoCzIpLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5D" + 
          "aGFubmVsRGVzY3JpcHRpb24SLQoGbWVtYmVyGAIgAygLMh0uYm5ldC5wcm90" + 
          "b2NvbC5jaGFubmVsLk1lbWJlcioFCGQQkE4ibwoVR2V0Q2hhbm5lbEluZm9S" + 
          "ZXF1ZXN0EikKCGFnZW50X2lkGAEgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRp" + 
          "dHlJZBIrCgpjaGFubmVsX2lkGAIgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRp" + 
          "dHlJZCJSChZHZXRDaGFubmVsSW5mb1Jlc3BvbnNlEjgKDGNoYW5uZWxfaW5m" + 
          "bxgBIAEoCzIiLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5DaGFubmVsSW5mbyIV" + 
          "ChNHZXRDaGFubmVsSWRSZXF1ZXN0IkMKFEdldENoYW5uZWxJZFJlc3BvbnNl" + 
          "EisKCmNoYW5uZWxfaWQYASABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlk" + 
          "IrsBChRDcmVhdGVDaGFubmVsUmVxdWVzdBIvCg5hZ2VudF9pZGVudGl0eRgB" + 
          "IAEoCzIXLmJuZXQucHJvdG9jb2wuSWRlbnRpdHkSMgoFc3RhdGUYAiABKAsy" + 
          "Iy5ibmV0LnByb3RvY29sLmNoYW5uZWwuQ2hhbm5lbFN0YXRlEisKCmNoYW5u" + 
          "ZWxfaWQYAyABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhEKCW9iamVj" + 
          "dF9pZBgEIAEoBCJXChVDcmVhdGVDaGFubmVsUmVzcG9uc2USEQoJb2JqZWN0" + 
          "X2lkGAEgAigEEisKCmNoYW5uZWxfaWQYAiABKAsyFy5ibmV0LnByb3RvY29s" + 
          "LkVudGl0eUlkIrkBChJKb2luQ2hhbm5lbFJlcXVlc3QSLwoOYWdlbnRfaWRl" + 
          "bnRpdHkYASABKAsyFy5ibmV0LnByb3RvY29sLklkZW50aXR5EisKCmNoYW5u" + 
          "ZWxfaWQYAiACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhEKCW9iamVj" + 
          "dF9pZBgDIAIoBBIyChFmcmllbmRfYWNjb3VudF9pZBgEIAMoCzIXLmJuZXQu" + 
          "cHJvdG9jb2wuRW50aXR5SWQihwEKE0pvaW5DaGFubmVsUmVzcG9uc2USEQoJ" + 
          "b2JqZWN0X2lkGAEgASgEEigKGXJlcXVpcmVfZnJpZW5kX3ZhbGlkYXRpb24Y" + 
          "AiABKAg6BWZhbHNlEjMKEnByaXZpbGVnZWRfYWNjb3VudBgDIAMoCzIXLmJu" + 
          "ZXQucHJvdG9jb2wuRW50aXR5SWQiTgoSRmluZENoYW5uZWxSZXF1ZXN0EjgK" + 
          "BmZpbHRlchgBIAIoCzIoLmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJp" + 
          "YnV0ZUZpbHRlciJRChNGaW5kQ2hhbm5lbFJlc3BvbnNlEjoKB2NoYW5uZWwY" + 
          "ASADKAsyKS5ibmV0LnByb3RvY29sLmNoYW5uZWwuQ2hhbm5lbERlc2NyaXB0" + 
          "aW9uIp4ECgxDaGFubmVsU3RhdGUSEwoLbWF4X21lbWJlcnMYASABKA0SEwoL" + 
          "bWluX21lbWJlcnMYAiABKA0SNQoJYXR0cmlidXRlGAMgAygLMiIuYm5ldC5w" + 
          "cm90b2NvbC5hdHRyaWJ1dGUuQXR0cmlidXRlEjgKCmludml0YXRpb24YBCAD" + 
          "KAsyJC5ibmV0LnByb3RvY29sLmludml0YXRpb24uSW52aXRhdGlvbhIXCg9t" + 
          "YXhfaW52aXRhdGlvbnMYBSABKA0SDgoGcmVhc29uGAYgASgNElsKDXByaXZh" + 
          "Y3lfbGV2ZWwYByABKA4yMC5ibmV0LnByb3RvY29sLmNoYW5uZWwuQ2hhbm5l" + 
          "bFN0YXRlLlByaXZhY3lMZXZlbDoSUFJJVkFDWV9MRVZFTF9PUEVOEg4KBnB1" + 
          "YmxpYxgIIAEoCBIMCgRuYW1lGAkgASgJEhUKDWRlbGVnYXRlX25hbWUYCiAB" + 
          "KAkSHQoMY2hhbm5lbF90eXBlGAsgASgJOgdkZWZhdWx0IpEBCgxQcml2YWN5" + 
          "TGV2ZWwSFgoSUFJJVkFDWV9MRVZFTF9PUEVOEAESLAooUFJJVkFDWV9MRVZF" + 
          "TF9PUEVOX0lOVklUQVRJT05fQU5EX0ZSSUVORBACEiEKHVBSSVZBQ1lfTEVW" + 
          "RUxfT1BFTl9JTlZJVEFUSU9OEAMSGAoUUFJJVkFDWV9MRVZFTF9DTE9TRUQQ" + 
          "BCoFCGQQkE4icAoLTWVtYmVyU3RhdGUSNQoJYXR0cmlidXRlGAEgAygLMiIu" + 
          "Ym5ldC5wcm90b2NvbC5hdHRyaWJ1dGUuQXR0cmlidXRlEgwKBHJvbGUYAiAD" + 
          "KA0SFQoKcHJpdmlsZWdlcxgDIAEoBDoBMCoFCGQQkE4iZgoGTWVtYmVyEikK" + 
          "CGlkZW50aXR5GAEgAigLMhcuYm5ldC5wcm90b2NvbC5JZGVudGl0eRIxCgVz" + 
          "dGF0ZRgCIAIoCzIiLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5NZW1iZXJTdGF0" + 
          "ZQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_channel_Message__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_channel_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Message, global::bnet.protocol.channel.Message.Builder>(internal__static_bnet_protocol_channel_Message__Descriptor,
                new string[] { "Attribute", "Role", });
        internal__static_bnet_protocol_channel_ChannelDescription__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelDescription, global::bnet.protocol.channel.ChannelDescription.Builder>(internal__static_bnet_protocol_channel_ChannelDescription__Descriptor,
                new string[] { "ChannelId", "CurrentMembers", "State", });
        internal__static_bnet_protocol_channel_ChannelInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelInfo, global::bnet.protocol.channel.ChannelInfo.Builder>(internal__static_bnet_protocol_channel_ChannelInfo__Descriptor,
                new string[] { "Description", "Member", });
        internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoRequest, global::bnet.protocol.channel.GetChannelInfoRequest.Builder>(internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor,
                new string[] { "AgentId", "ChannelId", });
        internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoResponse, global::bnet.protocol.channel.GetChannelInfoResponse.Builder>(internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor,
                new string[] { "ChannelInfo", });
        internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdRequest, global::bnet.protocol.channel.GetChannelIdRequest.Builder>(internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdResponse, global::bnet.protocol.channel.GetChannelIdResponse.Builder>(internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor,
                new string[] { "ChannelId", });
        internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelRequest, global::bnet.protocol.channel.CreateChannelRequest.Builder>(internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor,
                new string[] { "AgentIdentity", "State", "ChannelId", "ObjectId", });
        internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelResponse, global::bnet.protocol.channel.CreateChannelResponse.Builder>(internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor,
                new string[] { "ObjectId", "ChannelId", });
        internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelRequest, global::bnet.protocol.channel.JoinChannelRequest.Builder>(internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor,
                new string[] { "AgentIdentity", "ChannelId", "ObjectId", "FriendAccountId", });
        internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelResponse, global::bnet.protocol.channel.JoinChannelResponse.Builder>(internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor,
                new string[] { "ObjectId", "RequireFriendValidation", "PrivilegedAccount", });
        internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelRequest, global::bnet.protocol.channel.FindChannelRequest.Builder>(internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor,
                new string[] { "Filter", });
        internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelResponse, global::bnet.protocol.channel.FindChannelResponse.Builder>(internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor,
                new string[] { "Channel", });
        internal__static_bnet_protocol_channel_ChannelState__Descriptor = Descriptor.MessageTypes[13];
        internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelState, global::bnet.protocol.channel.ChannelState.Builder>(internal__static_bnet_protocol_channel_ChannelState__Descriptor,
                new string[] { "MaxMembers", "MinMembers", "Attribute", "Invitation", "MaxInvitations", "Reason", "PrivacyLevel", "Public", "Name", "DelegateName", "ChannelType", });
        internal__static_bnet_protocol_channel_MemberState__Descriptor = Descriptor.MessageTypes[14];
        internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.MemberState, global::bnet.protocol.channel.MemberState.Builder>(internal__static_bnet_protocol_channel_MemberState__Descriptor,
                new string[] { "Attribute", "Role", "Privileges", });
        internal__static_bnet_protocol_channel_Member__Descriptor = Descriptor.MessageTypes[15];
        internal__static_bnet_protocol_channel_Member__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Member, global::bnet.protocol.channel.Member.Builder>(internal__static_bnet_protocol_channel_Member__Descriptor,
                new string[] { "Identity", "State", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.invitation.Proto.Invitation.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class Message : pb::ExtendableMessage<Message, Message.Builder> {
    private static readonly Message defaultInstance = new Builder().BuildPartial();
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Message__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int RoleFieldNumber = 2;
    private bool hasRole;
    private uint role_ = 0;
    public bool HasRole {
      get { return hasRole; }
    }
    [global::System.CLSCompliant(false)]
    public uint Role {
      get { return role_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      pb::ExtendableMessage<Message, Message.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(1, element);
      }
      if (HasRole) {
        output.WriteUInt32(2, Role);
      }
      extensionWriter.WriteUntil(10000, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (HasRole) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Role);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::ExtendableBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Message result = new Message();
      
      protected override Message MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Message();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::bnet.protocol.channel.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        Message returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::bnet.protocol.channel.Message.DefaultInstance) return this;
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.HasRole) {
          Role = other.Role;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 16: {
              Role = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasRole {
        get { return result.HasRole; }
      }
      [global::System.CLSCompliant(false)]
      public uint Role {
        get { return result.Role; }
        set { SetRole(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRole(uint value) {
        result.hasRole = true;
        result.role_ = value;
        return this;
      }
      public Builder ClearRole() {
        result.hasRole = false;
        result.role_ = 0;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class ChannelDescription : pb::ExtendableMessage<ChannelDescription, ChannelDescription.Builder> {
    private static readonly ChannelDescription defaultInstance = new Builder().BuildPartial();
    public static ChannelDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelDescription DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ChannelDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelDescription, ChannelDescription.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public const int CurrentMembersFieldNumber = 2;
    private bool hasCurrentMembers;
    private uint currentMembers_ = 0;
    public bool HasCurrentMembers {
      get { return hasCurrentMembers; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurrentMembers {
      get { return currentMembers_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private global::bnet.protocol.channel.ChannelState state_ = global::bnet.protocol.channel.ChannelState.DefaultInstance;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.channel.ChannelState State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (!ChannelId.IsInitialized) return false;
        if (HasState) {
          if (!State.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      pb::ExtendableMessage<ChannelDescription, ChannelDescription.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (HasChannelId) {
        output.WriteMessage(1, ChannelId);
      }
      if (HasCurrentMembers) {
        output.WriteUInt32(2, CurrentMembers);
      }
      if (HasState) {
        output.WriteMessage(3, State);
      }
      extensionWriter.WriteUntil(10000, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
        }
        if (HasCurrentMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CurrentMembers);
        }
        if (HasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, State);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelDescription prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ChannelDescription result = new ChannelDescription();
      
      protected override ChannelDescription MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ChannelDescription();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelDescription.Descriptor; }
      }
      
      public override ChannelDescription DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelDescription.DefaultInstance; }
      }
      
      public override ChannelDescription BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ChannelDescription returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelDescription) {
          return MergeFrom((ChannelDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelDescription other) {
        if (other == global::bnet.protocol.channel.ChannelDescription.DefaultInstance) return this;
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasCurrentMembers) {
          CurrentMembers = other.CurrentMembers;
        }
        if (other.HasState) {
          MergeState(other.State);
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              CurrentMembers = input.ReadUInt32();
              break;
            }
            case 26: {
              global::bnet.protocol.channel.ChannelState.Builder subBuilder = global::bnet.protocol.channel.ChannelState.CreateBuilder();
              if (HasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasCurrentMembers {
        get { return result.HasCurrentMembers; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurrentMembers {
        get { return result.CurrentMembers; }
        set { SetCurrentMembers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurrentMembers(uint value) {
        result.hasCurrentMembers = true;
        result.currentMembers_ = value;
        return this;
      }
      public Builder ClearCurrentMembers() {
        result.hasCurrentMembers = false;
        result.currentMembers_ = 0;
        return this;
      }
      
      public bool HasState {
       get { return result.HasState; }
      }
      public global::bnet.protocol.channel.ChannelState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasState &&
            result.state_ != global::bnet.protocol.channel.ChannelState.DefaultInstance) {
            result.state_ = global::bnet.protocol.channel.ChannelState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        result.hasState = false;
        result.state_ = global::bnet.protocol.channel.ChannelState.DefaultInstance;
        return this;
      }
    }
    static ChannelDescription() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class ChannelInfo : pb::ExtendableMessage<ChannelInfo, ChannelInfo.Builder> {
    private static readonly ChannelInfo defaultInstance = new Builder().BuildPartial();
    public static ChannelInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelInfo DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ChannelInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelInfo, ChannelInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable; }
    }
    
    public const int DescriptionFieldNumber = 1;
    private bool hasDescription;
    private global::bnet.protocol.channel.ChannelDescription description_ = global::bnet.protocol.channel.ChannelDescription.DefaultInstance;
    public bool HasDescription {
      get { return hasDescription; }
    }
    public global::bnet.protocol.channel.ChannelDescription Description {
      get { return description_; }
    }
    
    public const int MemberFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.channel.Member> member_ = new pbc::PopsicleList<global::bnet.protocol.channel.Member>();
    public scg::IList<global::bnet.protocol.channel.Member> MemberList {
      get { return member_; }
    }
    public int MemberCount {
      get { return member_.Count; }
    }
    public global::bnet.protocol.channel.Member GetMember(int index) {
      return member_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDescription) return false;
        if (!Description.IsInitialized) return false;
        foreach (global::bnet.protocol.channel.Member element in MemberList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      pb::ExtendableMessage<ChannelInfo, ChannelInfo.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (HasDescription) {
        output.WriteMessage(1, Description);
      }
      foreach (global::bnet.protocol.channel.Member element in MemberList) {
        output.WriteMessage(2, element);
      }
      extensionWriter.WriteUntil(10000, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasDescription) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Description);
        }
        foreach (global::bnet.protocol.channel.Member element in MemberList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelInfo prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ChannelInfo result = new ChannelInfo();
      
      protected override ChannelInfo MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ChannelInfo();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelInfo.Descriptor; }
      }
      
      public override ChannelInfo DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelInfo.DefaultInstance; }
      }
      
      public override ChannelInfo BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.member_.MakeReadOnly();
        ChannelInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelInfo) {
          return MergeFrom((ChannelInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelInfo other) {
        if (other == global::bnet.protocol.channel.ChannelInfo.DefaultInstance) return this;
        if (other.HasDescription) {
          MergeDescription(other.Description);
        }
        if (other.member_.Count != 0) {
          base.AddRange(other.member_, result.member_);
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelDescription.Builder subBuilder = global::bnet.protocol.channel.ChannelDescription.CreateBuilder();
              if (HasDescription) {
                subBuilder.MergeFrom(Description);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Description = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.Member.Builder subBuilder = global::bnet.protocol.channel.Member.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddMember(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasDescription {
       get { return result.HasDescription; }
      }
      public global::bnet.protocol.channel.ChannelDescription Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder SetDescription(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDescription = true;
        result.description_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDescription &&
            result.description_ != global::bnet.protocol.channel.ChannelDescription.DefaultInstance) {
            result.description_ = global::bnet.protocol.channel.ChannelDescription.CreateBuilder(result.description_).MergeFrom(value).BuildPartial();
        } else {
          result.description_ = value;
        }
        result.hasDescription = true;
        return this;
      }
      public Builder ClearDescription() {
        result.hasDescription = false;
        result.description_ = global::bnet.protocol.channel.ChannelDescription.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.channel.Member> MemberList {
        get { return result.member_; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
      }
      public global::bnet.protocol.channel.Member GetMember(int index) {
        return result.GetMember(index);
      }
      public Builder SetMember(int index, global::bnet.protocol.channel.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.member_[index] = value;
        return this;
      }
      public Builder SetMember(int index, global::bnet.protocol.channel.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.member_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMember(global::bnet.protocol.channel.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.member_.Add(value);
        return this;
      }
      public Builder AddMember(global::bnet.protocol.channel.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.member_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMember(scg::IEnumerable<global::bnet.protocol.channel.Member> values) {
        base.AddRange(values, result.member_);
        return this;
      }
      public Builder ClearMember() {
        result.member_.Clear();
        return this;
      }
    }
    static ChannelInfo() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GetChannelInfoRequest : pb::GeneratedMessage<GetChannelInfoRequest, GetChannelInfoRequest.Builder> {
    private static readonly GetChannelInfoRequest defaultInstance = new Builder().BuildPartial();
    public static GetChannelInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelInfoRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetChannelInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelInfoRequest, GetChannelInfoRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdFieldNumber = 1;
    private bool hasAgentId;
    private global::bnet.protocol.EntityId agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bnet.protocol.EntityId AgentId {
      get { return agentId_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        if (!ChannelId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAgentId) {
        output.WriteMessage(1, AgentId);
      }
      if (HasChannelId) {
        output.WriteMessage(2, ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentId);
        }
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelInfoRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetChannelInfoRequest result = new GetChannelInfoRequest();
      
      protected override GetChannelInfoRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetChannelInfoRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelInfoRequest.Descriptor; }
      }
      
      public override GetChannelInfoRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelInfoRequest.DefaultInstance; }
      }
      
      public override GetChannelInfoRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GetChannelInfoRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelInfoRequest) {
          return MergeFrom((GetChannelInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelInfoRequest other) {
        if (other == global::bnet.protocol.channel.GetChannelInfoRequest.DefaultInstance) return this;
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasAgentId {
       get { return result.HasAgentId; }
      }
      public global::bnet.protocol.EntityId AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentId &&
            result.agentId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.agentId_ = global::bnet.protocol.EntityId.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        result.hasAgentId = false;
        result.agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
    }
    static GetChannelInfoRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GetChannelInfoResponse : pb::GeneratedMessage<GetChannelInfoResponse, GetChannelInfoResponse.Builder> {
    private static readonly GetChannelInfoResponse defaultInstance = new Builder().BuildPartial();
    public static GetChannelInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelInfoResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetChannelInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelInfoResponse, GetChannelInfoResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable; }
    }
    
    public const int ChannelInfoFieldNumber = 1;
    private bool hasChannelInfo;
    private global::bnet.protocol.channel.ChannelInfo channelInfo_ = global::bnet.protocol.channel.ChannelInfo.DefaultInstance;
    public bool HasChannelInfo {
      get { return hasChannelInfo; }
    }
    public global::bnet.protocol.channel.ChannelInfo ChannelInfo {
      get { return channelInfo_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasChannelInfo) {
          if (!ChannelInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasChannelInfo) {
        output.WriteMessage(1, ChannelInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasChannelInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelInfoResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetChannelInfoResponse result = new GetChannelInfoResponse();
      
      protected override GetChannelInfoResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetChannelInfoResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelInfoResponse.Descriptor; }
      }
      
      public override GetChannelInfoResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance; }
      }
      
      public override GetChannelInfoResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GetChannelInfoResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelInfoResponse) {
          return MergeFrom((GetChannelInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelInfoResponse other) {
        if (other == global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance) return this;
        if (other.HasChannelInfo) {
          MergeChannelInfo(other.ChannelInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelInfo.Builder subBuilder = global::bnet.protocol.channel.ChannelInfo.CreateBuilder();
              if (HasChannelInfo) {
                subBuilder.MergeFrom(ChannelInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasChannelInfo {
       get { return result.HasChannelInfo; }
      }
      public global::bnet.protocol.channel.ChannelInfo ChannelInfo {
        get { return result.ChannelInfo; }
        set { SetChannelInfo(value); }
      }
      public Builder SetChannelInfo(global::bnet.protocol.channel.ChannelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelInfo = true;
        result.channelInfo_ = value;
        return this;
      }
      public Builder SetChannelInfo(global::bnet.protocol.channel.ChannelInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelInfo = true;
        result.channelInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelInfo(global::bnet.protocol.channel.ChannelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelInfo &&
            result.channelInfo_ != global::bnet.protocol.channel.ChannelInfo.DefaultInstance) {
            result.channelInfo_ = global::bnet.protocol.channel.ChannelInfo.CreateBuilder(result.channelInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.channelInfo_ = value;
        }
        result.hasChannelInfo = true;
        return this;
      }
      public Builder ClearChannelInfo() {
        result.hasChannelInfo = false;
        result.channelInfo_ = global::bnet.protocol.channel.ChannelInfo.DefaultInstance;
        return this;
      }
    }
    static GetChannelInfoResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GetChannelIdRequest : pb::GeneratedMessage<GetChannelIdRequest, GetChannelIdRequest.Builder> {
    private static readonly GetChannelIdRequest defaultInstance = new Builder().BuildPartial();
    public static GetChannelIdRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelIdRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetChannelIdRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelIdRequest, GetChannelIdRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelIdRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelIdRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelIdRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelIdRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetChannelIdRequest result = new GetChannelIdRequest();
      
      protected override GetChannelIdRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetChannelIdRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelIdRequest.Descriptor; }
      }
      
      public override GetChannelIdRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelIdRequest.DefaultInstance; }
      }
      
      public override GetChannelIdRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GetChannelIdRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelIdRequest) {
          return MergeFrom((GetChannelIdRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelIdRequest other) {
        if (other == global::bnet.protocol.channel.GetChannelIdRequest.DefaultInstance) return this;
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
          }
        }
      }
      
    }
    static GetChannelIdRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class GetChannelIdResponse : pb::GeneratedMessage<GetChannelIdResponse, GetChannelIdResponse.Builder> {
    private static readonly GetChannelIdResponse defaultInstance = new Builder().BuildPartial();
    public static GetChannelIdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelIdResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GetChannelIdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelIdResponse, GetChannelIdResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasChannelId) {
        output.WriteMessage(1, ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelIdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelIdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelIdResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelIdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GetChannelIdResponse result = new GetChannelIdResponse();
      
      protected override GetChannelIdResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GetChannelIdResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelIdResponse.Descriptor; }
      }
      
      public override GetChannelIdResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance; }
      }
      
      public override GetChannelIdResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GetChannelIdResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelIdResponse) {
          return MergeFrom((GetChannelIdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelIdResponse other) {
        if (other == global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance) return this;
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
    }
    static GetChannelIdResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class CreateChannelRequest : pb::GeneratedMessage<CreateChannelRequest, CreateChannelRequest.Builder> {
    private static readonly CreateChannelRequest defaultInstance = new Builder().BuildPartial();
    public static CreateChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChannelRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CreateChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChannelRequest, CreateChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::bnet.protocol.Identity agentIdentity_ = global::bnet.protocol.Identity.DefaultInstance;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::bnet.protocol.Identity AgentIdentity {
      get { return agentIdentity_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private global::bnet.protocol.channel.ChannelState state_ = global::bnet.protocol.channel.ChannelState.DefaultInstance;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.channel.ChannelState State {
      get { return state_; }
    }
    
    public const int ChannelIdFieldNumber = 3;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public const int ObjectIdFieldNumber = 4;
    private bool hasObjectId;
    private ulong objectId_ = 0UL;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAgentIdentity) {
          if (!AgentIdentity.IsInitialized) return false;
        }
        if (HasState) {
          if (!State.IsInitialized) return false;
        }
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAgentIdentity) {
        output.WriteMessage(1, AgentIdentity);
      }
      if (HasState) {
        output.WriteMessage(2, State);
      }
      if (HasChannelId) {
        output.WriteMessage(3, ChannelId);
      }
      if (HasObjectId) {
        output.WriteUInt64(4, ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAgentIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
        }
        if (HasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, State);
        }
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ChannelId);
        }
        if (HasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChannelRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CreateChannelRequest result = new CreateChannelRequest();
      
      protected override CreateChannelRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CreateChannelRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.CreateChannelRequest.Descriptor; }
      }
      
      public override CreateChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.CreateChannelRequest.DefaultInstance; }
      }
      
      public override CreateChannelRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CreateChannelRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChannelRequest) {
          return MergeFrom((CreateChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChannelRequest other) {
        if (other == global::bnet.protocol.channel.CreateChannelRequest.DefaultInstance) return this;
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (HasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.ChannelState.Builder subBuilder = global::bnet.protocol.channel.ChannelState.CreateBuilder();
              if (HasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              ObjectId = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasAgentIdentity {
       get { return result.HasAgentIdentity; }
      }
      public global::bnet.protocol.Identity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentIdentity &&
            result.agentIdentity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.agentIdentity_ = global::bnet.protocol.Identity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        result.hasAgentIdentity = false;
        result.agentIdentity_ = global::bnet.protocol.Identity.DefaultInstance;
        return this;
      }
      
      public bool HasState {
       get { return result.HasState; }
      }
      public global::bnet.protocol.channel.ChannelState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasState &&
            result.state_ != global::bnet.protocol.channel.ChannelState.DefaultInstance) {
            result.state_ = global::bnet.protocol.channel.ChannelState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        result.hasState = false;
        result.state_ = global::bnet.protocol.channel.ChannelState.DefaultInstance;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.HasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(ulong value) {
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
    }
    static CreateChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class CreateChannelResponse : pb::GeneratedMessage<CreateChannelResponse, CreateChannelResponse.Builder> {
    private static readonly CreateChannelResponse defaultInstance = new Builder().BuildPartial();
    public static CreateChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChannelResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CreateChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChannelResponse, CreateChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable; }
    }
    
    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private ulong objectId_ = 0UL;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectId) return false;
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasObjectId) {
        output.WriteUInt64(1, ObjectId);
      }
      if (HasChannelId) {
        output.WriteMessage(2, ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ObjectId);
        }
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChannelResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CreateChannelResponse result = new CreateChannelResponse();
      
      protected override CreateChannelResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CreateChannelResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.CreateChannelResponse.Descriptor; }
      }
      
      public override CreateChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance; }
      }
      
      public override CreateChannelResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CreateChannelResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChannelResponse) {
          return MergeFrom((CreateChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChannelResponse other) {
        if (other == global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance) return this;
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ObjectId = input.ReadUInt64();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasObjectId {
        get { return result.HasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(ulong value) {
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
    }
    static CreateChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class JoinChannelRequest : pb::GeneratedMessage<JoinChannelRequest, JoinChannelRequest.Builder> {
    private static readonly JoinChannelRequest defaultInstance = new Builder().BuildPartial();
    public static JoinChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinChannelRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinChannelRequest, JoinChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::bnet.protocol.Identity agentIdentity_ = global::bnet.protocol.Identity.DefaultInstance;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::bnet.protocol.Identity AgentIdentity {
      get { return agentIdentity_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_; }
    }
    
    public const int ObjectIdFieldNumber = 3;
    private bool hasObjectId;
    private ulong objectId_ = 0UL;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int FriendAccountIdFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.EntityId> friendAccountId_ = new pbc::PopsicleList<global::bnet.protocol.EntityId>();
    public scg::IList<global::bnet.protocol.EntityId> FriendAccountIdList {
      get { return friendAccountId_; }
    }
    public int FriendAccountIdCount {
      get { return friendAccountId_.Count; }
    }
    public global::bnet.protocol.EntityId GetFriendAccountId(int index) {
      return friendAccountId_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (!hasObjectId) return false;
        if (HasAgentIdentity) {
          if (!AgentIdentity.IsInitialized) return false;
        }
        if (!ChannelId.IsInitialized) return false;
        foreach (global::bnet.protocol.EntityId element in FriendAccountIdList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAgentIdentity) {
        output.WriteMessage(1, AgentIdentity);
      }
      if (HasChannelId) {
        output.WriteMessage(2, ChannelId);
      }
      if (HasObjectId) {
        output.WriteUInt64(3, ObjectId);
      }
      foreach (global::bnet.protocol.EntityId element in FriendAccountIdList) {
        output.WriteMessage(4, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAgentIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
        }
        if (HasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
        }
        if (HasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, ObjectId);
        }
        foreach (global::bnet.protocol.EntityId element in FriendAccountIdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinChannelRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinChannelRequest result = new JoinChannelRequest();
      
      protected override JoinChannelRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinChannelRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.JoinChannelRequest.Descriptor; }
      }
      
      public override JoinChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.JoinChannelRequest.DefaultInstance; }
      }
      
      public override JoinChannelRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.friendAccountId_.MakeReadOnly();
        JoinChannelRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinChannelRequest) {
          return MergeFrom((JoinChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinChannelRequest other) {
        if (other == global::bnet.protocol.channel.JoinChannelRequest.DefaultInstance) return this;
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.friendAccountId_.Count != 0) {
          base.AddRange(other.friendAccountId_, result.friendAccountId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (HasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              ObjectId = input.ReadUInt64();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddFriendAccountId(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasAgentIdentity {
       get { return result.HasAgentIdentity; }
      }
      public global::bnet.protocol.Identity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentIdentity &&
            result.agentIdentity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.agentIdentity_ = global::bnet.protocol.Identity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        result.hasAgentIdentity = false;
        result.agentIdentity_ = global::bnet.protocol.Identity.DefaultInstance;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.HasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        result.hasChannelId = false;
        result.channelId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.HasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(ulong value) {
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.EntityId> FriendAccountIdList {
        get { return result.friendAccountId_; }
      }
      public int FriendAccountIdCount {
        get { return result.FriendAccountIdCount; }
      }
      public global::bnet.protocol.EntityId GetFriendAccountId(int index) {
        return result.GetFriendAccountId(index);
      }
      public Builder SetFriendAccountId(int index, global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.friendAccountId_[index] = value;
        return this;
      }
      public Builder SetFriendAccountId(int index, global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.friendAccountId_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriendAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.friendAccountId_.Add(value);
        return this;
      }
      public Builder AddFriendAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.friendAccountId_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriendAccountId(scg::IEnumerable<global::bnet.protocol.EntityId> values) {
        base.AddRange(values, result.friendAccountId_);
        return this;
      }
      public Builder ClearFriendAccountId() {
        result.friendAccountId_.Clear();
        return this;
      }
    }
    static JoinChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class JoinChannelResponse : pb::GeneratedMessage<JoinChannelResponse, JoinChannelResponse.Builder> {
    private static readonly JoinChannelResponse defaultInstance = new Builder().BuildPartial();
    public static JoinChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinChannelResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinChannelResponse, JoinChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable; }
    }
    
    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private ulong objectId_ = 0UL;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int RequireFriendValidationFieldNumber = 2;
    private bool hasRequireFriendValidation;
    private bool requireFriendValidation_ = false;
    public bool HasRequireFriendValidation {
      get { return hasRequireFriendValidation; }
    }
    public bool RequireFriendValidation {
      get { return requireFriendValidation_; }
    }
    
    public const int PrivilegedAccountFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.EntityId> privilegedAccount_ = new pbc::PopsicleList<global::bnet.protocol.EntityId>();
    public scg::IList<global::bnet.protocol.EntityId> PrivilegedAccountList {
      get { return privilegedAccount_; }
    }
    public int PrivilegedAccountCount {
      get { return privilegedAccount_.Count; }
    }
    public global::bnet.protocol.EntityId GetPrivilegedAccount(int index) {
      return privilegedAccount_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.EntityId element in PrivilegedAccountList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasObjectId) {
        output.WriteUInt64(1, ObjectId);
      }
      if (HasRequireFriendValidation) {
        output.WriteBool(2, RequireFriendValidation);
      }
      foreach (global::bnet.protocol.EntityId element in PrivilegedAccountList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ObjectId);
        }
        if (HasRequireFriendValidation) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, RequireFriendValidation);
        }
        foreach (global::bnet.protocol.EntityId element in PrivilegedAccountList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinChannelResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinChannelResponse result = new JoinChannelResponse();
      
      protected override JoinChannelResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinChannelResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.JoinChannelResponse.Descriptor; }
      }
      
      public override JoinChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance; }
      }
      
      public override JoinChannelResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.privilegedAccount_.MakeReadOnly();
        JoinChannelResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinChannelResponse) {
          return MergeFrom((JoinChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinChannelResponse other) {
        if (other == global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance) return this;
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasRequireFriendValidation) {
          RequireFriendValidation = other.RequireFriendValidation;
        }
        if (other.privilegedAccount_.Count != 0) {
          base.AddRange(other.privilegedAccount_, result.privilegedAccount_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ObjectId = input.ReadUInt64();
              break;
            }
            case 16: {
              RequireFriendValidation = input.ReadBool();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPrivilegedAccount(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasObjectId {
        get { return result.HasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(ulong value) {
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasRequireFriendValidation {
        get { return result.HasRequireFriendValidation; }
      }
      public bool RequireFriendValidation {
        get { return result.RequireFriendValidation; }
        set { SetRequireFriendValidation(value); }
      }
      public Builder SetRequireFriendValidation(bool value) {
        result.hasRequireFriendValidation = true;
        result.requireFriendValidation_ = value;
        return this;
      }
      public Builder ClearRequireFriendValidation() {
        result.hasRequireFriendValidation = false;
        result.requireFriendValidation_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.EntityId> PrivilegedAccountList {
        get { return result.privilegedAccount_; }
      }
      public int PrivilegedAccountCount {
        get { return result.PrivilegedAccountCount; }
      }
      public global::bnet.protocol.EntityId GetPrivilegedAccount(int index) {
        return result.GetPrivilegedAccount(index);
      }
      public Builder SetPrivilegedAccount(int index, global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.privilegedAccount_[index] = value;
        return this;
      }
      public Builder SetPrivilegedAccount(int index, global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.privilegedAccount_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPrivilegedAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.privilegedAccount_.Add(value);
        return this;
      }
      public Builder AddPrivilegedAccount(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.privilegedAccount_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePrivilegedAccount(scg::IEnumerable<global::bnet.protocol.EntityId> values) {
        base.AddRange(values, result.privilegedAccount_);
        return this;
      }
      public Builder ClearPrivilegedAccount() {
        result.privilegedAccount_.Clear();
        return this;
      }
    }
    static JoinChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class FindChannelRequest : pb::GeneratedMessage<FindChannelRequest, FindChannelRequest.Builder> {
    private static readonly FindChannelRequest defaultInstance = new Builder().BuildPartial();
    public static FindChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindChannelRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FindChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindChannelRequest, FindChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable; }
    }
    
    public const int FilterFieldNumber = 1;
    private bool hasFilter;
    private global::bnet.protocol.attribute.AttributeFilter filter_ = global::bnet.protocol.attribute.AttributeFilter.DefaultInstance;
    public bool HasFilter {
      get { return hasFilter; }
    }
    public global::bnet.protocol.attribute.AttributeFilter Filter {
      get { return filter_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilter) return false;
        if (!Filter.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFilter) {
        output.WriteMessage(1, Filter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFilter) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Filter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindChannelRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FindChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FindChannelRequest result = new FindChannelRequest();
      
      protected override FindChannelRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FindChannelRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.FindChannelRequest.Descriptor; }
      }
      
      public override FindChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.FindChannelRequest.DefaultInstance; }
      }
      
      public override FindChannelRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        FindChannelRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindChannelRequest) {
          return MergeFrom((FindChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindChannelRequest other) {
        if (other == global::bnet.protocol.channel.FindChannelRequest.DefaultInstance) return this;
        if (other.HasFilter) {
          MergeFilter(other.Filter);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.AttributeFilter.Builder subBuilder = global::bnet.protocol.attribute.AttributeFilter.CreateBuilder();
              if (HasFilter) {
                subBuilder.MergeFrom(Filter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Filter = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasFilter {
       get { return result.HasFilter; }
      }
      public global::bnet.protocol.attribute.AttributeFilter Filter {
        get { return result.Filter; }
        set { SetFilter(value); }
      }
      public Builder SetFilter(global::bnet.protocol.attribute.AttributeFilter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFilter = true;
        result.filter_ = value;
        return this;
      }
      public Builder SetFilter(global::bnet.protocol.attribute.AttributeFilter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasFilter = true;
        result.filter_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFilter(global::bnet.protocol.attribute.AttributeFilter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasFilter &&
            result.filter_ != global::bnet.protocol.attribute.AttributeFilter.DefaultInstance) {
            result.filter_ = global::bnet.protocol.attribute.AttributeFilter.CreateBuilder(result.filter_).MergeFrom(value).BuildPartial();
        } else {
          result.filter_ = value;
        }
        result.hasFilter = true;
        return this;
      }
      public Builder ClearFilter() {
        result.hasFilter = false;
        result.filter_ = global::bnet.protocol.attribute.AttributeFilter.DefaultInstance;
        return this;
      }
    }
    static FindChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class FindChannelResponse : pb::GeneratedMessage<FindChannelResponse, FindChannelResponse.Builder> {
    private static readonly FindChannelResponse defaultInstance = new Builder().BuildPartial();
    public static FindChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindChannelResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override FindChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindChannelResponse, FindChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable; }
    }
    
    public const int ChannelFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.channel.ChannelDescription> channel_ = new pbc::PopsicleList<global::bnet.protocol.channel.ChannelDescription>();
    public scg::IList<global::bnet.protocol.channel.ChannelDescription> ChannelList {
      get { return channel_; }
    }
    public int ChannelCount {
      get { return channel_.Count; }
    }
    public global::bnet.protocol.channel.ChannelDescription GetChannel(int index) {
      return channel_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.channel.ChannelDescription element in ChannelList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::bnet.protocol.channel.ChannelDescription element in ChannelList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.channel.ChannelDescription element in ChannelList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindChannelResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<FindChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      FindChannelResponse result = new FindChannelResponse();
      
      protected override FindChannelResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new FindChannelResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.FindChannelResponse.Descriptor; }
      }
      
      public override FindChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.FindChannelResponse.DefaultInstance; }
      }
      
      public override FindChannelResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.channel_.MakeReadOnly();
        FindChannelResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindChannelResponse) {
          return MergeFrom((FindChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindChannelResponse other) {
        if (other == global::bnet.protocol.channel.FindChannelResponse.DefaultInstance) return this;
        if (other.channel_.Count != 0) {
          base.AddRange(other.channel_, result.channel_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelDescription.Builder subBuilder = global::bnet.protocol.channel.ChannelDescription.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddChannel(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.channel.ChannelDescription> ChannelList {
        get { return result.channel_; }
      }
      public int ChannelCount {
        get { return result.ChannelCount; }
      }
      public global::bnet.protocol.channel.ChannelDescription GetChannel(int index) {
        return result.GetChannel(index);
      }
      public Builder SetChannel(int index, global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.channel_[index] = value;
        return this;
      }
      public Builder SetChannel(int index, global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.channel_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChannel(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.channel_.Add(value);
        return this;
      }
      public Builder AddChannel(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.channel_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChannel(scg::IEnumerable<global::bnet.protocol.channel.ChannelDescription> values) {
        base.AddRange(values, result.channel_);
        return this;
      }
      public Builder ClearChannel() {
        result.channel_.Clear();
        return this;
      }
    }
    static FindChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class ChannelState : pb::ExtendableMessage<ChannelState, ChannelState.Builder> {
    private static readonly ChannelState defaultInstance = new Builder().BuildPartial();
    public static ChannelState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelState DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ChannelState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelState, ChannelState.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum PrivacyLevel {
        PRIVACY_LEVEL_OPEN = 1,
        PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = 2,
        PRIVACY_LEVEL_OPEN_INVITATION = 3,
        PRIVACY_LEVEL_CLOSED = 4,
      }
      
    }
    #endregion
    
    public const int MaxMembersFieldNumber = 1;
    private bool hasMaxMembers;
    private uint maxMembers_ = 0;
    public bool HasMaxMembers {
      get { return hasMaxMembers; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxMembers {
      get { return maxMembers_; }
    }
    
    public const int MinMembersFieldNumber = 2;
    private bool hasMinMembers;
    private uint minMembers_ = 0;
    public bool HasMinMembers {
      get { return hasMinMembers; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinMembers {
      get { return minMembers_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int InvitationFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.invitation.Invitation> invitation_ = new pbc::PopsicleList<global::bnet.protocol.invitation.Invitation>();
    public scg::IList<global::bnet.protocol.invitation.Invitation> InvitationList {
      get { return invitation_; }
    }
    public int InvitationCount {
      get { return invitation_.Count; }
    }
    public global::bnet.protocol.invitation.Invitation GetInvitation(int index) {
      return invitation_[index];
    }
    
    public const int MaxInvitationsFieldNumber = 5;
    private bool hasMaxInvitations;
    private uint maxInvitations_ = 0;
    public bool HasMaxInvitations {
      get { return hasMaxInvitations; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxInvitations {
      get { return maxInvitations_; }
    }
    
    public const int ReasonFieldNumber = 6;
    private bool hasReason;
    private uint reason_ = 0;
    public bool HasReason {
      get { return hasReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint Reason {
      get { return reason_; }
    }
    
    public const int PrivacyLevelFieldNumber = 7;
    private bool hasPrivacyLevel;
    private global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel privacyLevel_ = global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel.PRIVACY_LEVEL_OPEN;
    public bool HasPrivacyLevel {
      get { return hasPrivacyLevel; }
    }
    public global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel PrivacyLevel {
      get { return privacyLevel_; }
    }
    
    public const int PublicFieldNumber = 8;
    private bool hasPublic;
    private bool public_ = false;
    public bool HasPublic {
      get { return hasPublic; }
    }
    public bool Public {
      get { return public_; }
    }
    
    public const int NameFieldNumber = 9;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DelegateNameFieldNumber = 10;
    private bool hasDelegateName;
    private string delegateName_ = "";
    public bool HasDelegateName {
      get { return hasDelegateName; }
    }
    public string DelegateName {
      get { return delegateName_; }
    }
    
    public const int ChannelTypeFieldNumber = 11;
    private bool hasChannelType;
    private string channelType_ = "default";
    public bool HasChannelType {
      get { return hasChannelType; }
    }
    public string ChannelType {
      get { return channelType_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.invitation.Invitation element in InvitationList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      pb::ExtendableMessage<ChannelState, ChannelState.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (HasMaxMembers) {
        output.WriteUInt32(1, MaxMembers);
      }
      if (HasMinMembers) {
        output.WriteUInt32(2, MinMembers);
      }
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(3, element);
      }
      foreach (global::bnet.protocol.invitation.Invitation element in InvitationList) {
        output.WriteMessage(4, element);
      }
      if (HasMaxInvitations) {
        output.WriteUInt32(5, MaxInvitations);
      }
      if (HasReason) {
        output.WriteUInt32(6, Reason);
      }
      if (HasPrivacyLevel) {
        output.WriteEnum(7, (int) PrivacyLevel);
      }
      if (HasPublic) {
        output.WriteBool(8, Public);
      }
      if (HasName) {
        output.WriteString(9, Name);
      }
      if (HasDelegateName) {
        output.WriteString(10, DelegateName);
      }
      if (HasChannelType) {
        output.WriteString(11, ChannelType);
      }
      extensionWriter.WriteUntil(10000, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasMaxMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxMembers);
        }
        if (HasMinMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MinMembers);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.invitation.Invitation element in InvitationList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (HasMaxInvitations) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, MaxInvitations);
        }
        if (HasReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Reason);
        }
        if (HasPrivacyLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) PrivacyLevel);
        }
        if (HasPublic) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Public);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Name);
        }
        if (HasDelegateName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, DelegateName);
        }
        if (HasChannelType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ChannelType);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelState prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ChannelState result = new ChannelState();
      
      protected override ChannelState MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ChannelState();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelState.Descriptor; }
      }
      
      public override ChannelState DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelState.DefaultInstance; }
      }
      
      public override ChannelState BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        result.invitation_.MakeReadOnly();
        ChannelState returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelState) {
          return MergeFrom((ChannelState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelState other) {
        if (other == global::bnet.protocol.channel.ChannelState.DefaultInstance) return this;
        if (other.HasMaxMembers) {
          MaxMembers = other.MaxMembers;
        }
        if (other.HasMinMembers) {
          MinMembers = other.MinMembers;
        }
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.invitation_.Count != 0) {
          base.AddRange(other.invitation_, result.invitation_);
        }
        if (other.HasMaxInvitations) {
          MaxInvitations = other.MaxInvitations;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasPrivacyLevel) {
          PrivacyLevel = other.PrivacyLevel;
        }
        if (other.HasPublic) {
          Public = other.Public;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDelegateName) {
          DelegateName = other.DelegateName;
        }
        if (other.HasChannelType) {
          ChannelType = other.ChannelType;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              MaxMembers = input.ReadUInt32();
              break;
            }
            case 16: {
              MinMembers = input.ReadUInt32();
              break;
            }
            case 26: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 34: {
              global::bnet.protocol.invitation.Invitation.Builder subBuilder = global::bnet.protocol.invitation.Invitation.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddInvitation(subBuilder.BuildPartial());
              break;
            }
            case 40: {
              MaxInvitations = input.ReadUInt32();
              break;
            }
            case 48: {
              Reason = input.ReadUInt32();
              break;
            }
            case 56: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong) rawValue);
              } else {
                PrivacyLevel = (global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel) rawValue;
              }
              break;
            }
            case 64: {
              Public = input.ReadBool();
              break;
            }
            case 74: {
              Name = input.ReadString();
              break;
            }
            case 82: {
              DelegateName = input.ReadString();
              break;
            }
            case 90: {
              ChannelType = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasMaxMembers {
        get { return result.HasMaxMembers; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxMembers {
        get { return result.MaxMembers; }
        set { SetMaxMembers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxMembers(uint value) {
        result.hasMaxMembers = true;
        result.maxMembers_ = value;
        return this;
      }
      public Builder ClearMaxMembers() {
        result.hasMaxMembers = false;
        result.maxMembers_ = 0;
        return this;
      }
      
      public bool HasMinMembers {
        get { return result.HasMinMembers; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinMembers {
        get { return result.MinMembers; }
        set { SetMinMembers(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinMembers(uint value) {
        result.hasMinMembers = true;
        result.minMembers_ = value;
        return this;
      }
      public Builder ClearMinMembers() {
        result.hasMinMembers = false;
        result.minMembers_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.invitation.Invitation> InvitationList {
        get { return result.invitation_; }
      }
      public int InvitationCount {
        get { return result.InvitationCount; }
      }
      public global::bnet.protocol.invitation.Invitation GetInvitation(int index) {
        return result.GetInvitation(index);
      }
      public Builder SetInvitation(int index, global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.invitation_[index] = value;
        return this;
      }
      public Builder SetInvitation(int index, global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.invitation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInvitation(global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.invitation_.Add(value);
        return this;
      }
      public Builder AddInvitation(global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.invitation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInvitation(scg::IEnumerable<global::bnet.protocol.invitation.Invitation> values) {
        base.AddRange(values, result.invitation_);
        return this;
      }
      public Builder ClearInvitation() {
        result.invitation_.Clear();
        return this;
      }
      
      public bool HasMaxInvitations {
        get { return result.HasMaxInvitations; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxInvitations {
        get { return result.MaxInvitations; }
        set { SetMaxInvitations(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxInvitations(uint value) {
        result.hasMaxInvitations = true;
        result.maxInvitations_ = value;
        return this;
      }
      public Builder ClearMaxInvitations() {
        result.hasMaxInvitations = false;
        result.maxInvitations_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.HasReason; }
      }
      [global::System.CLSCompliant(false)]
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetReason(uint value) {
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasPrivacyLevel {
       get { return result.HasPrivacyLevel; }
      }
      public global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel PrivacyLevel {
        get { return result.PrivacyLevel; }
        set { SetPrivacyLevel(value); }
      }
      public Builder SetPrivacyLevel(global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel value) {
        result.hasPrivacyLevel = true;
        result.privacyLevel_ = value;
        return this;
      }
      public Builder ClearPrivacyLevel() {
        result.hasPrivacyLevel = false;
        result.privacyLevel_ = global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel.PRIVACY_LEVEL_OPEN;
        return this;
      }
      
      public bool HasPublic {
        get { return result.HasPublic; }
      }
      public bool Public {
        get { return result.Public; }
        set { SetPublic(value); }
      }
      public Builder SetPublic(bool value) {
        result.hasPublic = true;
        result.public_ = value;
        return this;
      }
      public Builder ClearPublic() {
        result.hasPublic = false;
        result.public_ = false;
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDelegateName {
        get { return result.HasDelegateName; }
      }
      public string DelegateName {
        get { return result.DelegateName; }
        set { SetDelegateName(value); }
      }
      public Builder SetDelegateName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDelegateName = true;
        result.delegateName_ = value;
        return this;
      }
      public Builder ClearDelegateName() {
        result.hasDelegateName = false;
        result.delegateName_ = "";
        return this;
      }
      
      public bool HasChannelType {
        get { return result.HasChannelType; }
      }
      public string ChannelType {
        get { return result.ChannelType; }
        set { SetChannelType(value); }
      }
      public Builder SetChannelType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasChannelType = true;
        result.channelType_ = value;
        return this;
      }
      public Builder ClearChannelType() {
        result.hasChannelType = false;
        result.channelType_ = "default";
        return this;
      }
    }
    static ChannelState() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class MemberState : pb::ExtendableMessage<MemberState, MemberState.Builder> {
    private static readonly MemberState defaultInstance = new Builder().BuildPartial();
    public static MemberState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MemberState DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MemberState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_MemberState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MemberState, MemberState.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int RoleFieldNumber = 2;
    private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RoleList {
      get { return pbc::Lists.AsReadOnly(role_); }
    }
    public int RoleCount {
      get { return role_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRole(int index) {
      return role_[index];
    }
    
    public const int PrivilegesFieldNumber = 3;
    private bool hasPrivileges;
    private ulong privileges_ = 0UL;
    public bool HasPrivileges {
      get { return hasPrivileges; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Privileges {
      get { return privileges_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      pb::ExtendableMessage<MemberState, MemberState.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(1, element);
      }
      if (role_.Count > 0) {
        foreach (uint element in role_) {
          output.WriteUInt32(2, element);
        }
      }
      if (HasPrivileges) {
        output.WriteUInt64(3, Privileges);
      }
      extensionWriter.WriteUntil(10000, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (uint element in RoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * role_.Count;
        }
        if (HasPrivileges) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Privileges);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MemberState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MemberState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MemberState ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberState ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MemberState prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::ExtendableBuilder<MemberState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MemberState result = new MemberState();
      
      protected override MemberState MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MemberState();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.MemberState.Descriptor; }
      }
      
      public override MemberState DefaultInstanceForType {
        get { return global::bnet.protocol.channel.MemberState.DefaultInstance; }
      }
      
      public override MemberState BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        result.role_.MakeReadOnly();
        MemberState returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MemberState) {
          return MergeFrom((MemberState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MemberState other) {
        if (other == global::bnet.protocol.channel.MemberState.DefaultInstance) return this;
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.role_.Count != 0) {
          base.AddRange(other.role_, result.role_);
        }
        if (other.HasPrivileges) {
          Privileges = other.Privileges;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 16: {
              AddRole(input.ReadUInt32());
              break;
            }
            case 24: {
              Privileges = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RoleList {
        get { return result.role_; }
      }
      public int RoleCount {
        get { return result.RoleCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRole(int index) {
        return result.GetRole(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRole(int index, uint value) {
        result.role_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRole(uint value) {
        result.role_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRole(scg::IEnumerable<uint> values) {
        base.AddRange(values, result.role_);
        return this;
      }
      public Builder ClearRole() {
        result.role_.Clear();
        return this;
      }
      
      public bool HasPrivileges {
        get { return result.HasPrivileges; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Privileges {
        get { return result.Privileges; }
        set { SetPrivileges(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPrivileges(ulong value) {
        result.hasPrivileges = true;
        result.privileges_ = value;
        return this;
      }
      public Builder ClearPrivileges() {
        result.hasPrivileges = false;
        result.privileges_ = 0UL;
        return this;
      }
    }
    static MemberState() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
    private static readonly Member defaultInstance = new Builder().BuildPartial();
    public static Member DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Member DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Member ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Member__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Member__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bnet.protocol.Identity identity_ = global::bnet.protocol.Identity.DefaultInstance;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bnet.protocol.Identity Identity {
      get { return identity_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private global::bnet.protocol.channel.MemberState state_ = global::bnet.protocol.channel.MemberState.DefaultInstance;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.channel.MemberState State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdentity) return false;
        if (!hasState) return false;
        if (!Identity.IsInitialized) return false;
        if (!State.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasIdentity) {
        output.WriteMessage(1, Identity);
      }
      if (HasState) {
        output.WriteMessage(2, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (HasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, State);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Member ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Member ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Member prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Member result = new Member();
      
      protected override Member MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Member();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.Member.Descriptor; }
      }
      
      public override Member DefaultInstanceForType {
        get { return global::bnet.protocol.channel.Member.DefaultInstance; }
      }
      
      public override Member BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Member returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Member) {
          return MergeFrom((Member) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Member other) {
        if (other == global::bnet.protocol.channel.Member.DefaultInstance) return this;
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (HasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.MemberState.Builder subBuilder = global::bnet.protocol.channel.MemberState.CreateBuilder();
              if (HasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasIdentity {
       get { return result.HasIdentity; }
      }
      public global::bnet.protocol.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasIdentity &&
            result.identity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.identity_ = global::bnet.protocol.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        result.hasIdentity = false;
        result.identity_ = global::bnet.protocol.Identity.DefaultInstance;
        return this;
      }
      
      public bool HasState {
       get { return result.HasState; }
      }
      public global::bnet.protocol.channel.MemberState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.channel.MemberState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasState &&
            result.state_ != global::bnet.protocol.channel.MemberState.DefaultInstance) {
            result.state_ = global::bnet.protocol.channel.MemberState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        result.hasState = false;
        result.state_ = global::bnet.protocol.channel.MemberState.DefaultInstance;
        return this;
      }
    }
    static Member() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}
