// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.storage {
  
  public static partial class Storage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_TableId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.TableId, global::bnet.protocol.storage.TableId.Builder> internal__static_bnet_protocol_storage_TableId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_ColumnId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ColumnId, global::bnet.protocol.storage.ColumnId.Builder> internal__static_bnet_protocol_storage_ColumnId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_RowId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.RowId, global::bnet.protocol.storage.RowId.Builder> internal__static_bnet_protocol_storage_RowId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_Privilege__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Privilege, global::bnet.protocol.storage.Privilege.Builder> internal__static_bnet_protocol_storage_Privilege__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_ScanOperation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ScanOperation, global::bnet.protocol.storage.ScanOperation.Builder> internal__static_bnet_protocol_storage_ScanOperation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_Command__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Command, global::bnet.protocol.storage.Command.Builder> internal__static_bnet_protocol_storage_Command__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_Operation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Operation, global::bnet.protocol.storage.Operation.Builder> internal__static_bnet_protocol_storage_Operation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_Cell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Cell, global::bnet.protocol.storage.Cell.Builder> internal__static_bnet_protocol_storage_Cell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_OperationResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OperationResult, global::bnet.protocol.storage.OperationResult.Builder> internal__static_bnet_protocol_storage_OperationResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_OpenTableRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenTableRequest, global::bnet.protocol.storage.OpenTableRequest.Builder> internal__static_bnet_protocol_storage_OpenTableRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_OpenTableResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenTableResponse, global::bnet.protocol.storage.OpenTableResponse.Builder> internal__static_bnet_protocol_storage_OpenTableResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_OpenColumnRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenColumnRequest, global::bnet.protocol.storage.OpenColumnRequest.Builder> internal__static_bnet_protocol_storage_OpenColumnRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_OpenColumnResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenColumnResponse, global::bnet.protocol.storage.OpenColumnResponse.Builder> internal__static_bnet_protocol_storage_OpenColumnResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_ExecuteRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ExecuteRequest, global::bnet.protocol.storage.ExecuteRequest.Builder> internal__static_bnet_protocol_storage_ExecuteRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_storage_ExecuteResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ExecuteResponse, global::bnet.protocol.storage.ExecuteResponse.Builder> internal__static_bnet_protocol_storage_ExecuteResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Storage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch1zZXJ2aWNlL3N0b3JhZ2Uvc3RvcmFnZS5wcm90bxIVYm5ldC5wcm90b2Nv" + 
          "bC5zdG9yYWdlGh1saWIvcHJvdG9jb2wvZGVzY3JpcHRvci5wcm90bxoZbGli" + 
          "L3Byb3RvY29sL2VudGl0eS5wcm90bxoRbGliL3JwYy9ycGMucHJvdG8iFwoH" + 
          "VGFibGVJZBIMCgRoYXNoGAEgAigMIhgKCENvbHVtbklkEgwKBGhhc2gYASAC" + 
          "KAwiFQoFUm93SWQSDAoEaGFzaBgBIAIoDCJzCglQcml2aWxlZ2USDwoEYml0" + 
          "cxgBIAEoBjoBMBISCgdwcm9ncmFtGAIgASgHOgEwIkEKClBlcm1pc3Npb24S" + 
          "CQoFT1dORVIQARIKCgZGUklFTkQQAhIJCgVPVEhFUhAEEggKBEdBTUUQCBIH" + 
          "CgNBTEwQDyL7AQoNU2Nhbk9wZXJhdGlvbhIzCgJvcBgBIAIoDjInLmJuZXQu" + 
          "cHJvdG9jb2wuc3RvcmFnZS5TY2FuT3BlcmF0aW9uLk9wEiIKBWZpZWxkGAIg" + 
          "AigLMhMuYm5ldC5wcm90b2NvbC5QYXRoIpABCgJPcBIMCghJU19DTEVBUhAB" + 
          "Eg0KCU5PVF9DTEVBUhACEg0KCUlTX0VRVUFMUxADEg4KCk5PVF9FUVVBTFMQ" + 
          "BBITCg9JU19HUkVBVEVSX1RIQU4QBRIUChBOT1RfR1JFQVRFUl9USEFOEAYS" + 
          "EAoMSVNfTEVTU19USEFOEAcSEQoNTk9UX0xFU1NfVEhBThAIIoUGCgdDb21t" + 
          "YW5kEi0KAm9wGAEgAigOMiEuYm5ldC5wcm90b2NvbC5zdG9yYWdlLkNvbW1h" + 
          "bmQuT3ASDAoEZGF0YRgCIAEoDBIjCgZmaWVsZHMYAyADKAsyEy5ibmV0LnBy" + 
          "b3RvY29sLlBhdGgSEwoLbWluX3ZlcnNpb24YBCABKAYSEwoLbWF4X3ZlcnNp" + 
          "b24YBSABKAYSMgoEc2NhbhgGIAEoCzIkLmJuZXQucHJvdG9jb2wuc3RvcmFn" + 
          "ZS5TY2FuT3BlcmF0aW9uEg0KBWxpbWl0GAcgASgNEjYKCWNvbmRpdGlvbhgI" + 
          "IAEoDjIjLmJuZXQucHJvdG9jb2wuc3RvcmFnZS5Db21tYW5kLkNvbmQSDwoH" + 
          "bWVzc2FnZRgLIAEoCSKpAgoCT3ASDgoKUk9XX0RFTEVURRABEg0KCVJPV19G" + 
          "RVRDSBACEg4KCkNPTF9ERUxFVEUQAxINCglDT0xfRkVUQ0gQBBINCglDT0xf" + 
          "V1JJVEUQBRINCglDT0xfTUVSR0UQBhINCglGTERfQ0xFQVIQBxINCglGTERf" + 
          "RkVUQ0gQCBINCglGTERfV1JJVEUQCRINCglGTERfTUVSR0UQChIMCghGTERf" + 
          "SU5DUhALEgwKCEZMRF9URVNUEAwSDAoIRkxEX1NDQU4QDRIMCghST1dfVEVT" + 
          "VBAOEgwKCENPTF9URVNUEA8SDAoIRkxEX1NNQVgQEBIMCghDT0xfQ09ORBAR" + 
          "EgwKCEZMRF9DT05EEBISDAoIQ09ORF9QT1AQExINCglMT0dfREVCVUcQFCK1" + 
          "AQoEQ29uZBIPCgtDT05EX0FMV0FZUxAAEhMKD0NPTkRfTk9UX0VYSVNUUxAB" + 
          "EhIKDkNPTkRfTk9UX0VRVUFMEAISEgoOQ09ORF9MRVNTX1RIQU4QAxIUChBD" + 
          "T05EX05PVF9HUkVBVEVSEAQSDwoLQ09ORF9FUVVBTFMQBRIRCg1DT05EX05P" + 
          "VF9MRVNTEAYSFQoRQ09ORF9HUkVBVEVSX1RIQU4QBxIOCgpDT05EX05FVkVS" + 
          "EAgivAIKCU9wZXJhdGlvbhIwCgh0YWJsZV9pZBgBIAIoCzIeLmJuZXQucHJv" + 
          "dG9jb2wuc3RvcmFnZS5UYWJsZUlkEjIKCWNvbHVtbl9pZBgCIAEoCzIfLmJu" + 
          "ZXQucHJvdG9jb2wuc3RvcmFnZS5Db2x1bW5JZBIsCgZyb3dfaWQYAyABKAsy" + 
          "HC5ibmV0LnByb3RvY29sLnN0b3JhZ2UuUm93SWQSDwoHcm93X2tleRgEIAEo" + 
          "DBIPCgd2ZXJzaW9uGAUgASgGEiwKBHJvcHMYBiADKAsyHi5ibmV0LnByb3Rv" + 
          "Y29sLnN0b3JhZ2UuQ29tbWFuZBIWCg5tdXRhdGVfdmVyc2lvbhgHIAEoBhIz" + 
          "Cglwcml2aWxlZ2UYCCABKAsyIC5ibmV0LnByb3RvY29sLnN0b3JhZ2UuUHJp" + 
          "dmlsZWdlIpgBCgRDZWxsEjIKCWNvbHVtbl9pZBgBIAIoCzIfLmJuZXQucHJv" + 
          "dG9jb2wuc3RvcmFnZS5Db2x1bW5JZBIsCgZyb3dfaWQYAiACKAsyHC5ibmV0" + 
          "LnByb3RvY29sLnN0b3JhZ2UuUm93SWQSDwoHcm93X2tleRgDIAEoDBIPCgd2" + 
          "ZXJzaW9uGAQgASgGEgwKBGRhdGEYBSABKAwihQEKD09wZXJhdGlvblJlc3Vs" + 
          "dBIVCgplcnJvcl9jb2RlGAEgASgNOgEwEjAKCHRhYmxlX2lkGAIgAigLMh4u" + 
          "Ym5ldC5wcm90b2NvbC5zdG9yYWdlLlRhYmxlSWQSKQoEZGF0YRgDIAMoCzIb" + 
          "LmJuZXQucHJvdG9jb2wuc3RvcmFnZS5DZWxsItMBChBPcGVuVGFibGVSZXF1" + 
          "ZXN0EhcKBnNjaGVtYRgBIAEoCToHREVGQVVMVBIzCglwcml2aWxlZ2UYAiAB" + 
          "KAsyIC5ibmV0LnByb3RvY29sLnN0b3JhZ2UuUHJpdmlsZWdlEjAKCHRhYmxl" + 
          "X2lkGAMgAigLMh4uYm5ldC5wcm90b2NvbC5zdG9yYWdlLlRhYmxlSWQSKQoI" + 
          "YWdlbnRfaWQYBCABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhQKDHBy" + 
          "b2Nlc3NfbmFtZRgFIAEoCSITChFPcGVuVGFibGVSZXNwb25zZSKcAgoRT3Bl" + 
          "bkNvbHVtblJlcXVlc3QSFwoGc2NoZW1hGAEgASgJOgdERUZBVUxUEjMKCXBy" + 
          "aXZpbGVnZRgCIAEoCzIgLmJuZXQucHJvdG9jb2wuc3RvcmFnZS5Qcml2aWxl" + 
          "Z2USMAoIdGFibGVfaWQYBCACKAsyHi5ibmV0LnByb3RvY29sLnN0b3JhZ2Uu" + 
          "VGFibGVJZBIyCgljb2x1bW5faWQYBSACKAsyHy5ibmV0LnByb3RvY29sLnN0" + 
          "b3JhZ2UuQ29sdW1uSWQSEgoKcHJvdG9fdHlwZRgGIAEoCRIpCghhZ2VudF9p" + 
          "ZBgHIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSFAoMcHJvY2Vzc19u" + 
          "YW1lGAggASgJIjUKEk9wZW5Db2x1bW5SZXNwb25zZRIfChBzZXJ2ZXJfZmll" + 
          "bGRfb3BzGAIgASgIOgVmYWxzZSL9AgoORXhlY3V0ZVJlcXVlc3QSFwoGc2No" + 
          "ZW1hGAEgASgJOgdERUZBVUxUEjMKCXByaXZpbGVnZRgCIAEoCzIgLmJuZXQu" + 
          "cHJvdG9jb2wuc3RvcmFnZS5Qcml2aWxlZ2USGAoJcmVhZF9vbmx5GAMgASgI" + 
          "OgVmYWxzZRIcCg13YW50c19yb3dfa2V5GAQgASgIOgVmYWxzZRIgChF3YW50" + 
          "c19jb2x1bW5fbmFtZRgFIAEoCDoFZmFsc2USHwoNbWF4X2RhdGFfc2l6ZRgG" + 
          "IAEoDToIMTY3NzcyMTUSNAoKb3BlcmF0aW9ucxgHIAMoCzIgLmJuZXQucHJv" + 
          "dG9jb2wuc3RvcmFnZS5PcGVyYXRpb24SDwoHdGltZW91dBgMIAEoDRIpCghh" + 
          "Z2VudF9pZBgJIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSGgoKcXVl" + 
          "cnlfbmFtZRgKIAEoCToGTm9OYW1lEhQKDHByb2Nlc3NfbmFtZRgLIAEoCSJ4" + 
          "Cg9FeGVjdXRlUmVzcG9uc2USFQoKZXJyb3JfY29kZRgBIAEoDToBMBI3Cgdy" + 
          "ZXN1bHRzGAIgAygLMiYuYm5ldC5wcm90b2NvbC5zdG9yYWdlLk9wZXJhdGlv" + 
          "blJlc3VsdBIVCg1lcnJvcl9tZXNzYWdlGAMgASgJMq0CCg5TdG9yYWdlU2Vy" + 
          "dmljZRJYCgdFeGVjdXRlEiUuYm5ldC5wcm90b2NvbC5zdG9yYWdlLkV4ZWN1" + 
          "dGVSZXF1ZXN0GiYuYm5ldC5wcm90b2NvbC5zdG9yYWdlLkV4ZWN1dGVSZXNw" + 
          "b25zZRJeCglPcGVuVGFibGUSJy5ibmV0LnByb3RvY29sLnN0b3JhZ2UuT3Bl" + 
          "blRhYmxlUmVxdWVzdBooLmJuZXQucHJvdG9jb2wuc3RvcmFnZS5PcGVuVGFi" + 
          "bGVSZXNwb25zZRJhCgpPcGVuQ29sdW1uEiguYm5ldC5wcm90b2NvbC5zdG9y" + 
          "YWdlLk9wZW5Db2x1bW5SZXF1ZXN0GikuYm5ldC5wcm90b2NvbC5zdG9yYWdl" + 
          "Lk9wZW5Db2x1bW5SZXNwb25zZUIDgAEB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_storage_TableId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_storage_TableId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.TableId, global::bnet.protocol.storage.TableId.Builder>(internal__static_bnet_protocol_storage_TableId__Descriptor,
                new string[] { "Hash", });
        internal__static_bnet_protocol_storage_ColumnId__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_storage_ColumnId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ColumnId, global::bnet.protocol.storage.ColumnId.Builder>(internal__static_bnet_protocol_storage_ColumnId__Descriptor,
                new string[] { "Hash", });
        internal__static_bnet_protocol_storage_RowId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_storage_RowId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.RowId, global::bnet.protocol.storage.RowId.Builder>(internal__static_bnet_protocol_storage_RowId__Descriptor,
                new string[] { "Hash", });
        internal__static_bnet_protocol_storage_Privilege__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_storage_Privilege__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Privilege, global::bnet.protocol.storage.Privilege.Builder>(internal__static_bnet_protocol_storage_Privilege__Descriptor,
                new string[] { "Bits", "Program", });
        internal__static_bnet_protocol_storage_ScanOperation__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_storage_ScanOperation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ScanOperation, global::bnet.protocol.storage.ScanOperation.Builder>(internal__static_bnet_protocol_storage_ScanOperation__Descriptor,
                new string[] { "Op", "Field", });
        internal__static_bnet_protocol_storage_Command__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_storage_Command__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Command, global::bnet.protocol.storage.Command.Builder>(internal__static_bnet_protocol_storage_Command__Descriptor,
                new string[] { "Op", "Data", "Fields", "MinVersion", "MaxVersion", "Scan", "Limit", "Condition", "Message", });
        internal__static_bnet_protocol_storage_Operation__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_storage_Operation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Operation, global::bnet.protocol.storage.Operation.Builder>(internal__static_bnet_protocol_storage_Operation__Descriptor,
                new string[] { "TableId", "ColumnId", "RowId", "RowKey", "Version", "Rops", "MutateVersion", "Privilege", });
        internal__static_bnet_protocol_storage_Cell__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_storage_Cell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.Cell, global::bnet.protocol.storage.Cell.Builder>(internal__static_bnet_protocol_storage_Cell__Descriptor,
                new string[] { "ColumnId", "RowId", "RowKey", "Version", "Data", });
        internal__static_bnet_protocol_storage_OperationResult__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_storage_OperationResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OperationResult, global::bnet.protocol.storage.OperationResult.Builder>(internal__static_bnet_protocol_storage_OperationResult__Descriptor,
                new string[] { "ErrorCode", "TableId", "Data", });
        internal__static_bnet_protocol_storage_OpenTableRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_storage_OpenTableRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenTableRequest, global::bnet.protocol.storage.OpenTableRequest.Builder>(internal__static_bnet_protocol_storage_OpenTableRequest__Descriptor,
                new string[] { "Schema", "Privilege", "TableId", "AgentId", "ProcessName", });
        internal__static_bnet_protocol_storage_OpenTableResponse__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bnet_protocol_storage_OpenTableResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenTableResponse, global::bnet.protocol.storage.OpenTableResponse.Builder>(internal__static_bnet_protocol_storage_OpenTableResponse__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_storage_OpenColumnRequest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_bnet_protocol_storage_OpenColumnRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenColumnRequest, global::bnet.protocol.storage.OpenColumnRequest.Builder>(internal__static_bnet_protocol_storage_OpenColumnRequest__Descriptor,
                new string[] { "Schema", "Privilege", "TableId", "ColumnId", "ProtoType", "AgentId", "ProcessName", });
        internal__static_bnet_protocol_storage_OpenColumnResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_bnet_protocol_storage_OpenColumnResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.OpenColumnResponse, global::bnet.protocol.storage.OpenColumnResponse.Builder>(internal__static_bnet_protocol_storage_OpenColumnResponse__Descriptor,
                new string[] { "ServerFieldOps", });
        internal__static_bnet_protocol_storage_ExecuteRequest__Descriptor = Descriptor.MessageTypes[13];
        internal__static_bnet_protocol_storage_ExecuteRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ExecuteRequest, global::bnet.protocol.storage.ExecuteRequest.Builder>(internal__static_bnet_protocol_storage_ExecuteRequest__Descriptor,
                new string[] { "Schema", "Privilege", "ReadOnly", "WantsRowKey", "WantsColumnName", "MaxDataSize", "Operations", "Timeout", "AgentId", "QueryName", "ProcessName", });
        internal__static_bnet_protocol_storage_ExecuteResponse__Descriptor = Descriptor.MessageTypes[14];
        internal__static_bnet_protocol_storage_ExecuteResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.storage.ExecuteResponse, global::bnet.protocol.storage.ExecuteResponse.Builder>(internal__static_bnet_protocol_storage_ExecuteResponse__Descriptor,
                new string[] { "ErrorCode", "Results", "ErrorMessage", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Descriptor.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.Rpc.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class TableId : pb::GeneratedMessage<TableId, TableId.Builder> {
    private static readonly TableId defaultInstance = new Builder().BuildPartial();
    public static TableId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override TableId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_TableId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableId, TableId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_TableId__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public bool HasHash {
      get { return hasHash; }
    }
    public pb::ByteString Hash {
      get { return hash_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHash) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHash) {
        output.WriteBytes(1, Hash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHash) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Hash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TableId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<TableId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      TableId result = new TableId();
      
      protected override TableId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new TableId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.TableId.Descriptor; }
      }
      
      public override TableId DefaultInstanceForType {
        get { return global::bnet.protocol.storage.TableId.DefaultInstance; }
      }
      
      public override TableId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        TableId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableId) {
          return MergeFrom((TableId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableId other) {
        if (other == global::bnet.protocol.storage.TableId.DefaultInstance) return this;
        if (other.HasHash) {
          Hash = other.Hash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Hash = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasHash {
        get { return result.HasHash; }
      }
      public pb::ByteString Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        result.hasHash = false;
        result.hash_ = pb::ByteString.Empty;
        return this;
      }
    }
    static TableId() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class ColumnId : pb::GeneratedMessage<ColumnId, ColumnId.Builder> {
    private static readonly ColumnId defaultInstance = new Builder().BuildPartial();
    public static ColumnId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ColumnId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ColumnId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ColumnId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ColumnId, ColumnId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ColumnId__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public bool HasHash {
      get { return hasHash; }
    }
    public pb::ByteString Hash {
      get { return hash_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHash) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHash) {
        output.WriteBytes(1, Hash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHash) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Hash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ColumnId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ColumnId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ColumnId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ColumnId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ColumnId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ColumnId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ColumnId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ColumnId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ColumnId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ColumnId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ColumnId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ColumnId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ColumnId result = new ColumnId();
      
      protected override ColumnId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ColumnId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.ColumnId.Descriptor; }
      }
      
      public override ColumnId DefaultInstanceForType {
        get { return global::bnet.protocol.storage.ColumnId.DefaultInstance; }
      }
      
      public override ColumnId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ColumnId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ColumnId) {
          return MergeFrom((ColumnId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ColumnId other) {
        if (other == global::bnet.protocol.storage.ColumnId.DefaultInstance) return this;
        if (other.HasHash) {
          Hash = other.Hash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Hash = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasHash {
        get { return result.HasHash; }
      }
      public pb::ByteString Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        result.hasHash = false;
        result.hash_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ColumnId() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class RowId : pb::GeneratedMessage<RowId, RowId.Builder> {
    private static readonly RowId defaultInstance = new Builder().BuildPartial();
    public static RowId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RowId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RowId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_RowId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RowId, RowId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_RowId__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public bool HasHash {
      get { return hasHash; }
    }
    public pb::ByteString Hash {
      get { return hash_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHash) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHash) {
        output.WriteBytes(1, Hash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHash) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Hash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RowId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RowId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RowId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RowId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RowId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RowId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RowId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RowId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RowId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RowId result = new RowId();
      
      protected override RowId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RowId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.RowId.Descriptor; }
      }
      
      public override RowId DefaultInstanceForType {
        get { return global::bnet.protocol.storage.RowId.DefaultInstance; }
      }
      
      public override RowId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RowId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RowId) {
          return MergeFrom((RowId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RowId other) {
        if (other == global::bnet.protocol.storage.RowId.DefaultInstance) return this;
        if (other.HasHash) {
          Hash = other.Hash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Hash = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasHash {
        get { return result.HasHash; }
      }
      public pb::ByteString Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        result.hasHash = false;
        result.hash_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RowId() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class Privilege : pb::GeneratedMessage<Privilege, Privilege.Builder> {
    private static readonly Privilege defaultInstance = new Builder().BuildPartial();
    public static Privilege DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Privilege DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Privilege ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Privilege__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Privilege, Privilege.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Privilege__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum Permission {
        OWNER = 1,
        FRIEND = 2,
        OTHER = 4,
        GAME = 8,
        ALL = 15,
      }
      
    }
    #endregion
    
    public const int BitsFieldNumber = 1;
    private bool hasBits;
    private ulong bits_ = 0;
    public bool HasBits {
      get { return hasBits; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Bits {
      get { return bits_; }
    }
    
    public const int ProgramFieldNumber = 2;
    private bool hasProgram;
    private uint program_ = 0;
    public bool HasProgram {
      get { return hasProgram; }
    }
    [global::System.CLSCompliant(false)]
    public uint Program {
      get { return program_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBits) {
        output.WriteFixed64(1, Bits);
      }
      if (HasProgram) {
        output.WriteFixed32(2, Program);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBits) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Bits);
        }
        if (HasProgram) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Program);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Privilege ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Privilege ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Privilege ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Privilege ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Privilege ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Privilege ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Privilege ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Privilege ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Privilege ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Privilege ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Privilege prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Privilege, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Privilege result = new Privilege();
      
      protected override Privilege MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Privilege();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.Privilege.Descriptor; }
      }
      
      public override Privilege DefaultInstanceForType {
        get { return global::bnet.protocol.storage.Privilege.DefaultInstance; }
      }
      
      public override Privilege BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Privilege returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Privilege) {
          return MergeFrom((Privilege) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Privilege other) {
        if (other == global::bnet.protocol.storage.Privilege.DefaultInstance) return this;
        if (other.HasBits) {
          Bits = other.Bits;
        }
        if (other.HasProgram) {
          Program = other.Program;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              Bits = input.ReadFixed64();
              break;
            }
            case 21: {
              Program = input.ReadFixed32();
              break;
            }
          }
        }
      }
      
      
      public bool HasBits {
        get { return result.HasBits; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Bits {
        get { return result.Bits; }
        set { SetBits(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBits(ulong value) {
        result.hasBits = true;
        result.bits_ = value;
        return this;
      }
      public Builder ClearBits() {
        result.hasBits = false;
        result.bits_ = 0;
        return this;
      }
      
      public bool HasProgram {
        get { return result.HasProgram; }
      }
      [global::System.CLSCompliant(false)]
      public uint Program {
        get { return result.Program; }
        set { SetProgram(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProgram(uint value) {
        result.hasProgram = true;
        result.program_ = value;
        return this;
      }
      public Builder ClearProgram() {
        result.hasProgram = false;
        result.program_ = 0;
        return this;
      }
    }
    static Privilege() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class ScanOperation : pb::GeneratedMessage<ScanOperation, ScanOperation.Builder> {
    private static readonly ScanOperation defaultInstance = new Builder().BuildPartial();
    public static ScanOperation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScanOperation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ScanOperation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ScanOperation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScanOperation, ScanOperation.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ScanOperation__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum Op {
        IS_CLEAR = 1,
        NOT_CLEAR = 2,
        IS_EQUALS = 3,
        NOT_EQUALS = 4,
        IS_GREATER_THAN = 5,
        NOT_GREATER_THAN = 6,
        IS_LESS_THAN = 7,
        NOT_LESS_THAN = 8,
      }
      
    }
    #endregion
    
    public const int OpFieldNumber = 1;
    private bool hasOp;
    private global::bnet.protocol.storage.ScanOperation.Types.Op op_ = global::bnet.protocol.storage.ScanOperation.Types.Op.IS_CLEAR;
    public bool HasOp {
      get { return hasOp; }
    }
    public global::bnet.protocol.storage.ScanOperation.Types.Op Op {
      get { return op_; }
    }
    
    public const int FieldFieldNumber = 2;
    private bool hasField;
    private global::bnet.protocol.Path field_ = global::bnet.protocol.Path.DefaultInstance;
    public bool HasField {
      get { return hasField; }
    }
    public global::bnet.protocol.Path Field {
      get { return field_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOp) return false;
        if (!hasField) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOp) {
        output.WriteEnum(1, (int) Op);
      }
      if (HasField) {
        output.WriteMessage(2, Field);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOp) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Op);
        }
        if (HasField) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Field);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ScanOperation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScanOperation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScanOperation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScanOperation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScanOperation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScanOperation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScanOperation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScanOperation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScanOperation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScanOperation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScanOperation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ScanOperation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ScanOperation result = new ScanOperation();
      
      protected override ScanOperation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ScanOperation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.ScanOperation.Descriptor; }
      }
      
      public override ScanOperation DefaultInstanceForType {
        get { return global::bnet.protocol.storage.ScanOperation.DefaultInstance; }
      }
      
      public override ScanOperation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ScanOperation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScanOperation) {
          return MergeFrom((ScanOperation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScanOperation other) {
        if (other == global::bnet.protocol.storage.ScanOperation.DefaultInstance) return this;
        if (other.HasOp) {
          Op = other.Op;
        }
        if (other.HasField) {
          MergeField(other.Field);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::bnet.protocol.storage.ScanOperation.Types.Op), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Op = (global::bnet.protocol.storage.ScanOperation.Types.Op) rawValue;
              }
              break;
            }
            case 18: {
              global::bnet.protocol.Path.Builder subBuilder = global::bnet.protocol.Path.CreateBuilder();
              if (HasField) {
                subBuilder.MergeFrom(Field);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Field = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasOp {
       get { return result.HasOp; }
      }
      public global::bnet.protocol.storage.ScanOperation.Types.Op Op {
        get { return result.Op; }
        set { SetOp(value); }
      }
      public Builder SetOp(global::bnet.protocol.storage.ScanOperation.Types.Op value) {
        result.hasOp = true;
        result.op_ = value;
        return this;
      }
      public Builder ClearOp() {
        result.hasOp = false;
        result.op_ = global::bnet.protocol.storage.ScanOperation.Types.Op.IS_CLEAR;
        return this;
      }
      
      public bool HasField {
       get { return result.HasField; }
      }
      public global::bnet.protocol.Path Field {
        get { return result.Field; }
        set { SetField(value); }
      }
      public Builder SetField(global::bnet.protocol.Path value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasField = true;
        result.field_ = value;
        return this;
      }
      public Builder SetField(global::bnet.protocol.Path.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasField = true;
        result.field_ = builderForValue.Build();
        return this;
      }
      public Builder MergeField(global::bnet.protocol.Path value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasField &&
            result.field_ != global::bnet.protocol.Path.DefaultInstance) {
            result.field_ = global::bnet.protocol.Path.CreateBuilder(result.field_).MergeFrom(value).BuildPartial();
        } else {
          result.field_ = value;
        }
        result.hasField = true;
        return this;
      }
      public Builder ClearField() {
        result.hasField = false;
        result.field_ = global::bnet.protocol.Path.DefaultInstance;
        return this;
      }
    }
    static ScanOperation() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class Command : pb::GeneratedMessage<Command, Command.Builder> {
    private static readonly Command defaultInstance = new Builder().BuildPartial();
    public static Command DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Command ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Command__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command, Command.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Command__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum Op {
        ROW_DELETE = 1,
        ROW_FETCH = 2,
        COL_DELETE = 3,
        COL_FETCH = 4,
        COL_WRITE = 5,
        COL_MERGE = 6,
        FLD_CLEAR = 7,
        FLD_FETCH = 8,
        FLD_WRITE = 9,
        FLD_MERGE = 10,
        FLD_INCR = 11,
        FLD_TEST = 12,
        FLD_SCAN = 13,
        ROW_TEST = 14,
        COL_TEST = 15,
        FLD_SMAX = 16,
        COL_COND = 17,
        FLD_COND = 18,
        COND_POP = 19,
        LOG_DEBUG = 20,
      }
      
      public enum Cond {
        COND_ALWAYS = 0,
        COND_NOT_EXISTS = 1,
        COND_NOT_EQUAL = 2,
        COND_LESS_THAN = 3,
        COND_NOT_GREATER = 4,
        COND_EQUALS = 5,
        COND_NOT_LESS = 6,
        COND_GREATER_THAN = 7,
        COND_NEVER = 8,
      }
      
    }
    #endregion
    
    public const int OpFieldNumber = 1;
    private bool hasOp;
    private global::bnet.protocol.storage.Command.Types.Op op_ = global::bnet.protocol.storage.Command.Types.Op.ROW_DELETE;
    public bool HasOp {
      get { return hasOp; }
    }
    public global::bnet.protocol.storage.Command.Types.Op Op {
      get { return op_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int FieldsFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.Path> fields_ = new pbc::PopsicleList<global::bnet.protocol.Path>();
    public scg::IList<global::bnet.protocol.Path> FieldsList {
      get { return fields_; }
    }
    public int FieldsCount {
      get { return fields_.Count; }
    }
    public global::bnet.protocol.Path GetFields(int index) {
      return fields_[index];
    }
    
    public const int MinVersionFieldNumber = 4;
    private bool hasMinVersion;
    private ulong minVersion_ = 0;
    public bool HasMinVersion {
      get { return hasMinVersion; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MinVersion {
      get { return minVersion_; }
    }
    
    public const int MaxVersionFieldNumber = 5;
    private bool hasMaxVersion;
    private ulong maxVersion_ = 0;
    public bool HasMaxVersion {
      get { return hasMaxVersion; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MaxVersion {
      get { return maxVersion_; }
    }
    
    public const int ScanFieldNumber = 6;
    private bool hasScan;
    private global::bnet.protocol.storage.ScanOperation scan_ = global::bnet.protocol.storage.ScanOperation.DefaultInstance;
    public bool HasScan {
      get { return hasScan; }
    }
    public global::bnet.protocol.storage.ScanOperation Scan {
      get { return scan_; }
    }
    
    public const int LimitFieldNumber = 7;
    private bool hasLimit;
    private uint limit_ = 0;
    public bool HasLimit {
      get { return hasLimit; }
    }
    [global::System.CLSCompliant(false)]
    public uint Limit {
      get { return limit_; }
    }
    
    public const int ConditionFieldNumber = 8;
    private bool hasCondition;
    private global::bnet.protocol.storage.Command.Types.Cond condition_ = global::bnet.protocol.storage.Command.Types.Cond.COND_ALWAYS;
    public bool HasCondition {
      get { return hasCondition; }
    }
    public global::bnet.protocol.storage.Command.Types.Cond Condition {
      get { return condition_; }
    }
    
    public const int MessageFieldNumber = 11;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOp) return false;
        if (HasScan) {
          if (!Scan.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOp) {
        output.WriteEnum(1, (int) Op);
      }
      if (HasData) {
        output.WriteBytes(2, Data);
      }
      foreach (global::bnet.protocol.Path element in FieldsList) {
        output.WriteMessage(3, element);
      }
      if (HasMinVersion) {
        output.WriteFixed64(4, MinVersion);
      }
      if (HasMaxVersion) {
        output.WriteFixed64(5, MaxVersion);
      }
      if (HasScan) {
        output.WriteMessage(6, Scan);
      }
      if (HasLimit) {
        output.WriteUInt32(7, Limit);
      }
      if (HasCondition) {
        output.WriteEnum(8, (int) Condition);
      }
      if (HasMessage) {
        output.WriteString(11, Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOp) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Op);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        foreach (global::bnet.protocol.Path element in FieldsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (HasMinVersion) {
          size += pb::CodedOutputStream.ComputeFixed64Size(4, MinVersion);
        }
        if (HasMaxVersion) {
          size += pb::CodedOutputStream.ComputeFixed64Size(5, MaxVersion);
        }
        if (HasScan) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Scan);
        }
        if (HasLimit) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, Limit);
        }
        if (HasCondition) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) Condition);
        }
        if (HasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Command, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Command result = new Command();
      
      protected override Command MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Command();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.Command.Descriptor; }
      }
      
      public override Command DefaultInstanceForType {
        get { return global::bnet.protocol.storage.Command.DefaultInstance; }
      }
      
      public override Command BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.fields_.MakeReadOnly();
        Command returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command) {
          return MergeFrom((Command) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command other) {
        if (other == global::bnet.protocol.storage.Command.DefaultInstance) return this;
        if (other.HasOp) {
          Op = other.Op;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.fields_.Count != 0) {
          base.AddRange(other.fields_, result.fields_);
        }
        if (other.HasMinVersion) {
          MinVersion = other.MinVersion;
        }
        if (other.HasMaxVersion) {
          MaxVersion = other.MaxVersion;
        }
        if (other.HasScan) {
          MergeScan(other.Scan);
        }
        if (other.HasLimit) {
          Limit = other.Limit;
        }
        if (other.HasCondition) {
          Condition = other.Condition;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::bnet.protocol.storage.Command.Types.Op), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Op = (global::bnet.protocol.storage.Command.Types.Op) rawValue;
              }
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
            case 26: {
              global::bnet.protocol.Path.Builder subBuilder = global::bnet.protocol.Path.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddFields(subBuilder.BuildPartial());
              break;
            }
            case 33: {
              MinVersion = input.ReadFixed64();
              break;
            }
            case 41: {
              MaxVersion = input.ReadFixed64();
              break;
            }
            case 50: {
              global::bnet.protocol.storage.ScanOperation.Builder subBuilder = global::bnet.protocol.storage.ScanOperation.CreateBuilder();
              if (HasScan) {
                subBuilder.MergeFrom(Scan);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Scan = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              Limit = input.ReadUInt32();
              break;
            }
            case 64: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::bnet.protocol.storage.Command.Types.Cond), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong) rawValue);
              } else {
                Condition = (global::bnet.protocol.storage.Command.Types.Cond) rawValue;
              }
              break;
            }
            case 90: {
              Message = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasOp {
       get { return result.HasOp; }
      }
      public global::bnet.protocol.storage.Command.Types.Op Op {
        get { return result.Op; }
        set { SetOp(value); }
      }
      public Builder SetOp(global::bnet.protocol.storage.Command.Types.Op value) {
        result.hasOp = true;
        result.op_ = value;
        return this;
      }
      public Builder ClearOp() {
        result.hasOp = false;
        result.op_ = global::bnet.protocol.storage.Command.Types.Op.ROW_DELETE;
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.Path> FieldsList {
        get { return result.fields_; }
      }
      public int FieldsCount {
        get { return result.FieldsCount; }
      }
      public global::bnet.protocol.Path GetFields(int index) {
        return result.GetFields(index);
      }
      public Builder SetFields(int index, global::bnet.protocol.Path value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fields_[index] = value;
        return this;
      }
      public Builder SetFields(int index, global::bnet.protocol.Path.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fields_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFields(global::bnet.protocol.Path value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.fields_.Add(value);
        return this;
      }
      public Builder AddFields(global::bnet.protocol.Path.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.fields_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFields(scg::IEnumerable<global::bnet.protocol.Path> values) {
        base.AddRange(values, result.fields_);
        return this;
      }
      public Builder ClearFields() {
        result.fields_.Clear();
        return this;
      }
      
      public bool HasMinVersion {
        get { return result.HasMinVersion; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MinVersion {
        get { return result.MinVersion; }
        set { SetMinVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinVersion(ulong value) {
        result.hasMinVersion = true;
        result.minVersion_ = value;
        return this;
      }
      public Builder ClearMinVersion() {
        result.hasMinVersion = false;
        result.minVersion_ = 0;
        return this;
      }
      
      public bool HasMaxVersion {
        get { return result.HasMaxVersion; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MaxVersion {
        get { return result.MaxVersion; }
        set { SetMaxVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxVersion(ulong value) {
        result.hasMaxVersion = true;
        result.maxVersion_ = value;
        return this;
      }
      public Builder ClearMaxVersion() {
        result.hasMaxVersion = false;
        result.maxVersion_ = 0;
        return this;
      }
      
      public bool HasScan {
       get { return result.HasScan; }
      }
      public global::bnet.protocol.storage.ScanOperation Scan {
        get { return result.Scan; }
        set { SetScan(value); }
      }
      public Builder SetScan(global::bnet.protocol.storage.ScanOperation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasScan = true;
        result.scan_ = value;
        return this;
      }
      public Builder SetScan(global::bnet.protocol.storage.ScanOperation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasScan = true;
        result.scan_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScan(global::bnet.protocol.storage.ScanOperation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasScan &&
            result.scan_ != global::bnet.protocol.storage.ScanOperation.DefaultInstance) {
            result.scan_ = global::bnet.protocol.storage.ScanOperation.CreateBuilder(result.scan_).MergeFrom(value).BuildPartial();
        } else {
          result.scan_ = value;
        }
        result.hasScan = true;
        return this;
      }
      public Builder ClearScan() {
        result.hasScan = false;
        result.scan_ = global::bnet.protocol.storage.ScanOperation.DefaultInstance;
        return this;
      }
      
      public bool HasLimit {
        get { return result.HasLimit; }
      }
      [global::System.CLSCompliant(false)]
      public uint Limit {
        get { return result.Limit; }
        set { SetLimit(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLimit(uint value) {
        result.hasLimit = true;
        result.limit_ = value;
        return this;
      }
      public Builder ClearLimit() {
        result.hasLimit = false;
        result.limit_ = 0;
        return this;
      }
      
      public bool HasCondition {
       get { return result.HasCondition; }
      }
      public global::bnet.protocol.storage.Command.Types.Cond Condition {
        get { return result.Condition; }
        set { SetCondition(value); }
      }
      public Builder SetCondition(global::bnet.protocol.storage.Command.Types.Cond value) {
        result.hasCondition = true;
        result.condition_ = value;
        return this;
      }
      public Builder ClearCondition() {
        result.hasCondition = false;
        result.condition_ = global::bnet.protocol.storage.Command.Types.Cond.COND_ALWAYS;
        return this;
      }
      
      public bool HasMessage {
        get { return result.HasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static Command() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class Operation : pb::GeneratedMessage<Operation, Operation.Builder> {
    private static readonly Operation defaultInstance = new Builder().BuildPartial();
    public static Operation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Operation DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Operation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Operation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Operation, Operation.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Operation__FieldAccessorTable; }
    }
    
    public const int TableIdFieldNumber = 1;
    private bool hasTableId;
    private global::bnet.protocol.storage.TableId tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public global::bnet.protocol.storage.TableId TableId {
      get { return tableId_; }
    }
    
    public const int ColumnIdFieldNumber = 2;
    private bool hasColumnId;
    private global::bnet.protocol.storage.ColumnId columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
    public bool HasColumnId {
      get { return hasColumnId; }
    }
    public global::bnet.protocol.storage.ColumnId ColumnId {
      get { return columnId_; }
    }
    
    public const int RowIdFieldNumber = 3;
    private bool hasRowId;
    private global::bnet.protocol.storage.RowId rowId_ = global::bnet.protocol.storage.RowId.DefaultInstance;
    public bool HasRowId {
      get { return hasRowId; }
    }
    public global::bnet.protocol.storage.RowId RowId {
      get { return rowId_; }
    }
    
    public const int RowKeyFieldNumber = 4;
    private bool hasRowKey;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    public bool HasRowKey {
      get { return hasRowKey; }
    }
    public pb::ByteString RowKey {
      get { return rowKey_; }
    }
    
    public const int VersionFieldNumber = 5;
    private bool hasVersion;
    private ulong version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Version {
      get { return version_; }
    }
    
    public const int RopsFieldNumber = 6;
    private pbc::PopsicleList<global::bnet.protocol.storage.Command> rops_ = new pbc::PopsicleList<global::bnet.protocol.storage.Command>();
    public scg::IList<global::bnet.protocol.storage.Command> RopsList {
      get { return rops_; }
    }
    public int RopsCount {
      get { return rops_.Count; }
    }
    public global::bnet.protocol.storage.Command GetRops(int index) {
      return rops_[index];
    }
    
    public const int MutateVersionFieldNumber = 7;
    private bool hasMutateVersion;
    private ulong mutateVersion_ = 0;
    public bool HasMutateVersion {
      get { return hasMutateVersion; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MutateVersion {
      get { return mutateVersion_; }
    }
    
    public const int PrivilegeFieldNumber = 8;
    private bool hasPrivilege;
    private global::bnet.protocol.storage.Privilege privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
    public bool HasPrivilege {
      get { return hasPrivilege; }
    }
    public global::bnet.protocol.storage.Privilege Privilege {
      get { return privilege_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableId) return false;
        if (!TableId.IsInitialized) return false;
        if (HasColumnId) {
          if (!ColumnId.IsInitialized) return false;
        }
        if (HasRowId) {
          if (!RowId.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.storage.Command element in RopsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasTableId) {
        output.WriteMessage(1, TableId);
      }
      if (HasColumnId) {
        output.WriteMessage(2, ColumnId);
      }
      if (HasRowId) {
        output.WriteMessage(3, RowId);
      }
      if (HasRowKey) {
        output.WriteBytes(4, RowKey);
      }
      if (HasVersion) {
        output.WriteFixed64(5, Version);
      }
      foreach (global::bnet.protocol.storage.Command element in RopsList) {
        output.WriteMessage(6, element);
      }
      if (HasMutateVersion) {
        output.WriteFixed64(7, MutateVersion);
      }
      if (HasPrivilege) {
        output.WriteMessage(8, Privilege);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTableId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TableId);
        }
        if (HasColumnId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ColumnId);
        }
        if (HasRowId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, RowId);
        }
        if (HasRowKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, RowKey);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeFixed64Size(5, Version);
        }
        foreach (global::bnet.protocol.storage.Command element in RopsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (HasMutateVersion) {
          size += pb::CodedOutputStream.ComputeFixed64Size(7, MutateVersion);
        }
        if (HasPrivilege) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Privilege);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Operation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Operation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Operation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Operation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Operation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Operation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Operation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Operation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Operation ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Operation ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Operation prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Operation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Operation result = new Operation();
      
      protected override Operation MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Operation();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.Operation.Descriptor; }
      }
      
      public override Operation DefaultInstanceForType {
        get { return global::bnet.protocol.storage.Operation.DefaultInstance; }
      }
      
      public override Operation BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.rops_.MakeReadOnly();
        Operation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Operation) {
          return MergeFrom((Operation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Operation other) {
        if (other == global::bnet.protocol.storage.Operation.DefaultInstance) return this;
        if (other.HasTableId) {
          MergeTableId(other.TableId);
        }
        if (other.HasColumnId) {
          MergeColumnId(other.ColumnId);
        }
        if (other.HasRowId) {
          MergeRowId(other.RowId);
        }
        if (other.HasRowKey) {
          RowKey = other.RowKey;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.rops_.Count != 0) {
          base.AddRange(other.rops_, result.rops_);
        }
        if (other.HasMutateVersion) {
          MutateVersion = other.MutateVersion;
        }
        if (other.HasPrivilege) {
          MergePrivilege(other.Privilege);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.storage.TableId.Builder subBuilder = global::bnet.protocol.storage.TableId.CreateBuilder();
              if (HasTableId) {
                subBuilder.MergeFrom(TableId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TableId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.ColumnId.Builder subBuilder = global::bnet.protocol.storage.ColumnId.CreateBuilder();
              if (HasColumnId) {
                subBuilder.MergeFrom(ColumnId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ColumnId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.storage.RowId.Builder subBuilder = global::bnet.protocol.storage.RowId.CreateBuilder();
              if (HasRowId) {
                subBuilder.MergeFrom(RowId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RowId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              RowKey = input.ReadBytes();
              break;
            }
            case 41: {
              Version = input.ReadFixed64();
              break;
            }
            case 50: {
              global::bnet.protocol.storage.Command.Builder subBuilder = global::bnet.protocol.storage.Command.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddRops(subBuilder.BuildPartial());
              break;
            }
            case 57: {
              MutateVersion = input.ReadFixed64();
              break;
            }
            case 66: {
              global::bnet.protocol.storage.Privilege.Builder subBuilder = global::bnet.protocol.storage.Privilege.CreateBuilder();
              if (HasPrivilege) {
                subBuilder.MergeFrom(Privilege);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Privilege = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasTableId {
       get { return result.HasTableId; }
      }
      public global::bnet.protocol.storage.TableId TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTableId = true;
        result.tableId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTableId &&
            result.tableId_ != global::bnet.protocol.storage.TableId.DefaultInstance) {
            result.tableId_ = global::bnet.protocol.storage.TableId.CreateBuilder(result.tableId_).MergeFrom(value).BuildPartial();
        } else {
          result.tableId_ = value;
        }
        result.hasTableId = true;
        return this;
      }
      public Builder ClearTableId() {
        result.hasTableId = false;
        result.tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
        return this;
      }
      
      public bool HasColumnId {
       get { return result.HasColumnId; }
      }
      public global::bnet.protocol.storage.ColumnId ColumnId {
        get { return result.ColumnId; }
        set { SetColumnId(value); }
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasColumnId = true;
        result.columnId_ = value;
        return this;
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasColumnId = true;
        result.columnId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasColumnId &&
            result.columnId_ != global::bnet.protocol.storage.ColumnId.DefaultInstance) {
            result.columnId_ = global::bnet.protocol.storage.ColumnId.CreateBuilder(result.columnId_).MergeFrom(value).BuildPartial();
        } else {
          result.columnId_ = value;
        }
        result.hasColumnId = true;
        return this;
      }
      public Builder ClearColumnId() {
        result.hasColumnId = false;
        result.columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
        return this;
      }
      
      public bool HasRowId {
       get { return result.HasRowId; }
      }
      public global::bnet.protocol.storage.RowId RowId {
        get { return result.RowId; }
        set { SetRowId(value); }
      }
      public Builder SetRowId(global::bnet.protocol.storage.RowId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRowId = true;
        result.rowId_ = value;
        return this;
      }
      public Builder SetRowId(global::bnet.protocol.storage.RowId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasRowId = true;
        result.rowId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRowId(global::bnet.protocol.storage.RowId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasRowId &&
            result.rowId_ != global::bnet.protocol.storage.RowId.DefaultInstance) {
            result.rowId_ = global::bnet.protocol.storage.RowId.CreateBuilder(result.rowId_).MergeFrom(value).BuildPartial();
        } else {
          result.rowId_ = value;
        }
        result.hasRowId = true;
        return this;
      }
      public Builder ClearRowId() {
        result.hasRowId = false;
        result.rowId_ = global::bnet.protocol.storage.RowId.DefaultInstance;
        return this;
      }
      
      public bool HasRowKey {
        get { return result.HasRowKey; }
      }
      public pb::ByteString RowKey {
        get { return result.RowKey; }
        set { SetRowKey(value); }
      }
      public Builder SetRowKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRowKey = true;
        result.rowKey_ = value;
        return this;
      }
      public Builder ClearRowKey() {
        result.hasRowKey = false;
        result.rowKey_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVersion(ulong value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.storage.Command> RopsList {
        get { return result.rops_; }
      }
      public int RopsCount {
        get { return result.RopsCount; }
      }
      public global::bnet.protocol.storage.Command GetRops(int index) {
        return result.GetRops(index);
      }
      public Builder SetRops(int index, global::bnet.protocol.storage.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.rops_[index] = value;
        return this;
      }
      public Builder SetRops(int index, global::bnet.protocol.storage.Command.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.rops_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRops(global::bnet.protocol.storage.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.rops_.Add(value);
        return this;
      }
      public Builder AddRops(global::bnet.protocol.storage.Command.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.rops_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRops(scg::IEnumerable<global::bnet.protocol.storage.Command> values) {
        base.AddRange(values, result.rops_);
        return this;
      }
      public Builder ClearRops() {
        result.rops_.Clear();
        return this;
      }
      
      public bool HasMutateVersion {
        get { return result.HasMutateVersion; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MutateVersion {
        get { return result.MutateVersion; }
        set { SetMutateVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMutateVersion(ulong value) {
        result.hasMutateVersion = true;
        result.mutateVersion_ = value;
        return this;
      }
      public Builder ClearMutateVersion() {
        result.hasMutateVersion = false;
        result.mutateVersion_ = 0;
        return this;
      }
      
      public bool HasPrivilege {
       get { return result.HasPrivilege; }
      }
      public global::bnet.protocol.storage.Privilege Privilege {
        get { return result.Privilege; }
        set { SetPrivilege(value); }
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPrivilege = true;
        result.privilege_ = value;
        return this;
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPrivilege = true;
        result.privilege_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPrivilege &&
            result.privilege_ != global::bnet.protocol.storage.Privilege.DefaultInstance) {
            result.privilege_ = global::bnet.protocol.storage.Privilege.CreateBuilder(result.privilege_).MergeFrom(value).BuildPartial();
        } else {
          result.privilege_ = value;
        }
        result.hasPrivilege = true;
        return this;
      }
      public Builder ClearPrivilege() {
        result.hasPrivilege = false;
        result.privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
        return this;
      }
    }
    static Operation() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class Cell : pb::GeneratedMessage<Cell, Cell.Builder> {
    private static readonly Cell defaultInstance = new Builder().BuildPartial();
    public static Cell DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Cell DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Cell ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Cell__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Cell, Cell.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_Cell__FieldAccessorTable; }
    }
    
    public const int ColumnIdFieldNumber = 1;
    private bool hasColumnId;
    private global::bnet.protocol.storage.ColumnId columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
    public bool HasColumnId {
      get { return hasColumnId; }
    }
    public global::bnet.protocol.storage.ColumnId ColumnId {
      get { return columnId_; }
    }
    
    public const int RowIdFieldNumber = 2;
    private bool hasRowId;
    private global::bnet.protocol.storage.RowId rowId_ = global::bnet.protocol.storage.RowId.DefaultInstance;
    public bool HasRowId {
      get { return hasRowId; }
    }
    public global::bnet.protocol.storage.RowId RowId {
      get { return rowId_; }
    }
    
    public const int RowKeyFieldNumber = 3;
    private bool hasRowKey;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    public bool HasRowKey {
      get { return hasRowKey; }
    }
    public pb::ByteString RowKey {
      get { return rowKey_; }
    }
    
    public const int VersionFieldNumber = 4;
    private bool hasVersion;
    private ulong version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Version {
      get { return version_; }
    }
    
    public const int DataFieldNumber = 5;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasColumnId) return false;
        if (!hasRowId) return false;
        if (!ColumnId.IsInitialized) return false;
        if (!RowId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasColumnId) {
        output.WriteMessage(1, ColumnId);
      }
      if (HasRowId) {
        output.WriteMessage(2, RowId);
      }
      if (HasRowKey) {
        output.WriteBytes(3, RowKey);
      }
      if (HasVersion) {
        output.WriteFixed64(4, Version);
      }
      if (HasData) {
        output.WriteBytes(5, Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasColumnId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ColumnId);
        }
        if (HasRowId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, RowId);
        }
        if (HasRowKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, RowKey);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeFixed64Size(4, Version);
        }
        if (HasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Cell ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Cell ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Cell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Cell ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cell ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Cell prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Cell, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Cell result = new Cell();
      
      protected override Cell MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Cell();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.Cell.Descriptor; }
      }
      
      public override Cell DefaultInstanceForType {
        get { return global::bnet.protocol.storage.Cell.DefaultInstance; }
      }
      
      public override Cell BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Cell returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Cell) {
          return MergeFrom((Cell) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Cell other) {
        if (other == global::bnet.protocol.storage.Cell.DefaultInstance) return this;
        if (other.HasColumnId) {
          MergeColumnId(other.ColumnId);
        }
        if (other.HasRowId) {
          MergeRowId(other.RowId);
        }
        if (other.HasRowKey) {
          RowKey = other.RowKey;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.storage.ColumnId.Builder subBuilder = global::bnet.protocol.storage.ColumnId.CreateBuilder();
              if (HasColumnId) {
                subBuilder.MergeFrom(ColumnId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ColumnId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.RowId.Builder subBuilder = global::bnet.protocol.storage.RowId.CreateBuilder();
              if (HasRowId) {
                subBuilder.MergeFrom(RowId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RowId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              RowKey = input.ReadBytes();
              break;
            }
            case 33: {
              Version = input.ReadFixed64();
              break;
            }
            case 42: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      
      
      public bool HasColumnId {
       get { return result.HasColumnId; }
      }
      public global::bnet.protocol.storage.ColumnId ColumnId {
        get { return result.ColumnId; }
        set { SetColumnId(value); }
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasColumnId = true;
        result.columnId_ = value;
        return this;
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasColumnId = true;
        result.columnId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasColumnId &&
            result.columnId_ != global::bnet.protocol.storage.ColumnId.DefaultInstance) {
            result.columnId_ = global::bnet.protocol.storage.ColumnId.CreateBuilder(result.columnId_).MergeFrom(value).BuildPartial();
        } else {
          result.columnId_ = value;
        }
        result.hasColumnId = true;
        return this;
      }
      public Builder ClearColumnId() {
        result.hasColumnId = false;
        result.columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
        return this;
      }
      
      public bool HasRowId {
       get { return result.HasRowId; }
      }
      public global::bnet.protocol.storage.RowId RowId {
        get { return result.RowId; }
        set { SetRowId(value); }
      }
      public Builder SetRowId(global::bnet.protocol.storage.RowId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRowId = true;
        result.rowId_ = value;
        return this;
      }
      public Builder SetRowId(global::bnet.protocol.storage.RowId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasRowId = true;
        result.rowId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRowId(global::bnet.protocol.storage.RowId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasRowId &&
            result.rowId_ != global::bnet.protocol.storage.RowId.DefaultInstance) {
            result.rowId_ = global::bnet.protocol.storage.RowId.CreateBuilder(result.rowId_).MergeFrom(value).BuildPartial();
        } else {
          result.rowId_ = value;
        }
        result.hasRowId = true;
        return this;
      }
      public Builder ClearRowId() {
        result.hasRowId = false;
        result.rowId_ = global::bnet.protocol.storage.RowId.DefaultInstance;
        return this;
      }
      
      public bool HasRowKey {
        get { return result.HasRowKey; }
      }
      public pb::ByteString RowKey {
        get { return result.RowKey; }
        set { SetRowKey(value); }
      }
      public Builder SetRowKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRowKey = true;
        result.rowKey_ = value;
        return this;
      }
      public Builder ClearRowKey() {
        result.hasRowKey = false;
        result.rowKey_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVersion(ulong value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.HasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Cell() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class OperationResult : pb::GeneratedMessage<OperationResult, OperationResult.Builder> {
    private static readonly OperationResult defaultInstance = new Builder().BuildPartial();
    public static OperationResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OperationResult DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OperationResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OperationResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OperationResult, OperationResult.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OperationResult__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_ = 0;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int TableIdFieldNumber = 2;
    private bool hasTableId;
    private global::bnet.protocol.storage.TableId tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public global::bnet.protocol.storage.TableId TableId {
      get { return tableId_; }
    }
    
    public const int DataFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.storage.Cell> data_ = new pbc::PopsicleList<global::bnet.protocol.storage.Cell>();
    public scg::IList<global::bnet.protocol.storage.Cell> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::bnet.protocol.storage.Cell GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableId) return false;
        if (!TableId.IsInitialized) return false;
        foreach (global::bnet.protocol.storage.Cell element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasErrorCode) {
        output.WriteUInt32(1, ErrorCode);
      }
      if (HasTableId) {
        output.WriteMessage(2, TableId);
      }
      foreach (global::bnet.protocol.storage.Cell element in DataList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        if (HasTableId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, TableId);
        }
        foreach (global::bnet.protocol.storage.Cell element in DataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OperationResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OperationResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OperationResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OperationResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OperationResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OperationResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OperationResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OperationResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OperationResult ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OperationResult ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OperationResult prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OperationResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OperationResult result = new OperationResult();
      
      protected override OperationResult MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OperationResult();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.OperationResult.Descriptor; }
      }
      
      public override OperationResult DefaultInstanceForType {
        get { return global::bnet.protocol.storage.OperationResult.DefaultInstance; }
      }
      
      public override OperationResult BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.data_.MakeReadOnly();
        OperationResult returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OperationResult) {
          return MergeFrom((OperationResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OperationResult other) {
        if (other == global::bnet.protocol.storage.OperationResult.DefaultInstance) return this;
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasTableId) {
          MergeTableId(other.TableId);
        }
        if (other.data_.Count != 0) {
          base.AddRange(other.data_, result.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ErrorCode = input.ReadUInt32();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.TableId.Builder subBuilder = global::bnet.protocol.storage.TableId.CreateBuilder();
              if (HasTableId) {
                subBuilder.MergeFrom(TableId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TableId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.storage.Cell.Builder subBuilder = global::bnet.protocol.storage.Cell.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddData(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasErrorCode {
        get { return result.HasErrorCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCode(uint value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasTableId {
       get { return result.HasTableId; }
      }
      public global::bnet.protocol.storage.TableId TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTableId = true;
        result.tableId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTableId &&
            result.tableId_ != global::bnet.protocol.storage.TableId.DefaultInstance) {
            result.tableId_ = global::bnet.protocol.storage.TableId.CreateBuilder(result.tableId_).MergeFrom(value).BuildPartial();
        } else {
          result.tableId_ = value;
        }
        result.hasTableId = true;
        return this;
      }
      public Builder ClearTableId() {
        result.hasTableId = false;
        result.tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.storage.Cell> DataList {
        get { return result.data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::bnet.protocol.storage.Cell GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::bnet.protocol.storage.Cell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::bnet.protocol.storage.Cell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::bnet.protocol.storage.Cell value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::bnet.protocol.storage.Cell.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::bnet.protocol.storage.Cell> values) {
        base.AddRange(values, result.data_);
        return this;
      }
      public Builder ClearData() {
        result.data_.Clear();
        return this;
      }
    }
    static OperationResult() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class OpenTableRequest : pb::GeneratedMessage<OpenTableRequest, OpenTableRequest.Builder> {
    private static readonly OpenTableRequest defaultInstance = new Builder().BuildPartial();
    public static OpenTableRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OpenTableRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OpenTableRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenTableRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OpenTableRequest, OpenTableRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenTableRequest__FieldAccessorTable; }
    }
    
    public const int SchemaFieldNumber = 1;
    private bool hasSchema;
    private string schema_ = "DEFAULT";
    public bool HasSchema {
      get { return hasSchema; }
    }
    public string Schema {
      get { return schema_; }
    }
    
    public const int PrivilegeFieldNumber = 2;
    private bool hasPrivilege;
    private global::bnet.protocol.storage.Privilege privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
    public bool HasPrivilege {
      get { return hasPrivilege; }
    }
    public global::bnet.protocol.storage.Privilege Privilege {
      get { return privilege_; }
    }
    
    public const int TableIdFieldNumber = 3;
    private bool hasTableId;
    private global::bnet.protocol.storage.TableId tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public global::bnet.protocol.storage.TableId TableId {
      get { return tableId_; }
    }
    
    public const int AgentIdFieldNumber = 4;
    private bool hasAgentId;
    private global::bnet.protocol.EntityId agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bnet.protocol.EntityId AgentId {
      get { return agentId_; }
    }
    
    public const int ProcessNameFieldNumber = 5;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableId) return false;
        if (!TableId.IsInitialized) return false;
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSchema) {
        output.WriteString(1, Schema);
      }
      if (HasPrivilege) {
        output.WriteMessage(2, Privilege);
      }
      if (HasTableId) {
        output.WriteMessage(3, TableId);
      }
      if (HasAgentId) {
        output.WriteMessage(4, AgentId);
      }
      if (HasProcessName) {
        output.WriteString(5, ProcessName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSchema) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Schema);
        }
        if (HasPrivilege) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Privilege);
        }
        if (HasTableId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, TableId);
        }
        if (HasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, AgentId);
        }
        if (HasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ProcessName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OpenTableRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OpenTableRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OpenTableRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenTableRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OpenTableRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OpenTableRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OpenTableRequest result = new OpenTableRequest();
      
      protected override OpenTableRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OpenTableRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.OpenTableRequest.Descriptor; }
      }
      
      public override OpenTableRequest DefaultInstanceForType {
        get { return global::bnet.protocol.storage.OpenTableRequest.DefaultInstance; }
      }
      
      public override OpenTableRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OpenTableRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OpenTableRequest) {
          return MergeFrom((OpenTableRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OpenTableRequest other) {
        if (other == global::bnet.protocol.storage.OpenTableRequest.DefaultInstance) return this;
        if (other.HasSchema) {
          Schema = other.Schema;
        }
        if (other.HasPrivilege) {
          MergePrivilege(other.Privilege);
        }
        if (other.HasTableId) {
          MergeTableId(other.TableId);
        }
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Schema = input.ReadString();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.Privilege.Builder subBuilder = global::bnet.protocol.storage.Privilege.CreateBuilder();
              if (HasPrivilege) {
                subBuilder.MergeFrom(Privilege);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Privilege = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.storage.TableId.Builder subBuilder = global::bnet.protocol.storage.TableId.CreateBuilder();
              if (HasTableId) {
                subBuilder.MergeFrom(TableId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TableId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              ProcessName = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasSchema {
        get { return result.HasSchema; }
      }
      public string Schema {
        get { return result.Schema; }
        set { SetSchema(value); }
      }
      public Builder SetSchema(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSchema = true;
        result.schema_ = value;
        return this;
      }
      public Builder ClearSchema() {
        result.hasSchema = false;
        result.schema_ = "DEFAULT";
        return this;
      }
      
      public bool HasPrivilege {
       get { return result.HasPrivilege; }
      }
      public global::bnet.protocol.storage.Privilege Privilege {
        get { return result.Privilege; }
        set { SetPrivilege(value); }
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPrivilege = true;
        result.privilege_ = value;
        return this;
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPrivilege = true;
        result.privilege_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPrivilege &&
            result.privilege_ != global::bnet.protocol.storage.Privilege.DefaultInstance) {
            result.privilege_ = global::bnet.protocol.storage.Privilege.CreateBuilder(result.privilege_).MergeFrom(value).BuildPartial();
        } else {
          result.privilege_ = value;
        }
        result.hasPrivilege = true;
        return this;
      }
      public Builder ClearPrivilege() {
        result.hasPrivilege = false;
        result.privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
        return this;
      }
      
      public bool HasTableId {
       get { return result.HasTableId; }
      }
      public global::bnet.protocol.storage.TableId TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTableId = true;
        result.tableId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTableId &&
            result.tableId_ != global::bnet.protocol.storage.TableId.DefaultInstance) {
            result.tableId_ = global::bnet.protocol.storage.TableId.CreateBuilder(result.tableId_).MergeFrom(value).BuildPartial();
        } else {
          result.tableId_ = value;
        }
        result.hasTableId = true;
        return this;
      }
      public Builder ClearTableId() {
        result.hasTableId = false;
        result.tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
        return this;
      }
      
      public bool HasAgentId {
       get { return result.HasAgentId; }
      }
      public global::bnet.protocol.EntityId AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentId &&
            result.agentId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.agentId_ = global::bnet.protocol.EntityId.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        result.hasAgentId = false;
        result.agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasProcessName {
        get { return result.HasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
    }
    static OpenTableRequest() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class OpenTableResponse : pb::GeneratedMessage<OpenTableResponse, OpenTableResponse.Builder> {
    private static readonly OpenTableResponse defaultInstance = new Builder().BuildPartial();
    public static OpenTableResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OpenTableResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OpenTableResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenTableResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OpenTableResponse, OpenTableResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenTableResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OpenTableResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OpenTableResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OpenTableResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenTableResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OpenTableResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OpenTableResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OpenTableResponse result = new OpenTableResponse();
      
      protected override OpenTableResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OpenTableResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.OpenTableResponse.Descriptor; }
      }
      
      public override OpenTableResponse DefaultInstanceForType {
        get { return global::bnet.protocol.storage.OpenTableResponse.DefaultInstance; }
      }
      
      public override OpenTableResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OpenTableResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OpenTableResponse) {
          return MergeFrom((OpenTableResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OpenTableResponse other) {
        if (other == global::bnet.protocol.storage.OpenTableResponse.DefaultInstance) return this;
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
          }
        }
      }
      
    }
    static OpenTableResponse() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class OpenColumnRequest : pb::GeneratedMessage<OpenColumnRequest, OpenColumnRequest.Builder> {
    private static readonly OpenColumnRequest defaultInstance = new Builder().BuildPartial();
    public static OpenColumnRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OpenColumnRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OpenColumnRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenColumnRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OpenColumnRequest, OpenColumnRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenColumnRequest__FieldAccessorTable; }
    }
    
    public const int SchemaFieldNumber = 1;
    private bool hasSchema;
    private string schema_ = "DEFAULT";
    public bool HasSchema {
      get { return hasSchema; }
    }
    public string Schema {
      get { return schema_; }
    }
    
    public const int PrivilegeFieldNumber = 2;
    private bool hasPrivilege;
    private global::bnet.protocol.storage.Privilege privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
    public bool HasPrivilege {
      get { return hasPrivilege; }
    }
    public global::bnet.protocol.storage.Privilege Privilege {
      get { return privilege_; }
    }
    
    public const int TableIdFieldNumber = 4;
    private bool hasTableId;
    private global::bnet.protocol.storage.TableId tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public global::bnet.protocol.storage.TableId TableId {
      get { return tableId_; }
    }
    
    public const int ColumnIdFieldNumber = 5;
    private bool hasColumnId;
    private global::bnet.protocol.storage.ColumnId columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
    public bool HasColumnId {
      get { return hasColumnId; }
    }
    public global::bnet.protocol.storage.ColumnId ColumnId {
      get { return columnId_; }
    }
    
    public const int ProtoTypeFieldNumber = 6;
    private bool hasProtoType;
    private string protoType_ = "";
    public bool HasProtoType {
      get { return hasProtoType; }
    }
    public string ProtoType {
      get { return protoType_; }
    }
    
    public const int AgentIdFieldNumber = 7;
    private bool hasAgentId;
    private global::bnet.protocol.EntityId agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bnet.protocol.EntityId AgentId {
      get { return agentId_; }
    }
    
    public const int ProcessNameFieldNumber = 8;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableId) return false;
        if (!hasColumnId) return false;
        if (!TableId.IsInitialized) return false;
        if (!ColumnId.IsInitialized) return false;
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSchema) {
        output.WriteString(1, Schema);
      }
      if (HasPrivilege) {
        output.WriteMessage(2, Privilege);
      }
      if (HasTableId) {
        output.WriteMessage(4, TableId);
      }
      if (HasColumnId) {
        output.WriteMessage(5, ColumnId);
      }
      if (HasProtoType) {
        output.WriteString(6, ProtoType);
      }
      if (HasAgentId) {
        output.WriteMessage(7, AgentId);
      }
      if (HasProcessName) {
        output.WriteString(8, ProcessName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSchema) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Schema);
        }
        if (HasPrivilege) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Privilege);
        }
        if (HasTableId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, TableId);
        }
        if (HasColumnId) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ColumnId);
        }
        if (HasProtoType) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ProtoType);
        }
        if (HasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, AgentId);
        }
        if (HasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ProcessName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OpenColumnRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OpenColumnRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenColumnRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OpenColumnRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OpenColumnRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OpenColumnRequest result = new OpenColumnRequest();
      
      protected override OpenColumnRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OpenColumnRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.OpenColumnRequest.Descriptor; }
      }
      
      public override OpenColumnRequest DefaultInstanceForType {
        get { return global::bnet.protocol.storage.OpenColumnRequest.DefaultInstance; }
      }
      
      public override OpenColumnRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OpenColumnRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OpenColumnRequest) {
          return MergeFrom((OpenColumnRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OpenColumnRequest other) {
        if (other == global::bnet.protocol.storage.OpenColumnRequest.DefaultInstance) return this;
        if (other.HasSchema) {
          Schema = other.Schema;
        }
        if (other.HasPrivilege) {
          MergePrivilege(other.Privilege);
        }
        if (other.HasTableId) {
          MergeTableId(other.TableId);
        }
        if (other.HasColumnId) {
          MergeColumnId(other.ColumnId);
        }
        if (other.HasProtoType) {
          ProtoType = other.ProtoType;
        }
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Schema = input.ReadString();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.Privilege.Builder subBuilder = global::bnet.protocol.storage.Privilege.CreateBuilder();
              if (HasPrivilege) {
                subBuilder.MergeFrom(Privilege);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Privilege = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.storage.TableId.Builder subBuilder = global::bnet.protocol.storage.TableId.CreateBuilder();
              if (HasTableId) {
                subBuilder.MergeFrom(TableId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TableId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.storage.ColumnId.Builder subBuilder = global::bnet.protocol.storage.ColumnId.CreateBuilder();
              if (HasColumnId) {
                subBuilder.MergeFrom(ColumnId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ColumnId = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              ProtoType = input.ReadString();
              break;
            }
            case 58: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              ProcessName = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasSchema {
        get { return result.HasSchema; }
      }
      public string Schema {
        get { return result.Schema; }
        set { SetSchema(value); }
      }
      public Builder SetSchema(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSchema = true;
        result.schema_ = value;
        return this;
      }
      public Builder ClearSchema() {
        result.hasSchema = false;
        result.schema_ = "DEFAULT";
        return this;
      }
      
      public bool HasPrivilege {
       get { return result.HasPrivilege; }
      }
      public global::bnet.protocol.storage.Privilege Privilege {
        get { return result.Privilege; }
        set { SetPrivilege(value); }
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPrivilege = true;
        result.privilege_ = value;
        return this;
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPrivilege = true;
        result.privilege_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPrivilege &&
            result.privilege_ != global::bnet.protocol.storage.Privilege.DefaultInstance) {
            result.privilege_ = global::bnet.protocol.storage.Privilege.CreateBuilder(result.privilege_).MergeFrom(value).BuildPartial();
        } else {
          result.privilege_ = value;
        }
        result.hasPrivilege = true;
        return this;
      }
      public Builder ClearPrivilege() {
        result.hasPrivilege = false;
        result.privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
        return this;
      }
      
      public bool HasTableId {
       get { return result.HasTableId; }
      }
      public global::bnet.protocol.storage.TableId TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder SetTableId(global::bnet.protocol.storage.TableId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTableId = true;
        result.tableId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTableId(global::bnet.protocol.storage.TableId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTableId &&
            result.tableId_ != global::bnet.protocol.storage.TableId.DefaultInstance) {
            result.tableId_ = global::bnet.protocol.storage.TableId.CreateBuilder(result.tableId_).MergeFrom(value).BuildPartial();
        } else {
          result.tableId_ = value;
        }
        result.hasTableId = true;
        return this;
      }
      public Builder ClearTableId() {
        result.hasTableId = false;
        result.tableId_ = global::bnet.protocol.storage.TableId.DefaultInstance;
        return this;
      }
      
      public bool HasColumnId {
       get { return result.HasColumnId; }
      }
      public global::bnet.protocol.storage.ColumnId ColumnId {
        get { return result.ColumnId; }
        set { SetColumnId(value); }
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasColumnId = true;
        result.columnId_ = value;
        return this;
      }
      public Builder SetColumnId(global::bnet.protocol.storage.ColumnId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasColumnId = true;
        result.columnId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColumnId(global::bnet.protocol.storage.ColumnId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasColumnId &&
            result.columnId_ != global::bnet.protocol.storage.ColumnId.DefaultInstance) {
            result.columnId_ = global::bnet.protocol.storage.ColumnId.CreateBuilder(result.columnId_).MergeFrom(value).BuildPartial();
        } else {
          result.columnId_ = value;
        }
        result.hasColumnId = true;
        return this;
      }
      public Builder ClearColumnId() {
        result.hasColumnId = false;
        result.columnId_ = global::bnet.protocol.storage.ColumnId.DefaultInstance;
        return this;
      }
      
      public bool HasProtoType {
        get { return result.HasProtoType; }
      }
      public string ProtoType {
        get { return result.ProtoType; }
        set { SetProtoType(value); }
      }
      public Builder SetProtoType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProtoType = true;
        result.protoType_ = value;
        return this;
      }
      public Builder ClearProtoType() {
        result.hasProtoType = false;
        result.protoType_ = "";
        return this;
      }
      
      public bool HasAgentId {
       get { return result.HasAgentId; }
      }
      public global::bnet.protocol.EntityId AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentId &&
            result.agentId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.agentId_ = global::bnet.protocol.EntityId.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        result.hasAgentId = false;
        result.agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasProcessName {
        get { return result.HasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
    }
    static OpenColumnRequest() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class OpenColumnResponse : pb::GeneratedMessage<OpenColumnResponse, OpenColumnResponse.Builder> {
    private static readonly OpenColumnResponse defaultInstance = new Builder().BuildPartial();
    public static OpenColumnResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OpenColumnResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override OpenColumnResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenColumnResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OpenColumnResponse, OpenColumnResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_OpenColumnResponse__FieldAccessorTable; }
    }
    
    public const int ServerFieldOpsFieldNumber = 2;
    private bool hasServerFieldOps;
    private bool serverFieldOps_ = false;
    public bool HasServerFieldOps {
      get { return hasServerFieldOps; }
    }
    public bool ServerFieldOps {
      get { return serverFieldOps_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasServerFieldOps) {
        output.WriteBool(2, ServerFieldOps);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasServerFieldOps) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, ServerFieldOps);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OpenColumnResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OpenColumnResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OpenColumnResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OpenColumnResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OpenColumnResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<OpenColumnResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      OpenColumnResponse result = new OpenColumnResponse();
      
      protected override OpenColumnResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new OpenColumnResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.OpenColumnResponse.Descriptor; }
      }
      
      public override OpenColumnResponse DefaultInstanceForType {
        get { return global::bnet.protocol.storage.OpenColumnResponse.DefaultInstance; }
      }
      
      public override OpenColumnResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        OpenColumnResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OpenColumnResponse) {
          return MergeFrom((OpenColumnResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OpenColumnResponse other) {
        if (other == global::bnet.protocol.storage.OpenColumnResponse.DefaultInstance) return this;
        if (other.HasServerFieldOps) {
          ServerFieldOps = other.ServerFieldOps;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 16: {
              ServerFieldOps = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasServerFieldOps {
        get { return result.HasServerFieldOps; }
      }
      public bool ServerFieldOps {
        get { return result.ServerFieldOps; }
        set { SetServerFieldOps(value); }
      }
      public Builder SetServerFieldOps(bool value) {
        result.hasServerFieldOps = true;
        result.serverFieldOps_ = value;
        return this;
      }
      public Builder ClearServerFieldOps() {
        result.hasServerFieldOps = false;
        result.serverFieldOps_ = false;
        return this;
      }
    }
    static OpenColumnResponse() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class ExecuteRequest : pb::GeneratedMessage<ExecuteRequest, ExecuteRequest.Builder> {
    private static readonly ExecuteRequest defaultInstance = new Builder().BuildPartial();
    public static ExecuteRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ExecuteRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ExecuteRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteRequest, ExecuteRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ExecuteRequest__FieldAccessorTable; }
    }
    
    public const int SchemaFieldNumber = 1;
    private bool hasSchema;
    private string schema_ = "DEFAULT";
    public bool HasSchema {
      get { return hasSchema; }
    }
    public string Schema {
      get { return schema_; }
    }
    
    public const int PrivilegeFieldNumber = 2;
    private bool hasPrivilege;
    private global::bnet.protocol.storage.Privilege privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
    public bool HasPrivilege {
      get { return hasPrivilege; }
    }
    public global::bnet.protocol.storage.Privilege Privilege {
      get { return privilege_; }
    }
    
    public const int ReadOnlyFieldNumber = 3;
    private bool hasReadOnly;
    private bool readOnly_ = false;
    public bool HasReadOnly {
      get { return hasReadOnly; }
    }
    public bool ReadOnly {
      get { return readOnly_; }
    }
    
    public const int WantsRowKeyFieldNumber = 4;
    private bool hasWantsRowKey;
    private bool wantsRowKey_ = false;
    public bool HasWantsRowKey {
      get { return hasWantsRowKey; }
    }
    public bool WantsRowKey {
      get { return wantsRowKey_; }
    }
    
    public const int WantsColumnNameFieldNumber = 5;
    private bool hasWantsColumnName;
    private bool wantsColumnName_ = false;
    public bool HasWantsColumnName {
      get { return hasWantsColumnName; }
    }
    public bool WantsColumnName {
      get { return wantsColumnName_; }
    }
    
    public const int MaxDataSizeFieldNumber = 6;
    private bool hasMaxDataSize;
    private uint maxDataSize_ = 16777215;
    public bool HasMaxDataSize {
      get { return hasMaxDataSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxDataSize {
      get { return maxDataSize_; }
    }
    
    public const int OperationsFieldNumber = 7;
    private pbc::PopsicleList<global::bnet.protocol.storage.Operation> operations_ = new pbc::PopsicleList<global::bnet.protocol.storage.Operation>();
    public scg::IList<global::bnet.protocol.storage.Operation> OperationsList {
      get { return operations_; }
    }
    public int OperationsCount {
      get { return operations_.Count; }
    }
    public global::bnet.protocol.storage.Operation GetOperations(int index) {
      return operations_[index];
    }
    
    public const int TimeoutFieldNumber = 12;
    private bool hasTimeout;
    private uint timeout_ = 0;
    public bool HasTimeout {
      get { return hasTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timeout {
      get { return timeout_; }
    }
    
    public const int AgentIdFieldNumber = 9;
    private bool hasAgentId;
    private global::bnet.protocol.EntityId agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bnet.protocol.EntityId AgentId {
      get { return agentId_; }
    }
    
    public const int QueryNameFieldNumber = 10;
    private bool hasQueryName;
    private string queryName_ = "NoName";
    public bool HasQueryName {
      get { return hasQueryName; }
    }
    public string QueryName {
      get { return queryName_; }
    }
    
    public const int ProcessNameFieldNumber = 11;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.storage.Operation element in OperationsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSchema) {
        output.WriteString(1, Schema);
      }
      if (HasPrivilege) {
        output.WriteMessage(2, Privilege);
      }
      if (HasReadOnly) {
        output.WriteBool(3, ReadOnly);
      }
      if (HasWantsRowKey) {
        output.WriteBool(4, WantsRowKey);
      }
      if (HasWantsColumnName) {
        output.WriteBool(5, WantsColumnName);
      }
      if (HasMaxDataSize) {
        output.WriteUInt32(6, MaxDataSize);
      }
      foreach (global::bnet.protocol.storage.Operation element in OperationsList) {
        output.WriteMessage(7, element);
      }
      if (HasAgentId) {
        output.WriteMessage(9, AgentId);
      }
      if (HasQueryName) {
        output.WriteString(10, QueryName);
      }
      if (HasProcessName) {
        output.WriteString(11, ProcessName);
      }
      if (HasTimeout) {
        output.WriteUInt32(12, Timeout);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSchema) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Schema);
        }
        if (HasPrivilege) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Privilege);
        }
        if (HasReadOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, ReadOnly);
        }
        if (HasWantsRowKey) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, WantsRowKey);
        }
        if (HasWantsColumnName) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, WantsColumnName);
        }
        if (HasMaxDataSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, MaxDataSize);
        }
        foreach (global::bnet.protocol.storage.Operation element in OperationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (HasTimeout) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, Timeout);
        }
        if (HasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, AgentId);
        }
        if (HasQueryName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, QueryName);
        }
        if (HasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ProcessName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ExecuteRequest result = new ExecuteRequest();
      
      protected override ExecuteRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ExecuteRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.ExecuteRequest.Descriptor; }
      }
      
      public override ExecuteRequest DefaultInstanceForType {
        get { return global::bnet.protocol.storage.ExecuteRequest.DefaultInstance; }
      }
      
      public override ExecuteRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.operations_.MakeReadOnly();
        ExecuteRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteRequest) {
          return MergeFrom((ExecuteRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteRequest other) {
        if (other == global::bnet.protocol.storage.ExecuteRequest.DefaultInstance) return this;
        if (other.HasSchema) {
          Schema = other.Schema;
        }
        if (other.HasPrivilege) {
          MergePrivilege(other.Privilege);
        }
        if (other.HasReadOnly) {
          ReadOnly = other.ReadOnly;
        }
        if (other.HasWantsRowKey) {
          WantsRowKey = other.WantsRowKey;
        }
        if (other.HasWantsColumnName) {
          WantsColumnName = other.WantsColumnName;
        }
        if (other.HasMaxDataSize) {
          MaxDataSize = other.MaxDataSize;
        }
        if (other.operations_.Count != 0) {
          base.AddRange(other.operations_, result.operations_);
        }
        if (other.HasTimeout) {
          Timeout = other.Timeout;
        }
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        if (other.HasQueryName) {
          QueryName = other.QueryName;
        }
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Schema = input.ReadString();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.Privilege.Builder subBuilder = global::bnet.protocol.storage.Privilege.CreateBuilder();
              if (HasPrivilege) {
                subBuilder.MergeFrom(Privilege);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Privilege = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              ReadOnly = input.ReadBool();
              break;
            }
            case 32: {
              WantsRowKey = input.ReadBool();
              break;
            }
            case 40: {
              WantsColumnName = input.ReadBool();
              break;
            }
            case 48: {
              MaxDataSize = input.ReadUInt32();
              break;
            }
            case 58: {
              global::bnet.protocol.storage.Operation.Builder subBuilder = global::bnet.protocol.storage.Operation.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddOperations(subBuilder.BuildPartial());
              break;
            }
            case 74: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              QueryName = input.ReadString();
              break;
            }
            case 90: {
              ProcessName = input.ReadString();
              break;
            }
            case 96: {
              Timeout = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSchema {
        get { return result.HasSchema; }
      }
      public string Schema {
        get { return result.Schema; }
        set { SetSchema(value); }
      }
      public Builder SetSchema(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSchema = true;
        result.schema_ = value;
        return this;
      }
      public Builder ClearSchema() {
        result.hasSchema = false;
        result.schema_ = "DEFAULT";
        return this;
      }
      
      public bool HasPrivilege {
       get { return result.HasPrivilege; }
      }
      public global::bnet.protocol.storage.Privilege Privilege {
        get { return result.Privilege; }
        set { SetPrivilege(value); }
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPrivilege = true;
        result.privilege_ = value;
        return this;
      }
      public Builder SetPrivilege(global::bnet.protocol.storage.Privilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPrivilege = true;
        result.privilege_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrivilege(global::bnet.protocol.storage.Privilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPrivilege &&
            result.privilege_ != global::bnet.protocol.storage.Privilege.DefaultInstance) {
            result.privilege_ = global::bnet.protocol.storage.Privilege.CreateBuilder(result.privilege_).MergeFrom(value).BuildPartial();
        } else {
          result.privilege_ = value;
        }
        result.hasPrivilege = true;
        return this;
      }
      public Builder ClearPrivilege() {
        result.hasPrivilege = false;
        result.privilege_ = global::bnet.protocol.storage.Privilege.DefaultInstance;
        return this;
      }
      
      public bool HasReadOnly {
        get { return result.HasReadOnly; }
      }
      public bool ReadOnly {
        get { return result.ReadOnly; }
        set { SetReadOnly(value); }
      }
      public Builder SetReadOnly(bool value) {
        result.hasReadOnly = true;
        result.readOnly_ = value;
        return this;
      }
      public Builder ClearReadOnly() {
        result.hasReadOnly = false;
        result.readOnly_ = false;
        return this;
      }
      
      public bool HasWantsRowKey {
        get { return result.HasWantsRowKey; }
      }
      public bool WantsRowKey {
        get { return result.WantsRowKey; }
        set { SetWantsRowKey(value); }
      }
      public Builder SetWantsRowKey(bool value) {
        result.hasWantsRowKey = true;
        result.wantsRowKey_ = value;
        return this;
      }
      public Builder ClearWantsRowKey() {
        result.hasWantsRowKey = false;
        result.wantsRowKey_ = false;
        return this;
      }
      
      public bool HasWantsColumnName {
        get { return result.HasWantsColumnName; }
      }
      public bool WantsColumnName {
        get { return result.WantsColumnName; }
        set { SetWantsColumnName(value); }
      }
      public Builder SetWantsColumnName(bool value) {
        result.hasWantsColumnName = true;
        result.wantsColumnName_ = value;
        return this;
      }
      public Builder ClearWantsColumnName() {
        result.hasWantsColumnName = false;
        result.wantsColumnName_ = false;
        return this;
      }
      
      public bool HasMaxDataSize {
        get { return result.HasMaxDataSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxDataSize {
        get { return result.MaxDataSize; }
        set { SetMaxDataSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxDataSize(uint value) {
        result.hasMaxDataSize = true;
        result.maxDataSize_ = value;
        return this;
      }
      public Builder ClearMaxDataSize() {
        result.hasMaxDataSize = false;
        result.maxDataSize_ = 16777215;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.storage.Operation> OperationsList {
        get { return result.operations_; }
      }
      public int OperationsCount {
        get { return result.OperationsCount; }
      }
      public global::bnet.protocol.storage.Operation GetOperations(int index) {
        return result.GetOperations(index);
      }
      public Builder SetOperations(int index, global::bnet.protocol.storage.Operation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.operations_[index] = value;
        return this;
      }
      public Builder SetOperations(int index, global::bnet.protocol.storage.Operation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.operations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOperations(global::bnet.protocol.storage.Operation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.operations_.Add(value);
        return this;
      }
      public Builder AddOperations(global::bnet.protocol.storage.Operation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.operations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOperations(scg::IEnumerable<global::bnet.protocol.storage.Operation> values) {
        base.AddRange(values, result.operations_);
        return this;
      }
      public Builder ClearOperations() {
        result.operations_.Clear();
        return this;
      }
      
      public bool HasTimeout {
        get { return result.HasTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timeout {
        get { return result.Timeout; }
        set { SetTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeout(uint value) {
        result.hasTimeout = true;
        result.timeout_ = value;
        return this;
      }
      public Builder ClearTimeout() {
        result.hasTimeout = false;
        result.timeout_ = 0;
        return this;
      }
      
      public bool HasAgentId {
       get { return result.HasAgentId; }
      }
      public global::bnet.protocol.EntityId AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAgentId &&
            result.agentId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.agentId_ = global::bnet.protocol.EntityId.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        result.hasAgentId = false;
        result.agentId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasQueryName {
        get { return result.HasQueryName; }
      }
      public string QueryName {
        get { return result.QueryName; }
        set { SetQueryName(value); }
      }
      public Builder SetQueryName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasQueryName = true;
        result.queryName_ = value;
        return this;
      }
      public Builder ClearQueryName() {
        result.hasQueryName = false;
        result.queryName_ = "NoName";
        return this;
      }
      
      public bool HasProcessName {
        get { return result.HasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
    }
    static ExecuteRequest() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  public sealed partial class ExecuteResponse : pb::GeneratedMessage<ExecuteResponse, ExecuteResponse.Builder> {
    private static readonly ExecuteResponse defaultInstance = new Builder().BuildPartial();
    public static ExecuteResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ExecuteResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ExecuteResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteResponse, ExecuteResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.storage.Storage.internal__static_bnet_protocol_storage_ExecuteResponse__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_ = 0;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int ResultsFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.storage.OperationResult> results_ = new pbc::PopsicleList<global::bnet.protocol.storage.OperationResult>();
    public scg::IList<global::bnet.protocol.storage.OperationResult> ResultsList {
      get { return results_; }
    }
    public int ResultsCount {
      get { return results_.Count; }
    }
    public global::bnet.protocol.storage.OperationResult GetResults(int index) {
      return results_[index];
    }
    
    public const int ErrorMessageFieldNumber = 3;
    private bool hasErrorMessage;
    private string errorMessage_ = "";
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public string ErrorMessage {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.storage.OperationResult element in ResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasErrorCode) {
        output.WriteUInt32(1, ErrorCode);
      }
      foreach (global::bnet.protocol.storage.OperationResult element in ResultsList) {
        output.WriteMessage(2, element);
      }
      if (HasErrorMessage) {
        output.WriteString(3, ErrorMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        foreach (global::bnet.protocol.storage.OperationResult element in ResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (HasErrorMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ErrorMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ExecuteResponse result = new ExecuteResponse();
      
      protected override ExecuteResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ExecuteResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.storage.ExecuteResponse.Descriptor; }
      }
      
      public override ExecuteResponse DefaultInstanceForType {
        get { return global::bnet.protocol.storage.ExecuteResponse.DefaultInstance; }
      }
      
      public override ExecuteResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.results_.MakeReadOnly();
        ExecuteResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteResponse) {
          return MergeFrom((ExecuteResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteResponse other) {
        if (other == global::bnet.protocol.storage.ExecuteResponse.DefaultInstance) return this;
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.results_.Count != 0) {
          base.AddRange(other.results_, result.results_);
        }
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ErrorCode = input.ReadUInt32();
              break;
            }
            case 18: {
              global::bnet.protocol.storage.OperationResult.Builder subBuilder = global::bnet.protocol.storage.OperationResult.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddResults(subBuilder.BuildPartial());
              break;
            }
            case 26: {
              ErrorMessage = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasErrorCode {
        get { return result.HasErrorCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCode(uint value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.storage.OperationResult> ResultsList {
        get { return result.results_; }
      }
      public int ResultsCount {
        get { return result.ResultsCount; }
      }
      public global::bnet.protocol.storage.OperationResult GetResults(int index) {
        return result.GetResults(index);
      }
      public Builder SetResults(int index, global::bnet.protocol.storage.OperationResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.results_[index] = value;
        return this;
      }
      public Builder SetResults(int index, global::bnet.protocol.storage.OperationResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.results_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResults(global::bnet.protocol.storage.OperationResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.results_.Add(value);
        return this;
      }
      public Builder AddResults(global::bnet.protocol.storage.OperationResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.results_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResults(scg::IEnumerable<global::bnet.protocol.storage.OperationResult> values) {
        base.AddRange(values, result.results_);
        return this;
      }
      public Builder ClearResults() {
        result.results_.Clear();
        return this;
      }
      
      public bool HasErrorMessage {
        get { return result.HasErrorMessage; }
      }
      public string ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        result.hasErrorMessage = false;
        result.errorMessage_ = "";
        return this;
      }
    }
    static ExecuteResponse() {
      object.ReferenceEquals(global::bnet.protocol.storage.Storage.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public abstract class StorageService : pb::IService {
    public abstract void Execute(
        pb::IRpcController controller,
        global::bnet.protocol.storage.ExecuteRequest request,
        global::System.Action<global::bnet.protocol.storage.ExecuteResponse> done);
    public abstract void OpenTable(
        pb::IRpcController controller,
        global::bnet.protocol.storage.OpenTableRequest request,
        global::System.Action<global::bnet.protocol.storage.OpenTableResponse> done);
    public abstract void OpenColumn(
        pb::IRpcController controller,
        global::bnet.protocol.storage.OpenColumnRequest request,
        global::System.Action<global::bnet.protocol.storage.OpenColumnResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Storage.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.Execute(controller, (global::bnet.protocol.storage.ExecuteRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.storage.ExecuteResponse>(
              done));
          return;
        case 1:
          this.OpenTable(controller, (global::bnet.protocol.storage.OpenTableRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.storage.OpenTableResponse>(
              done));
          return;
        case 2:
          this.OpenColumn(controller, (global::bnet.protocol.storage.OpenColumnRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.storage.OpenColumnResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.storage.ExecuteRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.storage.OpenTableRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.storage.OpenColumnRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.storage.ExecuteResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.storage.OpenTableResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.storage.OpenColumnResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    public class Stub : global::bnet.protocol.storage.StorageService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void Execute(
          pb::IRpcController controller,
          global::bnet.protocol.storage.ExecuteRequest request,
          global::System.Action<global::bnet.protocol.storage.ExecuteResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.storage.ExecuteResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.storage.ExecuteResponse, global::bnet.protocol.storage.ExecuteResponse.Builder>(done, global::bnet.protocol.storage.ExecuteResponse.DefaultInstance));
      }
      
      public override void OpenTable(
          pb::IRpcController controller,
          global::bnet.protocol.storage.OpenTableRequest request,
          global::System.Action<global::bnet.protocol.storage.OpenTableResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.storage.OpenTableResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.storage.OpenTableResponse, global::bnet.protocol.storage.OpenTableResponse.Builder>(done, global::bnet.protocol.storage.OpenTableResponse.DefaultInstance));
      }
      
      public override void OpenColumn(
          pb::IRpcController controller,
          global::bnet.protocol.storage.OpenColumnRequest request,
          global::System.Action<global::bnet.protocol.storage.OpenColumnResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.storage.OpenColumnResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.storage.OpenColumnResponse, global::bnet.protocol.storage.OpenColumnResponse.Builder>(done, global::bnet.protocol.storage.OpenColumnResponse.DefaultInstance));
      }
    }
  }
  #endregion
  
}
