// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.game_utilities {
  
  namespace Proto {
    
    public static partial class GameUtilities {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientRequest, global::bnet.protocol.game_utilities.ClientRequest.Builder> internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder> internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_CreateToonRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.CreateToonRequest, global::bnet.protocol.game_utilities.CreateToonRequest.Builder> internal__static_bnet_protocol_game_utilities_CreateToonRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_CreateToonResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.CreateToonResponse, global::bnet.protocol.game_utilities.CreateToonResponse.Builder> internal__static_bnet_protocol_game_utilities_CreateToonResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_DeleteToonRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.DeleteToonRequest, global::bnet.protocol.game_utilities.DeleteToonRequest.Builder> internal__static_bnet_protocol_game_utilities_DeleteToonRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_TransferToonRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.TransferToonRequest, global::bnet.protocol.game_utilities.TransferToonRequest.Builder> internal__static_bnet_protocol_game_utilities_TransferToonRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account, global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder> internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_SelectToonRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.SelectToonRequest, global::bnet.protocol.game_utilities.SelectToonRequest.Builder> internal__static_bnet_protocol_game_utilities_SelectToonRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest, global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Builder> internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PlayerVariablesRequest, global::bnet.protocol.game_utilities.PlayerVariablesRequest.Builder> internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameVariablesRequest, global::bnet.protocol.game_utilities.GameVariablesRequest.Builder> internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder> internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static GameUtilities() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CitzZXJ2aWNlL2dhbWVfdXRpbGl0aWVzL2dhbWVfdXRpbGl0aWVzLnByb3Rv" + 
            "EhxibmV0LnByb3RvY29sLmdhbWVfdXRpbGl0aWVzGiVzZXJ2aWNlL2dhbWVf" + 
            "bWFzdGVyL2dhbWVfbWFzdGVyLnByb3RvGiVzZXJ2aWNlL3NlcnZlcl9wb29s" + 
            "L3NlcnZlcl9wb29sLnByb3RvGhxsaWIvcHJvdG9jb2wvYXR0cmlidXRlLnBy" + 
            "b3RvGhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvGhFsaWIvcnBjL3JwYy5w" + 
            "cm90byL8AQoNQ2xpZW50UmVxdWVzdBI1CglhdHRyaWJ1dGUYASADKAsyIi5i" + 
            "bmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUSJgoEaG9zdBgCIAEo" + 
            "CzIYLmJuZXQucHJvdG9jb2wuUHJvY2Vzc0lkEjAKD2JuZXRfYWNjb3VudF9p" + 
            "ZBgDIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSMAoPZ2FtZV9hY2Nv" + 
            "dW50X2lkGAQgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIoCgd0b29u" + 
            "X2lkGAUgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZCJHCg5DbGllbnRS" + 
            "ZXNwb25zZRI1CglhdHRyaWJ1dGUYASADKAsyIi5ibmV0LnByb3RvY29sLmF0" + 
            "dHJpYnV0ZS5BdHRyaWJ1dGUijgIKEUNyZWF0ZVRvb25SZXF1ZXN0EjAKD2Ju" + 
            "ZXRfYWNjb3VudF9pZBgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQS" + 
            "MAoPZ2FtZV9hY2NvdW50X2lkGAIgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRp" + 
            "dHlJZBIoCgd0b29uX2lkGAMgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJ" + 
            "ZBIMCgRuYW1lGAQgAigJEjUKCWF0dHJpYnV0ZRgFIAMoCzIiLmJuZXQucHJv" + 
            "dG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0ZRImCgRob3N0GAYgASgLMhguYm5l" + 
            "dC5wcm90b2NvbC5Qcm9jZXNzSWQiIgoSQ3JlYXRlVG9vblJlc3BvbnNlEgwK" + 
            "BG5hbWUYASABKAkiyQEKEURlbGV0ZVRvb25SZXF1ZXN0EjAKD2JuZXRfYWNj" + 
            "b3VudF9pZBgBIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSMAoPZ2Ft" + 
            "ZV9hY2NvdW50X2lkGAIgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIo" + 
            "Cgd0b29uX2lkGAMgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBImCgRo" + 
            "b3N0GAQgASgLMhguYm5ldC5wcm90b2NvbC5Qcm9jZXNzSWQi7AIKE1RyYW5z" + 
            "ZmVyVG9vblJlcXVlc3QSKAoHdG9vbl9pZBgBIAIoCzIXLmJuZXQucHJvdG9j" + 
            "b2wuRW50aXR5SWQSSQoGc291cmNlGAIgASgLMjkuYm5ldC5wcm90b2NvbC5n" + 
            "YW1lX3V0aWxpdGllcy5UcmFuc2ZlclRvb25SZXF1ZXN0LkFjY291bnQSSQoG" + 
            "dGFyZ2V0GAMgASgLMjkuYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5U" + 
            "cmFuc2ZlclRvb25SZXF1ZXN0LkFjY291bnQSJgoEaG9zdBgEIAEoCzIYLmJu" + 
            "ZXQucHJvdG9jb2wuUHJvY2Vzc0lkGm0KB0FjY291bnQSMAoPYm5ldF9hY2Nv" + 
            "dW50X2lkGAEgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIwCg9nYW1l" + 
            "X2FjY291bnRfaWQYAiACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkIskB" + 
            "ChFTZWxlY3RUb29uUmVxdWVzdBIwCg9ibmV0X2FjY291bnRfaWQYASACKAsy" + 
            "Fy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjAKD2dhbWVfYWNjb3VudF9pZBgC" + 
            "IAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSKAoHdG9vbl9pZBgDIAIo" + 
            "CzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSJgoEaG9zdBgEIAEoCzIYLmJu" + 
            "ZXQucHJvdG9jb2wuUHJvY2Vzc0lkIvoBCh1QcmVzZW5jZUNoYW5uZWxDcmVh" + 
            "dGVkUmVxdWVzdBIjCgJpZBgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5" + 
            "SWQSKAoHdG9vbl9pZBgCIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQS" + 
            "MAoPZ2FtZV9hY2NvdW50X2lkGAMgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRp" + 
            "dHlJZBIwCg9ibmV0X2FjY291bnRfaWQYBCABKAsyFy5ibmV0LnByb3RvY29s" + 
            "LkVudGl0eUlkEiYKBGhvc3QYBSABKAsyGC5ibmV0LnByb3RvY29sLlByb2Nl" + 
            "c3NJZCLgAQoWUGxheWVyVmFyaWFibGVzUmVxdWVzdBIwCg9ibmV0X2FjY291" + 
            "bnRfaWQYASACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjAKD2dhbWVf" + 
            "YWNjb3VudF9pZBgCIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSKAoH" + 
            "dG9vbl9pZBgDIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSEAoIdmFy" + 
            "aWFibGUYBCADKAkSJgoEaG9zdBgFIAEoCzIYLmJuZXQucHJvdG9jb2wuUHJv" + 
            "Y2Vzc0lkIocBChRHYW1lVmFyaWFibGVzUmVxdWVzdBI1CglhdHRyaWJ1dGUY" + 
            "ASADKAsyIi5ibmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUSEAoI" + 
            "dmFyaWFibGUYAiADKAkSJgoEaG9zdBgDIAEoCzIYLmJuZXQucHJvdG9jb2wu" + 
            "UHJvY2Vzc0lkIiIKEVZhcmlhYmxlc1Jlc3BvbnNlEg0KBXZhbHVlGAEgAygC" + 
            "MrsHCg1HYW1lVXRpbGl0aWVzEnEKFFByb2Nlc3NDbGllbnRSZXF1ZXN0Eisu" + 
            "Ym5ldC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5DbGllbnRSZXF1ZXN0Giwu" + 
            "Ym5ldC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5DbGllbnRSZXNwb25zZRJv" + 
            "CgpDcmVhdGVUb29uEi8uYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5D" + 
            "cmVhdGVUb29uUmVxdWVzdBowLmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRp" + 
            "ZXMuQ3JlYXRlVG9vblJlc3BvbnNlElQKCkRlbGV0ZVRvb24SLy5ibmV0LnBy" + 
            "b3RvY29sLmdhbWVfdXRpbGl0aWVzLkRlbGV0ZVRvb25SZXF1ZXN0GhUuYm5l" + 
            "dC5wcm90b2NvbC5Ob0RhdGESWAoMVHJhbnNmZXJUb29uEjEuYm5ldC5wcm90" + 
            "b2NvbC5nYW1lX3V0aWxpdGllcy5UcmFuc2ZlclRvb25SZXF1ZXN0GhUuYm5l" + 
            "dC5wcm90b2NvbC5Ob0RhdGESVAoKU2VsZWN0VG9vbhIvLmJuZXQucHJvdG9j" + 
            "b2wuZ2FtZV91dGlsaXRpZXMuU2VsZWN0VG9vblJlcXVlc3QaFS5ibmV0LnBy" + 
            "b3RvY29sLk5vRGF0YRJsChZQcmVzZW5jZUNoYW5uZWxDcmVhdGVkEjsuYm5l" + 
            "dC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5QcmVzZW5jZUNoYW5uZWxDcmVh" + 
            "dGVkUmVxdWVzdBoVLmJuZXQucHJvdG9jb2wuTm9EYXRhEnsKEkdldFBsYXll" + 
            "clZhcmlhYmxlcxI0LmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuUGxh" + 
            "eWVyVmFyaWFibGVzUmVxdWVzdBovLmJuZXQucHJvdG9jb2wuZ2FtZV91dGls" + 
            "aXRpZXMuVmFyaWFibGVzUmVzcG9uc2USdwoQR2V0R2FtZVZhcmlhYmxlcxIy" + 
            "LmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuR2FtZVZhcmlhYmxlc1Jl" + 
            "cXVlc3QaLy5ibmV0LnByb3RvY29sLmdhbWVfdXRpbGl0aWVzLlZhcmlhYmxl" + 
            "c1Jlc3BvbnNlElwKB0dldExvYWQSKS5ibmV0LnByb3RvY29sLnNlcnZlcl9w" + 
            "b29sLkdldExvYWRSZXF1ZXN0GiYuYm5ldC5wcm90b2NvbC5zZXJ2ZXJfcG9v" + 
            "bC5TZXJ2ZXJTdGF0ZUIRQgxDR2FtZVV0aWxpZXOAAQE=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientRequest, global::bnet.protocol.game_utilities.ClientRequest.Builder>(internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor,
                  new string[] { "Attribute", "Host", "BnetAccountId", "GameAccountId", "ToonId", });
          internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder>(internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor,
                  new string[] { "Attribute", });
          internal__static_bnet_protocol_game_utilities_CreateToonRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_game_utilities_CreateToonRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.CreateToonRequest, global::bnet.protocol.game_utilities.CreateToonRequest.Builder>(internal__static_bnet_protocol_game_utilities_CreateToonRequest__Descriptor,
                  new string[] { "BnetAccountId", "GameAccountId", "ToonId", "Name", "Attribute", "Host", });
          internal__static_bnet_protocol_game_utilities_CreateToonResponse__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_game_utilities_CreateToonResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.CreateToonResponse, global::bnet.protocol.game_utilities.CreateToonResponse.Builder>(internal__static_bnet_protocol_game_utilities_CreateToonResponse__Descriptor,
                  new string[] { "Name", });
          internal__static_bnet_protocol_game_utilities_DeleteToonRequest__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_game_utilities_DeleteToonRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.DeleteToonRequest, global::bnet.protocol.game_utilities.DeleteToonRequest.Builder>(internal__static_bnet_protocol_game_utilities_DeleteToonRequest__Descriptor,
                  new string[] { "BnetAccountId", "GameAccountId", "ToonId", "Host", });
          internal__static_bnet_protocol_game_utilities_TransferToonRequest__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_game_utilities_TransferToonRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.TransferToonRequest, global::bnet.protocol.game_utilities.TransferToonRequest.Builder>(internal__static_bnet_protocol_game_utilities_TransferToonRequest__Descriptor,
                  new string[] { "ToonId", "Source", "Target", "Host", });
          internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__Descriptor = internal__static_bnet_protocol_game_utilities_TransferToonRequest__Descriptor.NestedTypes[0];
          internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account, global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder>(internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__Descriptor,
                  new string[] { "BnetAccountId", "GameAccountId", });
          internal__static_bnet_protocol_game_utilities_SelectToonRequest__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_game_utilities_SelectToonRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.SelectToonRequest, global::bnet.protocol.game_utilities.SelectToonRequest.Builder>(internal__static_bnet_protocol_game_utilities_SelectToonRequest__Descriptor,
                  new string[] { "BnetAccountId", "GameAccountId", "ToonId", "Host", });
          internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest, global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Builder>(internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor,
                  new string[] { "Id", "ToonId", "GameAccountId", "BnetAccountId", "Host", });
          internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PlayerVariablesRequest, global::bnet.protocol.game_utilities.PlayerVariablesRequest.Builder>(internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor,
                  new string[] { "BnetAccountId", "GameAccountId", "ToonId", "Variable", "Host", });
          internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameVariablesRequest, global::bnet.protocol.game_utilities.GameVariablesRequest.Builder>(internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor,
                  new string[] { "Attribute", "Variable", "Host", });
          internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor,
                  new string[] { "Value", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.game_master.Proto.GameMaster.Descriptor, 
            global::bnet.protocol.server_pool.ServerPool.Descriptor, 
            global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
            global::bnet.protocol.Entity.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  public sealed partial class ClientRequest : pb::GeneratedMessage<ClientRequest, ClientRequest.Builder> {
    private static readonly ClientRequest defaultInstance = new Builder().BuildPartial();
    public static ClientRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientRequest, ClientRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public const int BnetAccountIdFieldNumber = 3;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 4;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ToonIdFieldNumber = 5;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (HasToonId) {
          if (!ToonId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(1, element);
      }
      if (HasHost) {
        output.WriteMessage(2, Host);
      }
      if (HasBnetAccountId) {
        output.WriteMessage(3, BnetAccountId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(4, GameAccountId);
      }
      if (HasToonId) {
        output.WriteMessage(5, ToonId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
        }
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BnetAccountId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, GameAccountId);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ToonId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientRequest result = new ClientRequest();
      
      protected override ClientRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ClientRequest.Descriptor; }
      }
      
      public override ClientRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance; }
      }
      
      public override ClientRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        ClientRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientRequest) {
          return MergeFrom((ClientRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientRequest other) {
        if (other == global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance) return this;
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
    }
    static ClientRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class ClientResponse : pb::GeneratedMessage<ClientResponse, ClientResponse.Builder> {
    private static readonly ClientResponse defaultInstance = new Builder().BuildPartial();
    public static ClientResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientResponse, ClientResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientResponse result = new ClientResponse();
      
      protected override ClientResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ClientResponse.Descriptor; }
      }
      
      public override ClientResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance; }
      }
      
      public override ClientResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        ClientResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientResponse) {
          return MergeFrom((ClientResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientResponse other) {
        if (other == global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance) return this;
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
    }
    static ClientResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class CreateToonRequest : pb::GeneratedMessage<CreateToonRequest, CreateToonRequest.Builder> {
    private static readonly CreateToonRequest defaultInstance = new Builder().BuildPartial();
    public static CreateToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateToonRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CreateToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_CreateToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateToonRequest, CreateToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_CreateToonRequest__FieldAccessorTable; }
    }
    
    public const int BnetAccountIdFieldNumber = 1;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ToonIdFieldNumber = 3;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AttributeFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int HostFieldNumber = 6;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBnetAccountId) return false;
        if (!hasGameAccountId) return false;
        if (!hasToonId) return false;
        if (!hasName) return false;
        if (!BnetAccountId.IsInitialized) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (!ToonId.IsInitialized) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBnetAccountId) {
        output.WriteMessage(1, BnetAccountId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(2, GameAccountId);
      }
      if (HasToonId) {
        output.WriteMessage(3, ToonId);
      }
      if (HasName) {
        output.WriteString(4, Name);
      }
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(5, element);
      }
      if (HasHost) {
        output.WriteMessage(6, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ToonId);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateToonRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CreateToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CreateToonRequest result = new CreateToonRequest();
      
      protected override CreateToonRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CreateToonRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.CreateToonRequest.Descriptor; }
      }
      
      public override CreateToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.CreateToonRequest.DefaultInstance; }
      }
      
      public override CreateToonRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        CreateToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateToonRequest) {
          return MergeFrom((CreateToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateToonRequest other) {
        if (other == global::bnet.protocol.game_utilities.CreateToonRequest.DefaultInstance) return this;
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              Name = input.ReadString();
              break;
            }
            case 42: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static CreateToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class CreateToonResponse : pb::GeneratedMessage<CreateToonResponse, CreateToonResponse.Builder> {
    private static readonly CreateToonResponse defaultInstance = new Builder().BuildPartial();
    public static CreateToonResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateToonResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CreateToonResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_CreateToonResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateToonResponse, CreateToonResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_CreateToonResponse__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasName) {
        output.WriteString(1, Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateToonResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateToonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateToonResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CreateToonResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CreateToonResponse result = new CreateToonResponse();
      
      protected override CreateToonResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CreateToonResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.CreateToonResponse.Descriptor; }
      }
      
      public override CreateToonResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.CreateToonResponse.DefaultInstance; }
      }
      
      public override CreateToonResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CreateToonResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateToonResponse) {
          return MergeFrom((CreateToonResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateToonResponse other) {
        if (other == global::bnet.protocol.game_utilities.CreateToonResponse.DefaultInstance) return this;
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Name = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static CreateToonResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class DeleteToonRequest : pb::GeneratedMessage<DeleteToonRequest, DeleteToonRequest.Builder> {
    private static readonly DeleteToonRequest defaultInstance = new Builder().BuildPartial();
    public static DeleteToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteToonRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override DeleteToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_DeleteToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteToonRequest, DeleteToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_DeleteToonRequest__FieldAccessorTable; }
    }
    
    public const int BnetAccountIdFieldNumber = 1;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ToonIdFieldNumber = 3;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int HostFieldNumber = 4;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (!ToonId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBnetAccountId) {
        output.WriteMessage(1, BnetAccountId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(2, GameAccountId);
      }
      if (HasToonId) {
        output.WriteMessage(3, ToonId);
      }
      if (HasHost) {
        output.WriteMessage(4, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ToonId);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeleteToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteToonRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      DeleteToonRequest result = new DeleteToonRequest();
      
      protected override DeleteToonRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new DeleteToonRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.DeleteToonRequest.Descriptor; }
      }
      
      public override DeleteToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.DeleteToonRequest.DefaultInstance; }
      }
      
      public override DeleteToonRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        DeleteToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteToonRequest) {
          return MergeFrom((DeleteToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteToonRequest other) {
        if (other == global::bnet.protocol.game_utilities.DeleteToonRequest.DefaultInstance) return this;
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static DeleteToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class TransferToonRequest : pb::GeneratedMessage<TransferToonRequest, TransferToonRequest.Builder> {
    private static readonly TransferToonRequest defaultInstance = new Builder().BuildPartial();
    public static TransferToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferToonRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override TransferToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_TransferToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferToonRequest, TransferToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_TransferToonRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public sealed partial class Account : pb::GeneratedMessage<Account, Account.Builder> {
        private static readonly Account defaultInstance = new Builder().BuildPartial();
        public static Account DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Account DefaultInstanceForType {
          get { return defaultInstance; }
        }
        
        protected override Account ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Account, Account.Builder> InternalFieldAccessors {
          get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_TransferToonRequest_Account__FieldAccessorTable; }
        }
        
        public const int BnetAccountIdFieldNumber = 1;
        private bool hasBnetAccountId;
        private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        public bool HasBnetAccountId {
          get { return hasBnetAccountId; }
        }
        public global::bnet.protocol.EntityId BnetAccountId {
          get { return bnetAccountId_; }
        }
        
        public const int GameAccountIdFieldNumber = 2;
        private bool hasGameAccountId;
        private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        public bool HasGameAccountId {
          get { return hasGameAccountId; }
        }
        public global::bnet.protocol.EntityId GameAccountId {
          get { return gameAccountId_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasBnetAccountId) return false;
            if (!hasGameAccountId) return false;
            if (!BnetAccountId.IsInitialized) return false;
            if (!GameAccountId.IsInitialized) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::CodedOutputStream output) {
          int size = SerializedSize;
          if (HasBnetAccountId) {
            output.WriteMessage(1, BnetAccountId);
          }
          if (HasGameAccountId) {
            output.WriteMessage(2, GameAccountId);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (HasBnetAccountId) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
            }
            if (HasGameAccountId) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Account ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Account ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Account ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Account ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Account ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Account ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Account ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Account ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Account ParseFrom(pb::CodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Account ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Account prototype) {
          return (Builder) new Builder().MergeFrom(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilder<Account, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {}
          
          Account result = new Account();
          
          protected override Account MessageBeingBuilt {
            get { return result; }
          }
          
          public override Builder Clear() {
            result = new Account();
            return this;
          }
          
          public override Builder Clone() {
            return new Builder().MergeFrom(result);
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Descriptor; }
          }
          
          public override Account DefaultInstanceForType {
            get { return global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance; }
          }
          
          public override Account BuildPartial() {
            if (result == null) {
              throw new global::System.InvalidOperationException("build() has already been called on this Builder");
            }
            Account returnMe = result;
            result = null;
            return returnMe;
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Account) {
              return MergeFrom((Account) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Account other) {
            if (other == global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance) return this;
            if (other.HasBnetAccountId) {
              MergeBnetAccountId(other.BnetAccountId);
            }
            if (other.HasGameAccountId) {
              MergeGameAccountId(other.GameAccountId);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            pb::UnknownFieldSet.Builder unknownFields = null;
            while (true) {
              uint tag = input.ReadTag();
              switch (tag) {
                case 0: {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag);
                  break;
                }
                case 10: {
                  global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
                  if (HasBnetAccountId) {
                    subBuilder.MergeFrom(BnetAccountId);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  BnetAccountId = subBuilder.BuildPartial();
                  break;
                }
                case 18: {
                  global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
                  if (HasGameAccountId) {
                    subBuilder.MergeFrom(GameAccountId);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  GameAccountId = subBuilder.BuildPartial();
                  break;
                }
              }
            }
          }
          
          
          public bool HasBnetAccountId {
           get { return result.HasBnetAccountId; }
          }
          public global::bnet.protocol.EntityId BnetAccountId {
            get { return result.BnetAccountId; }
            set { SetBnetAccountId(value); }
          }
          public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasBnetAccountId = true;
            result.bnetAccountId_ = value;
            return this;
          }
          public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            result.hasBnetAccountId = true;
            result.bnetAccountId_ = builderForValue.Build();
            return this;
          }
          public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            if (result.HasBnetAccountId &&
                result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
                result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
            } else {
              result.bnetAccountId_ = value;
            }
            result.hasBnetAccountId = true;
            return this;
          }
          public Builder ClearBnetAccountId() {
            result.hasBnetAccountId = false;
            result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
            return this;
          }
          
          public bool HasGameAccountId {
           get { return result.HasGameAccountId; }
          }
          public global::bnet.protocol.EntityId GameAccountId {
            get { return result.GameAccountId; }
            set { SetGameAccountId(value); }
          }
          public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            result.hasGameAccountId = true;
            result.gameAccountId_ = value;
            return this;
          }
          public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            result.hasGameAccountId = true;
            result.gameAccountId_ = builderForValue.Build();
            return this;
          }
          public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            if (result.HasGameAccountId &&
                result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
                result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
            } else {
              result.gameAccountId_ = value;
            }
            result.hasGameAccountId = true;
            return this;
          }
          public Builder ClearGameAccountId() {
            result.hasGameAccountId = false;
            result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
            return this;
          }
        }
        static Account() {
          object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int SourceFieldNumber = 2;
    private bool hasSource;
    private global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account source_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance;
    public bool HasSource {
      get { return hasSource; }
    }
    public global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account Source {
      get { return source_; }
    }
    
    public const int TargetFieldNumber = 3;
    private bool hasTarget;
    private global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account target_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account Target {
      get { return target_; }
    }
    
    public const int HostFieldNumber = 4;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!ToonId.IsInitialized) return false;
        if (HasSource) {
          if (!Source.IsInitialized) return false;
        }
        if (HasTarget) {
          if (!Target.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasToonId) {
        output.WriteMessage(1, ToonId);
      }
      if (HasSource) {
        output.WriteMessage(2, Source);
      }
      if (HasTarget) {
        output.WriteMessage(3, Target);
      }
      if (HasHost) {
        output.WriteMessage(4, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ToonId);
        }
        if (HasSource) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Source);
        }
        if (HasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Target);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferToonRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferToonRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<TransferToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      TransferToonRequest result = new TransferToonRequest();
      
      protected override TransferToonRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new TransferToonRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.TransferToonRequest.Descriptor; }
      }
      
      public override TransferToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.TransferToonRequest.DefaultInstance; }
      }
      
      public override TransferToonRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        TransferToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferToonRequest) {
          return MergeFrom((TransferToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferToonRequest other) {
        if (other == global::bnet.protocol.game_utilities.TransferToonRequest.DefaultInstance) return this;
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasSource) {
          MergeSource(other.Source);
        }
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder subBuilder = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.CreateBuilder();
              if (HasSource) {
                subBuilder.MergeFrom(Source);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Source = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder subBuilder = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.CreateBuilder();
              if (HasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasSource {
       get { return result.HasSource; }
      }
      public global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder SetSource(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSource = true;
        result.source_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSource(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSource &&
            result.source_ != global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance) {
            result.source_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.CreateBuilder(result.source_).MergeFrom(value).BuildPartial();
        } else {
          result.source_ = value;
        }
        result.hasSource = true;
        return this;
      }
      public Builder ClearSource() {
        result.hasSource = false;
        result.source_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance;
        return this;
      }
      
      public bool HasTarget {
       get { return result.HasTarget; }
      }
      public global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTarget &&
            result.target_ != global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance) {
            result.target_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        result.hasTarget = false;
        result.target_ = global::bnet.protocol.game_utilities.TransferToonRequest.Types.Account.DefaultInstance;
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static TransferToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class SelectToonRequest : pb::GeneratedMessage<SelectToonRequest, SelectToonRequest.Builder> {
    private static readonly SelectToonRequest defaultInstance = new Builder().BuildPartial();
    public static SelectToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SelectToonRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SelectToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_SelectToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SelectToonRequest, SelectToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_SelectToonRequest__FieldAccessorTable; }
    }
    
    public const int BnetAccountIdFieldNumber = 1;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ToonIdFieldNumber = 3;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int HostFieldNumber = 4;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBnetAccountId) return false;
        if (!hasGameAccountId) return false;
        if (!hasToonId) return false;
        if (!BnetAccountId.IsInitialized) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (!ToonId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBnetAccountId) {
        output.WriteMessage(1, BnetAccountId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(2, GameAccountId);
      }
      if (HasToonId) {
        output.WriteMessage(3, ToonId);
      }
      if (HasHost) {
        output.WriteMessage(4, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ToonId);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SelectToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SelectToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SelectToonRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SelectToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SelectToonRequest result = new SelectToonRequest();
      
      protected override SelectToonRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SelectToonRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.SelectToonRequest.Descriptor; }
      }
      
      public override SelectToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.SelectToonRequest.DefaultInstance; }
      }
      
      public override SelectToonRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SelectToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SelectToonRequest) {
          return MergeFrom((SelectToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SelectToonRequest other) {
        if (other == global::bnet.protocol.game_utilities.SelectToonRequest.DefaultInstance) return this;
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static SelectToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class PresenceChannelCreatedRequest : pb::GeneratedMessage<PresenceChannelCreatedRequest, PresenceChannelCreatedRequest.Builder> {
    private static readonly PresenceChannelCreatedRequest defaultInstance = new Builder().BuildPartial();
    public static PresenceChannelCreatedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PresenceChannelCreatedRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PresenceChannelCreatedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PresenceChannelCreatedRequest, PresenceChannelCreatedRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::bnet.protocol.EntityId id_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasId {
      get { return hasId; }
    }
    public global::bnet.protocol.EntityId Id {
      get { return id_; }
    }
    
    public const int ToonIdFieldNumber = 2;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int GameAccountIdFieldNumber = 3;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int BnetAccountIdFieldNumber = 4;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int HostFieldNumber = 5;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!Id.IsInitialized) return false;
        if (HasToonId) {
          if (!ToonId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteMessage(1, Id);
      }
      if (HasToonId) {
        output.WriteMessage(2, ToonId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(3, GameAccountId);
      }
      if (HasBnetAccountId) {
        output.WriteMessage(4, BnetAccountId);
      }
      if (HasHost) {
        output.WriteMessage(5, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ToonId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GameAccountId);
        }
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, BnetAccountId);
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PresenceChannelCreatedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PresenceChannelCreatedRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PresenceChannelCreatedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PresenceChannelCreatedRequest result = new PresenceChannelCreatedRequest();
      
      protected override PresenceChannelCreatedRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PresenceChannelCreatedRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Descriptor; }
      }
      
      public override PresenceChannelCreatedRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance; }
      }
      
      public override PresenceChannelCreatedRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PresenceChannelCreatedRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PresenceChannelCreatedRequest) {
          return MergeFrom((PresenceChannelCreatedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PresenceChannelCreatedRequest other) {
        if (other == global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance) return this;
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
       get { return result.HasId; }
      }
      public global::bnet.protocol.EntityId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasId &&
            result.id_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.id_ = global::bnet.protocol.EntityId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static PresenceChannelCreatedRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerVariablesRequest : pb::GeneratedMessage<PlayerVariablesRequest, PlayerVariablesRequest.Builder> {
    private static readonly PlayerVariablesRequest defaultInstance = new Builder().BuildPartial();
    public static PlayerVariablesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerVariablesRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PlayerVariablesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerVariablesRequest, PlayerVariablesRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable; }
    }
    
    public const int BnetAccountIdFieldNumber = 1;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ToonIdFieldNumber = 3;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int VariableFieldNumber = 4;
    private pbc::PopsicleList<string> variable_ = new pbc::PopsicleList<string>();
    public scg::IList<string> VariableList {
      get { return pbc::Lists.AsReadOnly(variable_); }
    }
    public int VariableCount {
      get { return variable_.Count; }
    }
    public string GetVariable(int index) {
      return variable_[index];
    }
    
    public const int HostFieldNumber = 5;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBnetAccountId) return false;
        if (!hasGameAccountId) return false;
        if (!hasToonId) return false;
        if (!BnetAccountId.IsInitialized) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (!ToonId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBnetAccountId) {
        output.WriteMessage(1, BnetAccountId);
      }
      if (HasGameAccountId) {
        output.WriteMessage(2, GameAccountId);
      }
      if (HasToonId) {
        output.WriteMessage(3, ToonId);
      }
      if (variable_.Count > 0) {
        foreach (string element in variable_) {
          output.WriteString(4, element);
        }
      }
      if (HasHost) {
        output.WriteMessage(5, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
        }
        if (HasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ToonId);
        }
        {
          int dataSize = 0;
          foreach (string element in VariableList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * variable_.Count;
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerVariablesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerVariablesRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerVariablesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PlayerVariablesRequest result = new PlayerVariablesRequest();
      
      protected override PlayerVariablesRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PlayerVariablesRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.PlayerVariablesRequest.Descriptor; }
      }
      
      public override PlayerVariablesRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance; }
      }
      
      public override PlayerVariablesRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.variable_.MakeReadOnly();
        PlayerVariablesRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerVariablesRequest) {
          return MergeFrom((PlayerVariablesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerVariablesRequest other) {
        if (other == global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance) return this;
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.variable_.Count != 0) {
          base.AddRange(other.variable_, result.variable_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              AddVariable(input.ReadString());
              break;
            }
            case 42: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasBnetAccountId {
       get { return result.HasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.HasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::bnet.protocol.EntityId.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<string> VariableList {
        get { return result.variable_; }
      }
      public int VariableCount {
        get { return result.VariableCount; }
      }
      public string GetVariable(int index) {
        return result.GetVariable(index);
      }
      public Builder SetVariable(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.variable_[index] = value;
        return this;
      }
      public Builder AddVariable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.variable_.Add(value);
        return this;
      }
      public Builder AddRangeVariable(scg::IEnumerable<string> values) {
        base.AddRange(values, result.variable_);
        return this;
      }
      public Builder ClearVariable() {
        result.variable_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static PlayerVariablesRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class GameVariablesRequest : pb::GeneratedMessage<GameVariablesRequest, GameVariablesRequest.Builder> {
    private static readonly GameVariablesRequest defaultInstance = new Builder().BuildPartial();
    public static GameVariablesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameVariablesRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameVariablesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameVariablesRequest, GameVariablesRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int VariableFieldNumber = 2;
    private pbc::PopsicleList<string> variable_ = new pbc::PopsicleList<string>();
    public scg::IList<string> VariableList {
      get { return pbc::Lists.AsReadOnly(variable_); }
    }
    public int VariableCount {
      get { return variable_.Count; }
    }
    public string GetVariable(int index) {
      return variable_[index];
    }
    
    public const int HostFieldNumber = 3;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_ = global::bnet.protocol.ProcessId.DefaultInstance;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
        output.WriteMessage(1, element);
      }
      if (variable_.Count > 0) {
        foreach (string element in variable_) {
          output.WriteString(2, element);
        }
      }
      if (HasHost) {
        output.WriteMessage(3, Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in VariableList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * variable_.Count;
        }
        if (HasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameVariablesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameVariablesRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameVariablesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameVariablesRequest result = new GameVariablesRequest();
      
      protected override GameVariablesRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameVariablesRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.GameVariablesRequest.Descriptor; }
      }
      
      public override GameVariablesRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance; }
      }
      
      public override GameVariablesRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.attribute_.MakeReadOnly();
        result.variable_.MakeReadOnly();
        GameVariablesRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameVariablesRequest) {
          return MergeFrom((GameVariablesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameVariablesRequest other) {
        if (other == global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance) return this;
        if (other.attribute_.Count != 0) {
          base.AddRange(other.attribute_, result.attribute_);
        }
        if (other.variable_.Count != 0) {
          base.AddRange(other.variable_, result.variable_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::bnet.protocol.attribute.Attribute.Builder subBuilder = global::bnet.protocol.attribute.Attribute.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddAttribute(subBuilder.BuildPartial());
              break;
            }
            case 18: {
              AddVariable(input.ReadString());
              break;
            }
            case 26: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (HasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return result.attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        base.AddRange(values, result.attribute_);
        return this;
      }
      public Builder ClearAttribute() {
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> VariableList {
        get { return result.variable_; }
      }
      public int VariableCount {
        get { return result.VariableCount; }
      }
      public string GetVariable(int index) {
        return result.GetVariable(index);
      }
      public Builder SetVariable(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.variable_[index] = value;
        return this;
      }
      public Builder AddVariable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.variable_.Add(value);
        return this;
      }
      public Builder AddRangeVariable(scg::IEnumerable<string> values) {
        base.AddRange(values, result.variable_);
        return this;
      }
      public Builder ClearVariable() {
        result.variable_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.HasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        result.hasHost = false;
        result.host_ = global::bnet.protocol.ProcessId.DefaultInstance;
        return this;
      }
    }
    static GameVariablesRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  public sealed partial class VariablesResponse : pb::GeneratedMessage<VariablesResponse, VariablesResponse.Builder> {
    private static readonly VariablesResponse defaultInstance = new Builder().BuildPartial();
    public static VariablesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VariablesResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override VariablesResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VariablesResponse, VariablesResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.Proto.GameUtilities.internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<float> value_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ValueList {
      get { return pbc::Lists.AsReadOnly(value_); }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public float GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (value_.Count > 0) {
        foreach (float element in value_) {
          output.WriteFloat(1, element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * value_.Count;
          size += dataSize;
          size += 1 * value_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VariablesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VariablesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VariablesResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<VariablesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      VariablesResponse result = new VariablesResponse();
      
      protected override VariablesResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new VariablesResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.VariablesResponse.Descriptor; }
      }
      
      public override VariablesResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance; }
      }
      
      public override VariablesResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.value_.MakeReadOnly();
        VariablesResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VariablesResponse) {
          return MergeFrom((VariablesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VariablesResponse other) {
        if (other == global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance) return this;
        if (other.value_.Count != 0) {
          base.AddRange(other.value_, result.value_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              AddValue(input.ReadFloat());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<float> ValueList {
        get { return result.value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public float GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, float value) {
        result.value_[index] = value;
        return this;
      }
      public Builder AddValue(float value) {
        result.value_.Add(value);
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<float> values) {
        base.AddRange(values, result.value_);
        return this;
      }
      public Builder ClearValue() {
        result.value_.Clear();
        return this;
      }
    }
    static VariablesResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.Proto.GameUtilities.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public abstract class GameUtilities : pb::IService {
    public abstract void ProcessClientRequest(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.ClientRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.ClientResponse> done);
    public abstract void CreateToon(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.CreateToonRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.CreateToonResponse> done);
    public abstract void DeleteToon(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.DeleteToonRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void TransferToon(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.TransferToonRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void SelectToon(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.SelectToonRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void PresenceChannelCreated(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void GetPlayerVariables(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.PlayerVariablesRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done);
    public abstract void GetGameVariables(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.GameVariablesRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done);
    public abstract void GetLoad(
        pb::IRpcController controller,
        global::bnet.protocol.server_pool.GetLoadRequest request,
        global::System.Action<global::bnet.protocol.server_pool.ServerState> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.GameUtilities.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ProcessClientRequest(controller, (global::bnet.protocol.game_utilities.ClientRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.ClientResponse>(
              done));
          return;
        case 1:
          this.CreateToon(controller, (global::bnet.protocol.game_utilities.CreateToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.CreateToonResponse>(
              done));
          return;
        case 2:
          this.DeleteToon(controller, (global::bnet.protocol.game_utilities.DeleteToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 3:
          this.TransferToon(controller, (global::bnet.protocol.game_utilities.TransferToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 4:
          this.SelectToon(controller, (global::bnet.protocol.game_utilities.SelectToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 5:
          this.PresenceChannelCreated(controller, (global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 6:
          this.GetPlayerVariables(controller, (global::bnet.protocol.game_utilities.PlayerVariablesRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.VariablesResponse>(
              done));
          return;
        case 7:
          this.GetGameVariables(controller, (global::bnet.protocol.game_utilities.GameVariablesRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.VariablesResponse>(
              done));
          return;
        case 8:
          this.GetLoad(controller, (global::bnet.protocol.server_pool.GetLoadRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.server_pool.ServerState>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.game_utilities.CreateToonRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.game_utilities.DeleteToonRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.game_utilities.TransferToonRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.game_utilities.SelectToonRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance;
        case 6:
          return global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance;
        case 7:
          return global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance;
        case 8:
          return global::bnet.protocol.server_pool.GetLoadRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.game_utilities.CreateToonResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 3:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 4:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 5:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 6:
          return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance;
        case 7:
          return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance;
        case 8:
          return global::bnet.protocol.server_pool.ServerState.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    public class Stub : global::bnet.protocol.game_utilities.GameUtilities {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ProcessClientRequest(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.ClientRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.ClientResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder>(done, global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance));
      }
      
      public override void CreateToon(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.CreateToonRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.CreateToonResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.game_utilities.CreateToonResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.CreateToonResponse, global::bnet.protocol.game_utilities.CreateToonResponse.Builder>(done, global::bnet.protocol.game_utilities.CreateToonResponse.DefaultInstance));
      }
      
      public override void DeleteToon(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.DeleteToonRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void TransferToon(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.TransferToonRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void SelectToon(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.SelectToonRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void PresenceChannelCreated(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void GetPlayerVariables(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.PlayerVariablesRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done) {
        channel.CallMethod(Descriptor.Methods[6],
            controller, request, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(done, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance));
      }
      
      public override void GetGameVariables(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.GameVariablesRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done) {
        channel.CallMethod(Descriptor.Methods[7],
            controller, request, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(done, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance));
      }
      
      public override void GetLoad(
          pb::IRpcController controller,
          global::bnet.protocol.server_pool.GetLoadRequest request,
          global::System.Action<global::bnet.protocol.server_pool.ServerState> done) {
        channel.CallMethod(Descriptor.Methods[8],
            controller, request, global::bnet.protocol.server_pool.ServerState.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.server_pool.ServerState, global::bnet.protocol.server_pool.ServerState.Builder>(done, global::bnet.protocol.server_pool.ServerState.DefaultInstance));
      }
    }
  }
  #endregion
  
}
