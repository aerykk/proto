// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Hero {
  
  public static partial class Hero {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder> internal__static_D3_Hero_VisualItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualEquipment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder> internal__static_D3_Hero_VisualEquipment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder> internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder> internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder> internal__static_D3_Hero_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_HotbarButtonData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HotbarButtonData, global::D3.Hero.HotbarButtonData.Builder> internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SkillKeyMapping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillKeyMapping, global::D3.Hero.SkillKeyMapping.Builder> internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedQuest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder> internal__static_D3_Hero_SavedQuest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_LearnedLore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LearnedLore, global::D3.Hero.LearnedLore.Builder> internal__static_D3_Hero_LearnedLore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedConversations__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder> internal__static_D3_Hero_SavedConversations__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavePointData_Proto__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder> internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder> internal__static_D3_Hero_SavedData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Timestamps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder> internal__static_D3_Hero_Timestamps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder> internal__static_D3_Hero_SavedDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_NameSequence__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameSequence, global::D3.Hero.NameSequence.Builder> internal__static_D3_Hero_NameSequence__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_NameText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder> internal__static_D3_Hero_NameText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Escrow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Escrow, global::D3.Hero.Escrow.Builder> internal__static_D3_Hero_Escrow__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Hero() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpIZXJvLnByb3RvEgdEMy5IZXJvGhlBdHRyaWJ1dGVTZXJpYWxpemVyLnBy" + 
          "b3RvGg5IaXJlbGluZy5wcm90bxoLSXRlbXMucHJvdG8aE09ubGluZVNlcnZp" + 
          "Y2UucHJvdG8iXAoKVmlzdWFsSXRlbRIMCgRnYmlkGAEgASgPEhAKCGR5ZV90" + 
          "eXBlGAIgASgREhgKEGl0ZW1fZWZmZWN0X3R5cGUYAyABKBESFAoMZWZmZWN0" + 
          "X2xldmVsGAQgASgRIjsKD1Zpc3VhbEVxdWlwbWVudBIoCgt2aXN1YWxfaXRl" + 
          "bRgBIAMoCzITLkQzLkhlcm8uVmlzdWFsSXRlbSI6ChFRdWVzdEhpc3RvcnlF" + 
          "bnRyeRIRCglzbm9fcXVlc3QYASACKA8SEgoKZGlmZmljdWx0eRgCIAIoESJS" + 
          "ChdRdWVzdFJld2FyZEhpc3RvcnlFbnRyeRIRCglzbm9fcXVlc3QYASACKA8S" + 
          "EAoIc3RlcF91aWQYAiACKBESEgoKZGlmZmljdWx0eRgDIAIoESLFAwoGRGln" + 
          "ZXN0Eg8KB3ZlcnNpb24YASACKA0SKwoHaGVyb19pZBgCIAIoCzIaLkQzLk9u" + 
          "bGluZVNlcnZpY2UuRW50aXR5SWQSEQoJaGVyb19uYW1lGAMgAigJEhIKCmdi" + 
          "aWRfY2xhc3MYBCACKA8SDQoFbGV2ZWwYBSACKBESFAoMcGxheWVyX2ZsYWdz" + 
          "GAYgAigNEjIKEHZpc3VhbF9lcXVpcG1lbnQYByACKAsyGC5EMy5IZXJvLlZp" + 
          "c3VhbEVxdWlwbWVudBIxCg1xdWVzdF9oaXN0b3J5GAggAygLMhouRDMuSGVy" + 
          "by5RdWVzdEhpc3RvcnlFbnRyeRIXCg9sYXN0X3BsYXllZF9hY3QYCiACKBES" + 
          "HAoUaGlnaGVzdF91bmxvY2tlZF9hY3QYCyACKBESHgoWbGFzdF9wbGF5ZWRf" + 
          "ZGlmZmljdWx0eRgMIAIoERIjChtoaWdoZXN0X3VubG9ja2VkX2RpZmZpY3Vs" + 
          "dHkYDSACKBESGQoRbGFzdF9wbGF5ZWRfcXVlc3QYDiACKA8SHgoWbGFzdF9w" + 
          "bGF5ZWRfcXVlc3Rfc3RlcBgPIAIoERITCgt0aW1lX3BsYXllZBgQIAIoDSI4" + 
          "ChBIb3RiYXJCdXR0b25EYXRhEhEKCXNub19wb3dlchgBIAIoDxIRCglnYmlk" + 
          "X2l0ZW0YAiACKA8iTQoPU2tpbGxLZXlNYXBwaW5nEhEKCXNub19wb3dlchgB" + 
          "IAIoDxIRCglpZF9ob3RrZXkYAiACKBESFAoMc2tpbGxfYnV0dG9uGAMgAigR" + 
          "IocBCgpTYXZlZFF1ZXN0EhEKCXNub19xdWVzdBgBIAIoDxISCgpkaWZmaWN1" + 
          "bHR5GAIgAigREhgKEGN1cnJlbnRfc3RlcF91aWQYAyACKBESFwoPb2JqZWN0" + 
          "aXZlX3N0YXRlGAQgAygREh8KF2ZhaWx1cmVfY29uZGl0aW9uX3N0YXRlGAUg" + 
          "AygRIicKC0xlYXJuZWRMb3JlEhgKEHNub19sb3JlX2xlYXJuZWQYASADKA8i" + 
          "XAoSU2F2ZWRDb252ZXJzYXRpb25zEiUKHXBsYXllZF9jb252ZXJzYXRpb25z" + 
          "X2JpdGZpZWxkGAEgAigMEh8KF3Nub19zYXZlZF9jb252ZXJzYXRpb25zGAIg" + 
          "AygPIloKE1NhdmVQb2ludERhdGFfUHJvdG8SEQoJc25vX3dvcmxkGAEgAigP" + 
          "EhgKEHNhdmVwb2ludF9udW1iZXIYAiACKBESFgoOY3JlYXRlc19wb3J0YWwY" + 
          "AyACKA0i2QMKCVNhdmVkRGF0YRI8Chlob3RiYXJfYnV0dG9uX2Fzc2lnbm1l" + 
          "bnRzGAEgAygLMhkuRDMuSGVyby5Ib3RiYXJCdXR0b25EYXRhEi8KDXNraWxs" + 
          "X2tleV9tYXAYAiADKAsyGC5EMy5IZXJvLlNraWxsS2V5TWFwcGluZxITCgt0" + 
          "aW1lX3BsYXllZBgDIAIoDRIbChNhY3RpdmF0ZWRfd2F5cG9pbnRzGAQgAigN" + 
          "EjMKE2hpcmVsaW5nX3NhdmVkX2RhdGEYBSACKAsyFi5EMy5IaXJlbGluZy5T" + 
          "YXZlZERhdGESFwoPbGFzdF9sZXZlbF90aW1lGAYgAigNEioKDGxlYXJuZWRf" + 
          "bG9yZRgHIAIoCzIULkQzLkhlcm8uTGVhcm5lZExvcmUSOAoTc2F2ZWRfY29u" + 
          "dmVyc2F0aW9ucxgIIAIoCzIbLkQzLkhlcm8uU2F2ZWRDb252ZXJzYXRpb25z" + 
          "EhkKEXNub19hY3RpdmVfc2tpbGxzGAkgAygPEhIKCnNub190cmFpdHMYCiAD" + 
          "KA8SFgoOc2Vlbl90dXRvcmlhbHMYCyADKA8SMAoKc2F2ZV9wb2ludBgMIAIo" + 
          "CzIcLkQzLkhlcm8uU2F2ZVBvaW50RGF0YV9Qcm90byI2CgpUaW1lc3RhbXBz" + 
          "EhMKC2NyZWF0ZV90aW1lGAEgAigSEhMKC2RlbGV0ZV90aW1lGAIgASgSIrsC" + 
          "Cg9TYXZlZERlZmluaXRpb24SDwoHdmVyc2lvbhgBIAIoDRIfCgZkaWdlc3QY" + 
          "AiABKAsyDy5EMy5IZXJvLkRpZ2VzdBJBChBzYXZlZF9hdHRyaWJ1dGVzGAMg" + 
          "AigLMicuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0ZXMS" + 
          "JgoKc2F2ZWRfZGF0YRgEIAEoCzISLkQzLkhlcm8uU2F2ZWREYXRhEigKC3Nh" + 
          "dmVkX3F1ZXN0GAUgAygLMhMuRDMuSGVyby5TYXZlZFF1ZXN0EiEKBWl0ZW1z" + 
          "GAYgASgLMhIuRDMuSXRlbXMuSXRlbUxpc3QSPgoUcXVlc3RfcmV3YXJkX2hp" + 
          "c3RvcnkYByADKAsyIC5EMy5IZXJvLlF1ZXN0UmV3YXJkSGlzdG9yeUVudHJ5" + 
          "IiAKDE5hbWVTZXF1ZW5jZRIQCghzZXF1ZW5jZRgBIAEoAyIYCghOYW1lVGV4" + 
          "dBIMCgRuYW1lGAEgAigJIncKBkVzY3JvdxIPCgd2ZXJzaW9uGAEgAigNEiYK" + 
          "CWdlbmVyYXRvchgCIAEoCzITLkQzLkl0ZW1zLkdlbmVyYXRvchIlCgloZXJv" + 
          "X2RhdGEYAyABKAsyEi5EMy5IZXJvLlNhdmVkRGF0YRINCgVzdGF0ZRgEIAEo" + 
          "DQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Hero_VisualItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Hero_VisualItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder>(internal__static_D3_Hero_VisualItem__Descriptor,
                new string[] { "Gbid", "DyeType", "ItemEffectType", "EffectLevel", });
        internal__static_D3_Hero_VisualEquipment__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Hero_VisualEquipment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder>(internal__static_D3_Hero_VisualEquipment__Descriptor,
                new string[] { "VisualItem", });
        internal__static_D3_Hero_QuestHistoryEntry__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder>(internal__static_D3_Hero_QuestHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "Difficulty", });
        internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder>(internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "StepUid", "Difficulty", });
        internal__static_D3_Hero_Digest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Hero_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder>(internal__static_D3_Hero_Digest__Descriptor,
                new string[] { "Version", "HeroId", "HeroName", "GbidClass", "Level", "PlayerFlags", "VisualEquipment", "QuestHistory", "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficulty", "HighestUnlockedDifficulty", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", });
        internal__static_D3_Hero_HotbarButtonData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HotbarButtonData, global::D3.Hero.HotbarButtonData.Builder>(internal__static_D3_Hero_HotbarButtonData__Descriptor,
                new string[] { "SnoPower", "GbidItem", });
        internal__static_D3_Hero_SkillKeyMapping__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillKeyMapping, global::D3.Hero.SkillKeyMapping.Builder>(internal__static_D3_Hero_SkillKeyMapping__Descriptor,
                new string[] { "SnoPower", "IdHotkey", "SkillButton", });
        internal__static_D3_Hero_SavedQuest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Hero_SavedQuest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder>(internal__static_D3_Hero_SavedQuest__Descriptor,
                new string[] { "SnoQuest", "Difficulty", "CurrentStepUid", "ObjectiveState", "FailureConditionState", });
        internal__static_D3_Hero_LearnedLore__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Hero_LearnedLore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LearnedLore, global::D3.Hero.LearnedLore.Builder>(internal__static_D3_Hero_LearnedLore__Descriptor,
                new string[] { "SnoLoreLearned", });
        internal__static_D3_Hero_SavedConversations__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Hero_SavedConversations__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder>(internal__static_D3_Hero_SavedConversations__Descriptor,
                new string[] { "PlayedConversationsBitfield", "SnoSavedConversations", });
        internal__static_D3_Hero_SavePointData_Proto__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder>(internal__static_D3_Hero_SavePointData_Proto__Descriptor,
                new string[] { "SnoWorld", "SavepointNumber", "CreatesPortal", });
        internal__static_D3_Hero_SavedData__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Hero_SavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder>(internal__static_D3_Hero_SavedData__Descriptor,
                new string[] { "HotbarButtonAssignments", "SkillKeyMap", "TimePlayed", "ActivatedWaypoints", "HirelingSavedData", "LastLevelTime", "LearnedLore", "SavedConversations", "SnoActiveSkills", "SnoTraits", "SeenTutorials", "SavePoint", });
        internal__static_D3_Hero_Timestamps__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Hero_Timestamps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder>(internal__static_D3_Hero_Timestamps__Descriptor,
                new string[] { "CreateTime", "DeleteTime", });
        internal__static_D3_Hero_SavedDefinition__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Hero_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder>(internal__static_D3_Hero_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "SavedData", "SavedQuest", "Items", "QuestRewardHistory", });
        internal__static_D3_Hero_NameSequence__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Hero_NameSequence__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameSequence, global::D3.Hero.NameSequence.Builder>(internal__static_D3_Hero_NameSequence__Descriptor,
                new string[] { "Sequence", });
        internal__static_D3_Hero_NameText__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Hero_NameText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder>(internal__static_D3_Hero_NameText__Descriptor,
                new string[] { "Name", });
        internal__static_D3_Hero_Escrow__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Hero_Escrow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Escrow, global::D3.Hero.Escrow.Builder>(internal__static_D3_Hero_Escrow__Descriptor,
                new string[] { "Version", "Generator", "HeroData", "State", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Hireling.Hireling.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class VisualItem : pb::GeneratedMessage<VisualItem, VisualItem.Builder> {
    private static readonly VisualItem defaultInstance = new Builder().BuildPartial();
    public static VisualItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualItem DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override VisualItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualItem, VisualItem.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualItem__FieldAccessorTable; }
    }
    
    public const int GbidFieldNumber = 1;
    private bool hasGbid;
    private int gbid_ = 0;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public const int DyeTypeFieldNumber = 2;
    private bool hasDyeType;
    private int dyeType_ = 0;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    public int DyeType {
      get { return dyeType_; }
    }
    
    public const int ItemEffectTypeFieldNumber = 3;
    private bool hasItemEffectType;
    private int itemEffectType_ = 0;
    public bool HasItemEffectType {
      get { return hasItemEffectType; }
    }
    public int ItemEffectType {
      get { return itemEffectType_; }
    }
    
    public const int EffectLevelFieldNumber = 4;
    private bool hasEffectLevel;
    private int effectLevel_ = 0;
    public bool HasEffectLevel {
      get { return hasEffectLevel; }
    }
    public int EffectLevel {
      get { return effectLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasGbid) {
        output.WriteSFixed32(1, Gbid);
      }
      if (HasDyeType) {
        output.WriteSInt32(2, DyeType);
      }
      if (HasItemEffectType) {
        output.WriteSInt32(3, ItemEffectType);
      }
      if (HasEffectLevel) {
        output.WriteSInt32(4, EffectLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Gbid);
        }
        if (HasDyeType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, DyeType);
        }
        if (HasItemEffectType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, ItemEffectType);
        }
        if (HasEffectLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, EffectLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualItem prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<VisualItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      VisualItem result = new VisualItem();
      
      protected override VisualItem MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new VisualItem();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualItem.Descriptor; }
      }
      
      public override VisualItem DefaultInstanceForType {
        get { return global::D3.Hero.VisualItem.DefaultInstance; }
      }
      
      public override VisualItem BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        VisualItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualItem) {
          return MergeFrom((VisualItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualItem other) {
        if (other == global::D3.Hero.VisualItem.DefaultInstance) return this;
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        if (other.HasItemEffectType) {
          ItemEffectType = other.ItemEffectType;
        }
        if (other.HasEffectLevel) {
          EffectLevel = other.EffectLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              Gbid = input.ReadSFixed32();
              break;
            }
            case 16: {
              DyeType = input.ReadSInt32();
              break;
            }
            case 24: {
              ItemEffectType = input.ReadSInt32();
              break;
            }
            case 32: {
              EffectLevel = input.ReadSInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasGbid {
        get { return result.HasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        result.hasGbid = false;
        result.gbid_ = 0;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.HasDyeType; }
      }
      public int DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      public Builder SetDyeType(int value) {
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      public bool HasItemEffectType {
        get { return result.HasItemEffectType; }
      }
      public int ItemEffectType {
        get { return result.ItemEffectType; }
        set { SetItemEffectType(value); }
      }
      public Builder SetItemEffectType(int value) {
        result.hasItemEffectType = true;
        result.itemEffectType_ = value;
        return this;
      }
      public Builder ClearItemEffectType() {
        result.hasItemEffectType = false;
        result.itemEffectType_ = 0;
        return this;
      }
      
      public bool HasEffectLevel {
        get { return result.HasEffectLevel; }
      }
      public int EffectLevel {
        get { return result.EffectLevel; }
        set { SetEffectLevel(value); }
      }
      public Builder SetEffectLevel(int value) {
        result.hasEffectLevel = true;
        result.effectLevel_ = value;
        return this;
      }
      public Builder ClearEffectLevel() {
        result.hasEffectLevel = false;
        result.effectLevel_ = 0;
        return this;
      }
    }
    static VisualItem() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class VisualEquipment : pb::GeneratedMessage<VisualEquipment, VisualEquipment.Builder> {
    private static readonly VisualEquipment defaultInstance = new Builder().BuildPartial();
    public static VisualEquipment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualEquipment DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override VisualEquipment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualEquipment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualEquipment, VisualEquipment.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualEquipment__FieldAccessorTable; }
    }
    
    public const int VisualItemFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.VisualItem> visualItem_ = new pbc::PopsicleList<global::D3.Hero.VisualItem>();
    public scg::IList<global::D3.Hero.VisualItem> VisualItemList {
      get { return visualItem_; }
    }
    public int VisualItemCount {
      get { return visualItem_.Count; }
    }
    public global::D3.Hero.VisualItem GetVisualItem(int index) {
      return visualItem_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.Hero.VisualItem element in VisualItemList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.VisualItem element in VisualItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualEquipment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualEquipment prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<VisualEquipment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      VisualEquipment result = new VisualEquipment();
      
      protected override VisualEquipment MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new VisualEquipment();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualEquipment.Descriptor; }
      }
      
      public override VisualEquipment DefaultInstanceForType {
        get { return global::D3.Hero.VisualEquipment.DefaultInstance; }
      }
      
      public override VisualEquipment BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.visualItem_.MakeReadOnly();
        VisualEquipment returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualEquipment) {
          return MergeFrom((VisualEquipment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualEquipment other) {
        if (other == global::D3.Hero.VisualEquipment.DefaultInstance) return this;
        if (other.visualItem_.Count != 0) {
          base.AddRange(other.visualItem_, result.visualItem_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Hero.VisualItem.Builder subBuilder = global::D3.Hero.VisualItem.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddVisualItem(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.VisualItem> VisualItemList {
        get { return result.visualItem_; }
      }
      public int VisualItemCount {
        get { return result.VisualItemCount; }
      }
      public global::D3.Hero.VisualItem GetVisualItem(int index) {
        return result.GetVisualItem(index);
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.visualItem_[index] = value;
        return this;
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.visualItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.visualItem_.Add(value);
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.visualItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVisualItem(scg::IEnumerable<global::D3.Hero.VisualItem> values) {
        base.AddRange(values, result.visualItem_);
        return this;
      }
      public Builder ClearVisualItem() {
        result.visualItem_.Clear();
        return this;
      }
    }
    static VisualEquipment() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class QuestHistoryEntry : pb::GeneratedMessage<QuestHistoryEntry, QuestHistoryEntry.Builder> {
    private static readonly QuestHistoryEntry defaultInstance = new Builder().BuildPartial();
    public static QuestHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestHistoryEntry DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override QuestHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestHistoryEntry, QuestHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = 0;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyFieldNumber = 2;
    private bool hasDifficulty;
    private int difficulty_ = 0;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasDifficulty) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoQuest) {
        output.WriteSFixed32(1, SnoQuest);
      }
      if (HasDifficulty) {
        output.WriteSInt32(2, Difficulty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (HasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Difficulty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestHistoryEntry prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<QuestHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      QuestHistoryEntry result = new QuestHistoryEntry();
      
      protected override QuestHistoryEntry MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new QuestHistoryEntry();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestHistoryEntry.Descriptor; }
      }
      
      public override QuestHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestHistoryEntry.DefaultInstance; }
      }
      
      public override QuestHistoryEntry BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        QuestHistoryEntry returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestHistoryEntry) {
          return MergeFrom((QuestHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestHistoryEntry other) {
        if (other == global::D3.Hero.QuestHistoryEntry.DefaultInstance) return this;
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoQuest = input.ReadSFixed32();
              break;
            }
            case 16: {
              Difficulty = input.ReadSInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoQuest {
        get { return result.HasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.HasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
    }
    static QuestHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class QuestRewardHistoryEntry : pb::GeneratedMessage<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> {
    private static readonly QuestRewardHistoryEntry defaultInstance = new Builder().BuildPartial();
    public static QuestRewardHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestRewardHistoryEntry DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override QuestRewardHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = 0;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int StepUidFieldNumber = 2;
    private bool hasStepUid;
    private int stepUid_ = 0;
    public bool HasStepUid {
      get { return hasStepUid; }
    }
    public int StepUid {
      get { return stepUid_; }
    }
    
    public const int DifficultyFieldNumber = 3;
    private bool hasDifficulty;
    private int difficulty_ = 0;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasStepUid) return false;
        if (!hasDifficulty) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoQuest) {
        output.WriteSFixed32(1, SnoQuest);
      }
      if (HasStepUid) {
        output.WriteSInt32(2, StepUid);
      }
      if (HasDifficulty) {
        output.WriteSInt32(3, Difficulty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (HasStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, StepUid);
        }
        if (HasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Difficulty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestRewardHistoryEntry prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<QuestRewardHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      QuestRewardHistoryEntry result = new QuestRewardHistoryEntry();
      
      protected override QuestRewardHistoryEntry MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new QuestRewardHistoryEntry();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.Descriptor; }
      }
      
      public override QuestRewardHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance; }
      }
      
      public override QuestRewardHistoryEntry BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        QuestRewardHistoryEntry returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestRewardHistoryEntry) {
          return MergeFrom((QuestRewardHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestRewardHistoryEntry other) {
        if (other == global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance) return this;
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasStepUid) {
          StepUid = other.StepUid;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoQuest = input.ReadSFixed32();
              break;
            }
            case 16: {
              StepUid = input.ReadSInt32();
              break;
            }
            case 24: {
              Difficulty = input.ReadSInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoQuest {
        get { return result.HasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      public bool HasStepUid {
        get { return result.HasStepUid; }
      }
      public int StepUid {
        get { return result.StepUid; }
        set { SetStepUid(value); }
      }
      public Builder SetStepUid(int value) {
        result.hasStepUid = true;
        result.stepUid_ = value;
        return this;
      }
      public Builder ClearStepUid() {
        result.hasStepUid = false;
        result.stepUid_ = 0;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.HasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
    }
    static QuestRewardHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private static readonly Digest defaultInstance = new Builder().BuildPartial();
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_; }
    }
    
    public const int HeroNameFieldNumber = 3;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int GbidClassFieldNumber = 4;
    private bool hasGbidClass;
    private int gbidClass_ = 0;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int LevelFieldNumber = 5;
    private bool hasLevel;
    private int level_ = 0;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int PlayerFlagsFieldNumber = 6;
    private bool hasPlayerFlags;
    private uint playerFlags_ = 0;
    public bool HasPlayerFlags {
      get { return hasPlayerFlags; }
    }
    public uint PlayerFlags {
      get { return playerFlags_; }
    }
    
    public const int VisualEquipmentFieldNumber = 7;
    private bool hasVisualEquipment;
    private global::D3.Hero.VisualEquipment visualEquipment_ = global::D3.Hero.VisualEquipment.DefaultInstance;
    public bool HasVisualEquipment {
      get { return hasVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment VisualEquipment {
      get { return visualEquipment_; }
    }
    
    public const int QuestHistoryFieldNumber = 8;
    private pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry> questHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
      get { return questHistory_; }
    }
    public int QuestHistoryCount {
      get { return questHistory_.Count; }
    }
    public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
      return questHistory_[index];
    }
    
    public const int LastPlayedActFieldNumber = 10;
    private bool hasLastPlayedAct;
    private int lastPlayedAct_ = 0;
    public bool HasLastPlayedAct {
      get { return hasLastPlayedAct; }
    }
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
    }
    
    public const int HighestUnlockedActFieldNumber = 11;
    private bool hasHighestUnlockedAct;
    private int highestUnlockedAct_ = 0;
    public bool HasHighestUnlockedAct {
      get { return hasHighestUnlockedAct; }
    }
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
    }
    
    public const int LastPlayedDifficultyFieldNumber = 12;
    private bool hasLastPlayedDifficulty;
    private int lastPlayedDifficulty_ = 0;
    public bool HasLastPlayedDifficulty {
      get { return hasLastPlayedDifficulty; }
    }
    public int LastPlayedDifficulty {
      get { return lastPlayedDifficulty_; }
    }
    
    public const int HighestUnlockedDifficultyFieldNumber = 13;
    private bool hasHighestUnlockedDifficulty;
    private int highestUnlockedDifficulty_ = 0;
    public bool HasHighestUnlockedDifficulty {
      get { return hasHighestUnlockedDifficulty; }
    }
    public int HighestUnlockedDifficulty {
      get { return highestUnlockedDifficulty_; }
    }
    
    public const int LastPlayedQuestFieldNumber = 14;
    private bool hasLastPlayedQuest;
    private int lastPlayedQuest_ = 0;
    public bool HasLastPlayedQuest {
      get { return hasLastPlayedQuest; }
    }
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
    }
    
    public const int LastPlayedQuestStepFieldNumber = 15;
    private bool hasLastPlayedQuestStep;
    private int lastPlayedQuestStep_ = 0;
    public bool HasLastPlayedQuestStep {
      get { return hasLastPlayedQuestStep; }
    }
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
    }
    
    public const int TimePlayedFieldNumber = 16;
    private bool hasTimePlayed;
    private uint timePlayed_ = 0;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasHeroId) return false;
        if (!hasHeroName) return false;
        if (!hasGbidClass) return false;
        if (!hasLevel) return false;
        if (!hasPlayerFlags) return false;
        if (!hasVisualEquipment) return false;
        if (!hasLastPlayedAct) return false;
        if (!hasHighestUnlockedAct) return false;
        if (!hasLastPlayedDifficulty) return false;
        if (!hasHighestUnlockedDifficulty) return false;
        if (!hasLastPlayedQuest) return false;
        if (!hasLastPlayedQuestStep) return false;
        if (!hasTimePlayed) return false;
        if (!HeroId.IsInitialized) return false;
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasVersion) {
        output.WriteUInt32(1, Version);
      }
      if (HasHeroId) {
        output.WriteMessage(2, HeroId);
      }
      if (HasHeroName) {
        output.WriteString(3, HeroName);
      }
      if (HasGbidClass) {
        output.WriteSFixed32(4, GbidClass);
      }
      if (HasLevel) {
        output.WriteSInt32(5, Level);
      }
      if (HasPlayerFlags) {
        output.WriteUInt32(6, PlayerFlags);
      }
      if (HasVisualEquipment) {
        output.WriteMessage(7, VisualEquipment);
      }
      foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
        output.WriteMessage(8, element);
      }
      if (HasLastPlayedAct) {
        output.WriteSInt32(10, LastPlayedAct);
      }
      if (HasHighestUnlockedAct) {
        output.WriteSInt32(11, HighestUnlockedAct);
      }
      if (HasLastPlayedDifficulty) {
        output.WriteSInt32(12, LastPlayedDifficulty);
      }
      if (HasHighestUnlockedDifficulty) {
        output.WriteSInt32(13, HighestUnlockedDifficulty);
      }
      if (HasLastPlayedQuest) {
        output.WriteSFixed32(14, LastPlayedQuest);
      }
      if (HasLastPlayedQuestStep) {
        output.WriteSInt32(15, LastPlayedQuestStep);
      }
      if (HasTimePlayed) {
        output.WriteUInt32(16, TimePlayed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (HasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        if (HasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, HeroName);
        }
        if (HasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, GbidClass);
        }
        if (HasLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Level);
        }
        if (HasPlayerFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, PlayerFlags);
        }
        if (HasVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, VisualEquipment);
        }
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (HasLastPlayedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, LastPlayedAct);
        }
        if (HasHighestUnlockedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, HighestUnlockedAct);
        }
        if (HasLastPlayedDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, LastPlayedDifficulty);
        }
        if (HasHighestUnlockedDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(13, HighestUnlockedDifficulty);
        }
        if (HasLastPlayedQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(14, LastPlayedQuest);
        }
        if (HasLastPlayedQuestStep) {
          size += pb::CodedOutputStream.ComputeSInt32Size(15, LastPlayedQuestStep);
        }
        if (HasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, TimePlayed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Digest result = new Digest();
      
      protected override Digest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Digest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Hero.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.questHistory_.MakeReadOnly();
        Digest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Hero.Digest.DefaultInstance) return this;
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasPlayerFlags) {
          PlayerFlags = other.PlayerFlags;
        }
        if (other.HasVisualEquipment) {
          MergeVisualEquipment(other.VisualEquipment);
        }
        if (other.questHistory_.Count != 0) {
          base.AddRange(other.questHistory_, result.questHistory_);
        }
        if (other.HasLastPlayedAct) {
          LastPlayedAct = other.LastPlayedAct;
        }
        if (other.HasHighestUnlockedAct) {
          HighestUnlockedAct = other.HighestUnlockedAct;
        }
        if (other.HasLastPlayedDifficulty) {
          LastPlayedDifficulty = other.LastPlayedDifficulty;
        }
        if (other.HasHighestUnlockedDifficulty) {
          HighestUnlockedDifficulty = other.HighestUnlockedDifficulty;
        }
        if (other.HasLastPlayedQuest) {
          LastPlayedQuest = other.LastPlayedQuest;
        }
        if (other.HasLastPlayedQuestStep) {
          LastPlayedQuestStep = other.LastPlayedQuestStep;
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Version = input.ReadUInt32();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              HeroName = input.ReadString();
              break;
            }
            case 37: {
              GbidClass = input.ReadSFixed32();
              break;
            }
            case 40: {
              Level = input.ReadSInt32();
              break;
            }
            case 48: {
              PlayerFlags = input.ReadUInt32();
              break;
            }
            case 58: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (HasVisualEquipment) {
                subBuilder.MergeFrom(VisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VisualEquipment = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.Hero.QuestHistoryEntry.Builder subBuilder = global::D3.Hero.QuestHistoryEntry.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddQuestHistory(subBuilder.BuildPartial());
              break;
            }
            case 80: {
              LastPlayedAct = input.ReadSInt32();
              break;
            }
            case 88: {
              HighestUnlockedAct = input.ReadSInt32();
              break;
            }
            case 96: {
              LastPlayedDifficulty = input.ReadSInt32();
              break;
            }
            case 104: {
              HighestUnlockedDifficulty = input.ReadSInt32();
              break;
            }
            case 117: {
              LastPlayedQuest = input.ReadSFixed32();
              break;
            }
            case 120: {
              LastPlayedQuestStep = input.ReadSInt32();
              break;
            }
            case 128: {
              TimePlayed = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.HasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        result.hasHeroId = false;
        result.heroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.HasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasGbidClass {
        get { return result.HasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.HasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasPlayerFlags {
        get { return result.HasPlayerFlags; }
      }
      public uint PlayerFlags {
        get { return result.PlayerFlags; }
        set { SetPlayerFlags(value); }
      }
      public Builder SetPlayerFlags(uint value) {
        result.hasPlayerFlags = true;
        result.playerFlags_ = value;
        return this;
      }
      public Builder ClearPlayerFlags() {
        result.hasPlayerFlags = false;
        result.playerFlags_ = 0;
        return this;
      }
      
      public bool HasVisualEquipment {
       get { return result.HasVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment VisualEquipment {
        get { return result.VisualEquipment; }
        set { SetVisualEquipment(value); }
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVisualEquipment = true;
        result.visualEquipment_ = value;
        return this;
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasVisualEquipment = true;
        result.visualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasVisualEquipment &&
            result.visualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.visualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.visualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.visualEquipment_ = value;
        }
        result.hasVisualEquipment = true;
        return this;
      }
      public Builder ClearVisualEquipment() {
        result.hasVisualEquipment = false;
        result.visualEquipment_ = global::D3.Hero.VisualEquipment.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
        get { return result.questHistory_; }
      }
      public int QuestHistoryCount {
        get { return result.QuestHistoryCount; }
      }
      public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
        return result.GetQuestHistory(index);
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.questHistory_[index] = value;
        return this;
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.questHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.questHistory_.Add(value);
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.questHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestHistory(scg::IEnumerable<global::D3.Hero.QuestHistoryEntry> values) {
        base.AddRange(values, result.questHistory_);
        return this;
      }
      public Builder ClearQuestHistory() {
        result.questHistory_.Clear();
        return this;
      }
      
      public bool HasLastPlayedAct {
        get { return result.HasLastPlayedAct; }
      }
      public int LastPlayedAct {
        get { return result.LastPlayedAct; }
        set { SetLastPlayedAct(value); }
      }
      public Builder SetLastPlayedAct(int value) {
        result.hasLastPlayedAct = true;
        result.lastPlayedAct_ = value;
        return this;
      }
      public Builder ClearLastPlayedAct() {
        result.hasLastPlayedAct = false;
        result.lastPlayedAct_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedAct {
        get { return result.HasHighestUnlockedAct; }
      }
      public int HighestUnlockedAct {
        get { return result.HighestUnlockedAct; }
        set { SetHighestUnlockedAct(value); }
      }
      public Builder SetHighestUnlockedAct(int value) {
        result.hasHighestUnlockedAct = true;
        result.highestUnlockedAct_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedAct() {
        result.hasHighestUnlockedAct = false;
        result.highestUnlockedAct_ = 0;
        return this;
      }
      
      public bool HasLastPlayedDifficulty {
        get { return result.HasLastPlayedDifficulty; }
      }
      public int LastPlayedDifficulty {
        get { return result.LastPlayedDifficulty; }
        set { SetLastPlayedDifficulty(value); }
      }
      public Builder SetLastPlayedDifficulty(int value) {
        result.hasLastPlayedDifficulty = true;
        result.lastPlayedDifficulty_ = value;
        return this;
      }
      public Builder ClearLastPlayedDifficulty() {
        result.hasLastPlayedDifficulty = false;
        result.lastPlayedDifficulty_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedDifficulty {
        get { return result.HasHighestUnlockedDifficulty; }
      }
      public int HighestUnlockedDifficulty {
        get { return result.HighestUnlockedDifficulty; }
        set { SetHighestUnlockedDifficulty(value); }
      }
      public Builder SetHighestUnlockedDifficulty(int value) {
        result.hasHighestUnlockedDifficulty = true;
        result.highestUnlockedDifficulty_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedDifficulty() {
        result.hasHighestUnlockedDifficulty = false;
        result.highestUnlockedDifficulty_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuest {
        get { return result.HasLastPlayedQuest; }
      }
      public int LastPlayedQuest {
        get { return result.LastPlayedQuest; }
        set { SetLastPlayedQuest(value); }
      }
      public Builder SetLastPlayedQuest(int value) {
        result.hasLastPlayedQuest = true;
        result.lastPlayedQuest_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuest() {
        result.hasLastPlayedQuest = false;
        result.lastPlayedQuest_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuestStep {
        get { return result.HasLastPlayedQuestStep; }
      }
      public int LastPlayedQuestStep {
        get { return result.LastPlayedQuestStep; }
        set { SetLastPlayedQuestStep(value); }
      }
      public Builder SetLastPlayedQuestStep(int value) {
        result.hasLastPlayedQuestStep = true;
        result.lastPlayedQuestStep_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuestStep() {
        result.hasLastPlayedQuestStep = false;
        result.lastPlayedQuestStep_ = 0;
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.HasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class HotbarButtonData : pb::GeneratedMessage<HotbarButtonData, HotbarButtonData.Builder> {
    private static readonly HotbarButtonData defaultInstance = new Builder().BuildPartial();
    public static HotbarButtonData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HotbarButtonData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HotbarButtonData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HotbarButtonData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HotbarButtonData, HotbarButtonData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable; }
    }
    
    public const int SnoPowerFieldNumber = 1;
    private bool hasSnoPower;
    private int snoPower_ = 0;
    public bool HasSnoPower {
      get { return hasSnoPower; }
    }
    public int SnoPower {
      get { return snoPower_; }
    }
    
    public const int GbidItemFieldNumber = 2;
    private bool hasGbidItem;
    private int gbidItem_ = 0;
    public bool HasGbidItem {
      get { return hasGbidItem; }
    }
    public int GbidItem {
      get { return gbidItem_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoPower) return false;
        if (!hasGbidItem) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoPower) {
        output.WriteSFixed32(1, SnoPower);
      }
      if (HasGbidItem) {
        output.WriteSFixed32(2, GbidItem);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoPower) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoPower);
        }
        if (HasGbidItem) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, GbidItem);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HotbarButtonData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HotbarButtonData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HotbarButtonData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HotbarButtonData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HotbarButtonData result = new HotbarButtonData();
      
      protected override HotbarButtonData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HotbarButtonData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.HotbarButtonData.Descriptor; }
      }
      
      public override HotbarButtonData DefaultInstanceForType {
        get { return global::D3.Hero.HotbarButtonData.DefaultInstance; }
      }
      
      public override HotbarButtonData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        HotbarButtonData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HotbarButtonData) {
          return MergeFrom((HotbarButtonData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HotbarButtonData other) {
        if (other == global::D3.Hero.HotbarButtonData.DefaultInstance) return this;
        if (other.HasSnoPower) {
          SnoPower = other.SnoPower;
        }
        if (other.HasGbidItem) {
          GbidItem = other.GbidItem;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoPower = input.ReadSFixed32();
              break;
            }
            case 21: {
              GbidItem = input.ReadSFixed32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoPower {
        get { return result.HasSnoPower; }
      }
      public int SnoPower {
        get { return result.SnoPower; }
        set { SetSnoPower(value); }
      }
      public Builder SetSnoPower(int value) {
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder ClearSnoPower() {
        result.hasSnoPower = false;
        result.snoPower_ = 0;
        return this;
      }
      
      public bool HasGbidItem {
        get { return result.HasGbidItem; }
      }
      public int GbidItem {
        get { return result.GbidItem; }
        set { SetGbidItem(value); }
      }
      public Builder SetGbidItem(int value) {
        result.hasGbidItem = true;
        result.gbidItem_ = value;
        return this;
      }
      public Builder ClearGbidItem() {
        result.hasGbidItem = false;
        result.gbidItem_ = 0;
        return this;
      }
    }
    static HotbarButtonData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SkillKeyMapping : pb::GeneratedMessage<SkillKeyMapping, SkillKeyMapping.Builder> {
    private static readonly SkillKeyMapping defaultInstance = new Builder().BuildPartial();
    public static SkillKeyMapping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillKeyMapping DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SkillKeyMapping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SkillKeyMapping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillKeyMapping, SkillKeyMapping.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable; }
    }
    
    public const int SnoPowerFieldNumber = 1;
    private bool hasSnoPower;
    private int snoPower_ = 0;
    public bool HasSnoPower {
      get { return hasSnoPower; }
    }
    public int SnoPower {
      get { return snoPower_; }
    }
    
    public const int IdHotkeyFieldNumber = 2;
    private bool hasIdHotkey;
    private int idHotkey_ = 0;
    public bool HasIdHotkey {
      get { return hasIdHotkey; }
    }
    public int IdHotkey {
      get { return idHotkey_; }
    }
    
    public const int SkillButtonFieldNumber = 3;
    private bool hasSkillButton;
    private int skillButton_ = 0;
    public bool HasSkillButton {
      get { return hasSkillButton; }
    }
    public int SkillButton {
      get { return skillButton_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoPower) return false;
        if (!hasIdHotkey) return false;
        if (!hasSkillButton) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoPower) {
        output.WriteSFixed32(1, SnoPower);
      }
      if (HasIdHotkey) {
        output.WriteSInt32(2, IdHotkey);
      }
      if (HasSkillButton) {
        output.WriteSInt32(3, SkillButton);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoPower) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoPower);
        }
        if (HasIdHotkey) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, IdHotkey);
        }
        if (HasSkillButton) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, SkillButton);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillKeyMapping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillKeyMapping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillKeyMapping prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SkillKeyMapping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SkillKeyMapping result = new SkillKeyMapping();
      
      protected override SkillKeyMapping MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SkillKeyMapping();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SkillKeyMapping.Descriptor; }
      }
      
      public override SkillKeyMapping DefaultInstanceForType {
        get { return global::D3.Hero.SkillKeyMapping.DefaultInstance; }
      }
      
      public override SkillKeyMapping BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SkillKeyMapping returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillKeyMapping) {
          return MergeFrom((SkillKeyMapping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillKeyMapping other) {
        if (other == global::D3.Hero.SkillKeyMapping.DefaultInstance) return this;
        if (other.HasSnoPower) {
          SnoPower = other.SnoPower;
        }
        if (other.HasIdHotkey) {
          IdHotkey = other.IdHotkey;
        }
        if (other.HasSkillButton) {
          SkillButton = other.SkillButton;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoPower = input.ReadSFixed32();
              break;
            }
            case 16: {
              IdHotkey = input.ReadSInt32();
              break;
            }
            case 24: {
              SkillButton = input.ReadSInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoPower {
        get { return result.HasSnoPower; }
      }
      public int SnoPower {
        get { return result.SnoPower; }
        set { SetSnoPower(value); }
      }
      public Builder SetSnoPower(int value) {
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder ClearSnoPower() {
        result.hasSnoPower = false;
        result.snoPower_ = 0;
        return this;
      }
      
      public bool HasIdHotkey {
        get { return result.HasIdHotkey; }
      }
      public int IdHotkey {
        get { return result.IdHotkey; }
        set { SetIdHotkey(value); }
      }
      public Builder SetIdHotkey(int value) {
        result.hasIdHotkey = true;
        result.idHotkey_ = value;
        return this;
      }
      public Builder ClearIdHotkey() {
        result.hasIdHotkey = false;
        result.idHotkey_ = 0;
        return this;
      }
      
      public bool HasSkillButton {
        get { return result.HasSkillButton; }
      }
      public int SkillButton {
        get { return result.SkillButton; }
        set { SetSkillButton(value); }
      }
      public Builder SetSkillButton(int value) {
        result.hasSkillButton = true;
        result.skillButton_ = value;
        return this;
      }
      public Builder ClearSkillButton() {
        result.hasSkillButton = false;
        result.skillButton_ = 0;
        return this;
      }
    }
    static SkillKeyMapping() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SavedQuest : pb::GeneratedMessage<SavedQuest, SavedQuest.Builder> {
    private static readonly SavedQuest defaultInstance = new Builder().BuildPartial();
    public static SavedQuest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedQuest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedQuest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedQuest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedQuest, SavedQuest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedQuest__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = 0;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyFieldNumber = 2;
    private bool hasDifficulty;
    private int difficulty_ = 0;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public const int CurrentStepUidFieldNumber = 3;
    private bool hasCurrentStepUid;
    private int currentStepUid_ = 0;
    public bool HasCurrentStepUid {
      get { return hasCurrentStepUid; }
    }
    public int CurrentStepUid {
      get { return currentStepUid_; }
    }
    
    public const int ObjectiveStateFieldNumber = 4;
    private pbc::PopsicleList<int> objectiveState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ObjectiveStateList {
      get { return pbc::Lists.AsReadOnly(objectiveState_); }
    }
    public int ObjectiveStateCount {
      get { return objectiveState_.Count; }
    }
    public int GetObjectiveState(int index) {
      return objectiveState_[index];
    }
    
    public const int FailureConditionStateFieldNumber = 5;
    private pbc::PopsicleList<int> failureConditionState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> FailureConditionStateList {
      get { return pbc::Lists.AsReadOnly(failureConditionState_); }
    }
    public int FailureConditionStateCount {
      get { return failureConditionState_.Count; }
    }
    public int GetFailureConditionState(int index) {
      return failureConditionState_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasDifficulty) return false;
        if (!hasCurrentStepUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoQuest) {
        output.WriteSFixed32(1, SnoQuest);
      }
      if (HasDifficulty) {
        output.WriteSInt32(2, Difficulty);
      }
      if (HasCurrentStepUid) {
        output.WriteSInt32(3, CurrentStepUid);
      }
      if (objectiveState_.Count > 0) {
        foreach (int element in objectiveState_) {
          output.WriteSInt32(4, element);
        }
      }
      if (failureConditionState_.Count > 0) {
        foreach (int element in failureConditionState_) {
          output.WriteSInt32(5, element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (HasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Difficulty);
        }
        if (HasCurrentStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, CurrentStepUid);
        }
        {
          int dataSize = 0;
          foreach (int element in ObjectiveStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * objectiveState_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in FailureConditionStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * failureConditionState_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedQuest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedQuest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavedQuest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedQuest result = new SavedQuest();
      
      protected override SavedQuest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedQuest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedQuest.Descriptor; }
      }
      
      public override SavedQuest DefaultInstanceForType {
        get { return global::D3.Hero.SavedQuest.DefaultInstance; }
      }
      
      public override SavedQuest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.objectiveState_.MakeReadOnly();
        result.failureConditionState_.MakeReadOnly();
        SavedQuest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedQuest) {
          return MergeFrom((SavedQuest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedQuest other) {
        if (other == global::D3.Hero.SavedQuest.DefaultInstance) return this;
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        if (other.HasCurrentStepUid) {
          CurrentStepUid = other.CurrentStepUid;
        }
        if (other.objectiveState_.Count != 0) {
          base.AddRange(other.objectiveState_, result.objectiveState_);
        }
        if (other.failureConditionState_.Count != 0) {
          base.AddRange(other.failureConditionState_, result.failureConditionState_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoQuest = input.ReadSFixed32();
              break;
            }
            case 16: {
              Difficulty = input.ReadSInt32();
              break;
            }
            case 24: {
              CurrentStepUid = input.ReadSInt32();
              break;
            }
            case 32: {
              AddObjectiveState(input.ReadSInt32());
              break;
            }
            case 40: {
              AddFailureConditionState(input.ReadSInt32());
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoQuest {
        get { return result.HasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.HasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
      
      public bool HasCurrentStepUid {
        get { return result.HasCurrentStepUid; }
      }
      public int CurrentStepUid {
        get { return result.CurrentStepUid; }
        set { SetCurrentStepUid(value); }
      }
      public Builder SetCurrentStepUid(int value) {
        result.hasCurrentStepUid = true;
        result.currentStepUid_ = value;
        return this;
      }
      public Builder ClearCurrentStepUid() {
        result.hasCurrentStepUid = false;
        result.currentStepUid_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ObjectiveStateList {
        get { return result.objectiveState_; }
      }
      public int ObjectiveStateCount {
        get { return result.ObjectiveStateCount; }
      }
      public int GetObjectiveState(int index) {
        return result.GetObjectiveState(index);
      }
      public Builder SetObjectiveState(int index, int value) {
        result.objectiveState_[index] = value;
        return this;
      }
      public Builder AddObjectiveState(int value) {
        result.objectiveState_.Add(value);
        return this;
      }
      public Builder AddRangeObjectiveState(scg::IEnumerable<int> values) {
        base.AddRange(values, result.objectiveState_);
        return this;
      }
      public Builder ClearObjectiveState() {
        result.objectiveState_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> FailureConditionStateList {
        get { return result.failureConditionState_; }
      }
      public int FailureConditionStateCount {
        get { return result.FailureConditionStateCount; }
      }
      public int GetFailureConditionState(int index) {
        return result.GetFailureConditionState(index);
      }
      public Builder SetFailureConditionState(int index, int value) {
        result.failureConditionState_[index] = value;
        return this;
      }
      public Builder AddFailureConditionState(int value) {
        result.failureConditionState_.Add(value);
        return this;
      }
      public Builder AddRangeFailureConditionState(scg::IEnumerable<int> values) {
        base.AddRange(values, result.failureConditionState_);
        return this;
      }
      public Builder ClearFailureConditionState() {
        result.failureConditionState_.Clear();
        return this;
      }
    }
    static SavedQuest() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class LearnedLore : pb::GeneratedMessage<LearnedLore, LearnedLore.Builder> {
    private static readonly LearnedLore defaultInstance = new Builder().BuildPartial();
    public static LearnedLore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LearnedLore DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override LearnedLore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_LearnedLore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LearnedLore, LearnedLore.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_LearnedLore__FieldAccessorTable; }
    }
    
    public const int SnoLoreLearnedFieldNumber = 1;
    private pbc::PopsicleList<int> snoLoreLearned_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoLoreLearnedList {
      get { return pbc::Lists.AsReadOnly(snoLoreLearned_); }
    }
    public int SnoLoreLearnedCount {
      get { return snoLoreLearned_.Count; }
    }
    public int GetSnoLoreLearned(int index) {
      return snoLoreLearned_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (snoLoreLearned_.Count > 0) {
        foreach (int element in snoLoreLearned_) {
          output.WriteSFixed32(1, element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * snoLoreLearned_.Count;
          size += dataSize;
          size += 1 * snoLoreLearned_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LearnedLore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LearnedLore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LearnedLore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LearnedLore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LearnedLore prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<LearnedLore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      LearnedLore result = new LearnedLore();
      
      protected override LearnedLore MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new LearnedLore();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.LearnedLore.Descriptor; }
      }
      
      public override LearnedLore DefaultInstanceForType {
        get { return global::D3.Hero.LearnedLore.DefaultInstance; }
      }
      
      public override LearnedLore BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.snoLoreLearned_.MakeReadOnly();
        LearnedLore returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LearnedLore) {
          return MergeFrom((LearnedLore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LearnedLore other) {
        if (other == global::D3.Hero.LearnedLore.DefaultInstance) return this;
        if (other.snoLoreLearned_.Count != 0) {
          base.AddRange(other.snoLoreLearned_, result.snoLoreLearned_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              AddSnoLoreLearned(input.ReadSFixed32());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<int> SnoLoreLearnedList {
        get { return result.snoLoreLearned_; }
      }
      public int SnoLoreLearnedCount {
        get { return result.SnoLoreLearnedCount; }
      }
      public int GetSnoLoreLearned(int index) {
        return result.GetSnoLoreLearned(index);
      }
      public Builder SetSnoLoreLearned(int index, int value) {
        result.snoLoreLearned_[index] = value;
        return this;
      }
      public Builder AddSnoLoreLearned(int value) {
        result.snoLoreLearned_.Add(value);
        return this;
      }
      public Builder AddRangeSnoLoreLearned(scg::IEnumerable<int> values) {
        base.AddRange(values, result.snoLoreLearned_);
        return this;
      }
      public Builder ClearSnoLoreLearned() {
        result.snoLoreLearned_.Clear();
        return this;
      }
    }
    static LearnedLore() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SavedConversations : pb::GeneratedMessage<SavedConversations, SavedConversations.Builder> {
    private static readonly SavedConversations defaultInstance = new Builder().BuildPartial();
    public static SavedConversations DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedConversations DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedConversations ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedConversations__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedConversations, SavedConversations.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedConversations__FieldAccessorTable; }
    }
    
    public const int PlayedConversationsBitfieldFieldNumber = 1;
    private bool hasPlayedConversationsBitfield;
    private pb::ByteString playedConversationsBitfield_ = pb::ByteString.Empty;
    public bool HasPlayedConversationsBitfield {
      get { return hasPlayedConversationsBitfield; }
    }
    public pb::ByteString PlayedConversationsBitfield {
      get { return playedConversationsBitfield_; }
    }
    
    public const int SnoSavedConversationsFieldNumber = 2;
    private pbc::PopsicleList<int> snoSavedConversations_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoSavedConversationsList {
      get { return pbc::Lists.AsReadOnly(snoSavedConversations_); }
    }
    public int SnoSavedConversationsCount {
      get { return snoSavedConversations_.Count; }
    }
    public int GetSnoSavedConversations(int index) {
      return snoSavedConversations_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayedConversationsBitfield) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasPlayedConversationsBitfield) {
        output.WriteBytes(1, PlayedConversationsBitfield);
      }
      if (snoSavedConversations_.Count > 0) {
        foreach (int element in snoSavedConversations_) {
          output.WriteSFixed32(2, element);
        }
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasPlayedConversationsBitfield) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, PlayedConversationsBitfield);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoSavedConversations_.Count;
          size += dataSize;
          size += 1 * snoSavedConversations_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedConversations ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedConversations prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavedConversations, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedConversations result = new SavedConversations();
      
      protected override SavedConversations MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedConversations();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedConversations.Descriptor; }
      }
      
      public override SavedConversations DefaultInstanceForType {
        get { return global::D3.Hero.SavedConversations.DefaultInstance; }
      }
      
      public override SavedConversations BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.snoSavedConversations_.MakeReadOnly();
        SavedConversations returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedConversations) {
          return MergeFrom((SavedConversations) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedConversations other) {
        if (other == global::D3.Hero.SavedConversations.DefaultInstance) return this;
        if (other.HasPlayedConversationsBitfield) {
          PlayedConversationsBitfield = other.PlayedConversationsBitfield;
        }
        if (other.snoSavedConversations_.Count != 0) {
          base.AddRange(other.snoSavedConversations_, result.snoSavedConversations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              PlayedConversationsBitfield = input.ReadBytes();
              break;
            }
            case 21: {
              AddSnoSavedConversations(input.ReadSFixed32());
              break;
            }
          }
        }
      }
      
      
      public bool HasPlayedConversationsBitfield {
        get { return result.HasPlayedConversationsBitfield; }
      }
      public pb::ByteString PlayedConversationsBitfield {
        get { return result.PlayedConversationsBitfield; }
        set { SetPlayedConversationsBitfield(value); }
      }
      public Builder SetPlayedConversationsBitfield(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPlayedConversationsBitfield = true;
        result.playedConversationsBitfield_ = value;
        return this;
      }
      public Builder ClearPlayedConversationsBitfield() {
        result.hasPlayedConversationsBitfield = false;
        result.playedConversationsBitfield_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoSavedConversationsList {
        get { return result.snoSavedConversations_; }
      }
      public int SnoSavedConversationsCount {
        get { return result.SnoSavedConversationsCount; }
      }
      public int GetSnoSavedConversations(int index) {
        return result.GetSnoSavedConversations(index);
      }
      public Builder SetSnoSavedConversations(int index, int value) {
        result.snoSavedConversations_[index] = value;
        return this;
      }
      public Builder AddSnoSavedConversations(int value) {
        result.snoSavedConversations_.Add(value);
        return this;
      }
      public Builder AddRangeSnoSavedConversations(scg::IEnumerable<int> values) {
        base.AddRange(values, result.snoSavedConversations_);
        return this;
      }
      public Builder ClearSnoSavedConversations() {
        result.snoSavedConversations_.Clear();
        return this;
      }
    }
    static SavedConversations() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SavePointData_Proto : pb::GeneratedMessage<SavePointData_Proto, SavePointData_Proto.Builder> {
    private static readonly SavePointData_Proto defaultInstance = new Builder().BuildPartial();
    public static SavePointData_Proto DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavePointData_Proto DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavePointData_Proto ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavePointData_Proto__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavePointData_Proto, SavePointData_Proto.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = 0;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public const int SavepointNumberFieldNumber = 2;
    private bool hasSavepointNumber;
    private int savepointNumber_ = 0;
    public bool HasSavepointNumber {
      get { return hasSavepointNumber; }
    }
    public int SavepointNumber {
      get { return savepointNumber_; }
    }
    
    public const int CreatesPortalFieldNumber = 3;
    private bool hasCreatesPortal;
    private uint createsPortal_ = 0;
    public bool HasCreatesPortal {
      get { return hasCreatesPortal; }
    }
    public uint CreatesPortal {
      get { return createsPortal_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        if (!hasSavepointNumber) return false;
        if (!hasCreatesPortal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoWorld) {
        output.WriteSFixed32(1, SnoWorld);
      }
      if (HasSavepointNumber) {
        output.WriteSInt32(2, SavepointNumber);
      }
      if (HasCreatesPortal) {
        output.WriteUInt32(3, CreatesPortal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        if (HasSavepointNumber) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, SavepointNumber);
        }
        if (HasCreatesPortal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CreatesPortal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavePointData_Proto ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavePointData_Proto prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavePointData_Proto, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavePointData_Proto result = new SavePointData_Proto();
      
      protected override SavePointData_Proto MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavePointData_Proto();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavePointData_Proto.Descriptor; }
      }
      
      public override SavePointData_Proto DefaultInstanceForType {
        get { return global::D3.Hero.SavePointData_Proto.DefaultInstance; }
      }
      
      public override SavePointData_Proto BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SavePointData_Proto returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavePointData_Proto) {
          return MergeFrom((SavePointData_Proto) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavePointData_Proto other) {
        if (other == global::D3.Hero.SavePointData_Proto.DefaultInstance) return this;
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        if (other.HasSavepointNumber) {
          SavepointNumber = other.SavepointNumber;
        }
        if (other.HasCreatesPortal) {
          CreatesPortal = other.CreatesPortal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoWorld = input.ReadSFixed32();
              break;
            }
            case 16: {
              SavepointNumber = input.ReadSInt32();
              break;
            }
            case 24: {
              CreatesPortal = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoWorld {
        get { return result.HasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        result.hasSnoWorld = false;
        result.snoWorld_ = 0;
        return this;
      }
      
      public bool HasSavepointNumber {
        get { return result.HasSavepointNumber; }
      }
      public int SavepointNumber {
        get { return result.SavepointNumber; }
        set { SetSavepointNumber(value); }
      }
      public Builder SetSavepointNumber(int value) {
        result.hasSavepointNumber = true;
        result.savepointNumber_ = value;
        return this;
      }
      public Builder ClearSavepointNumber() {
        result.hasSavepointNumber = false;
        result.savepointNumber_ = 0;
        return this;
      }
      
      public bool HasCreatesPortal {
        get { return result.HasCreatesPortal; }
      }
      public uint CreatesPortal {
        get { return result.CreatesPortal; }
        set { SetCreatesPortal(value); }
      }
      public Builder SetCreatesPortal(uint value) {
        result.hasCreatesPortal = true;
        result.createsPortal_ = value;
        return this;
      }
      public Builder ClearCreatesPortal() {
        result.hasCreatesPortal = false;
        result.createsPortal_ = 0;
        return this;
      }
    }
    static SavePointData_Proto() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SavedData : pb::GeneratedMessage<SavedData, SavedData.Builder> {
    private static readonly SavedData defaultInstance = new Builder().BuildPartial();
    public static SavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedData DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedData, SavedData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__FieldAccessorTable; }
    }
    
    public const int HotbarButtonAssignmentsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.HotbarButtonData> hotbarButtonAssignments_ = new pbc::PopsicleList<global::D3.Hero.HotbarButtonData>();
    public scg::IList<global::D3.Hero.HotbarButtonData> HotbarButtonAssignmentsList {
      get { return hotbarButtonAssignments_; }
    }
    public int HotbarButtonAssignmentsCount {
      get { return hotbarButtonAssignments_.Count; }
    }
    public global::D3.Hero.HotbarButtonData GetHotbarButtonAssignments(int index) {
      return hotbarButtonAssignments_[index];
    }
    
    public const int SkillKeyMapFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.SkillKeyMapping> skillKeyMap_ = new pbc::PopsicleList<global::D3.Hero.SkillKeyMapping>();
    public scg::IList<global::D3.Hero.SkillKeyMapping> SkillKeyMapList {
      get { return skillKeyMap_; }
    }
    public int SkillKeyMapCount {
      get { return skillKeyMap_.Count; }
    }
    public global::D3.Hero.SkillKeyMapping GetSkillKeyMap(int index) {
      return skillKeyMap_[index];
    }
    
    public const int TimePlayedFieldNumber = 3;
    private bool hasTimePlayed;
    private uint timePlayed_ = 0;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int ActivatedWaypointsFieldNumber = 4;
    private bool hasActivatedWaypoints;
    private uint activatedWaypoints_ = 0;
    public bool HasActivatedWaypoints {
      get { return hasActivatedWaypoints; }
    }
    public uint ActivatedWaypoints {
      get { return activatedWaypoints_; }
    }
    
    public const int HirelingSavedDataFieldNumber = 5;
    private bool hasHirelingSavedData;
    private global::D3.Hireling.SavedData hirelingSavedData_ = global::D3.Hireling.SavedData.DefaultInstance;
    public bool HasHirelingSavedData {
      get { return hasHirelingSavedData; }
    }
    public global::D3.Hireling.SavedData HirelingSavedData {
      get { return hirelingSavedData_; }
    }
    
    public const int LastLevelTimeFieldNumber = 6;
    private bool hasLastLevelTime;
    private uint lastLevelTime_ = 0;
    public bool HasLastLevelTime {
      get { return hasLastLevelTime; }
    }
    public uint LastLevelTime {
      get { return lastLevelTime_; }
    }
    
    public const int LearnedLoreFieldNumber = 7;
    private bool hasLearnedLore;
    private global::D3.Hero.LearnedLore learnedLore_ = global::D3.Hero.LearnedLore.DefaultInstance;
    public bool HasLearnedLore {
      get { return hasLearnedLore; }
    }
    public global::D3.Hero.LearnedLore LearnedLore {
      get { return learnedLore_; }
    }
    
    public const int SavedConversationsFieldNumber = 8;
    private bool hasSavedConversations;
    private global::D3.Hero.SavedConversations savedConversations_ = global::D3.Hero.SavedConversations.DefaultInstance;
    public bool HasSavedConversations {
      get { return hasSavedConversations; }
    }
    public global::D3.Hero.SavedConversations SavedConversations {
      get { return savedConversations_; }
    }
    
    public const int SnoActiveSkillsFieldNumber = 9;
    private pbc::PopsicleList<int> snoActiveSkills_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoActiveSkillsList {
      get { return pbc::Lists.AsReadOnly(snoActiveSkills_); }
    }
    public int SnoActiveSkillsCount {
      get { return snoActiveSkills_.Count; }
    }
    public int GetSnoActiveSkills(int index) {
      return snoActiveSkills_[index];
    }
    
    public const int SnoTraitsFieldNumber = 10;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public const int SeenTutorialsFieldNumber = 11;
    private pbc::PopsicleList<int> seenTutorials_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SeenTutorialsList {
      get { return pbc::Lists.AsReadOnly(seenTutorials_); }
    }
    public int SeenTutorialsCount {
      get { return seenTutorials_.Count; }
    }
    public int GetSeenTutorials(int index) {
      return seenTutorials_[index];
    }
    
    public const int SavePointFieldNumber = 12;
    private bool hasSavePoint;
    private global::D3.Hero.SavePointData_Proto savePoint_ = global::D3.Hero.SavePointData_Proto.DefaultInstance;
    public bool HasSavePoint {
      get { return hasSavePoint; }
    }
    public global::D3.Hero.SavePointData_Proto SavePoint {
      get { return savePoint_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimePlayed) return false;
        if (!hasActivatedWaypoints) return false;
        if (!hasHirelingSavedData) return false;
        if (!hasLastLevelTime) return false;
        if (!hasLearnedLore) return false;
        if (!hasSavedConversations) return false;
        if (!hasSavePoint) return false;
        foreach (global::D3.Hero.HotbarButtonData element in HotbarButtonAssignmentsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SkillKeyMapping element in SkillKeyMapList) {
          if (!element.IsInitialized) return false;
        }
        if (!HirelingSavedData.IsInitialized) return false;
        if (!SavedConversations.IsInitialized) return false;
        if (!SavePoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.Hero.HotbarButtonData element in HotbarButtonAssignmentsList) {
        output.WriteMessage(1, element);
      }
      foreach (global::D3.Hero.SkillKeyMapping element in SkillKeyMapList) {
        output.WriteMessage(2, element);
      }
      if (HasTimePlayed) {
        output.WriteUInt32(3, TimePlayed);
      }
      if (HasActivatedWaypoints) {
        output.WriteUInt32(4, ActivatedWaypoints);
      }
      if (HasHirelingSavedData) {
        output.WriteMessage(5, HirelingSavedData);
      }
      if (HasLastLevelTime) {
        output.WriteUInt32(6, LastLevelTime);
      }
      if (HasLearnedLore) {
        output.WriteMessage(7, LearnedLore);
      }
      if (HasSavedConversations) {
        output.WriteMessage(8, SavedConversations);
      }
      if (snoActiveSkills_.Count > 0) {
        foreach (int element in snoActiveSkills_) {
          output.WriteSFixed32(9, element);
        }
      }
      if (snoTraits_.Count > 0) {
        foreach (int element in snoTraits_) {
          output.WriteSFixed32(10, element);
        }
      }
      if (seenTutorials_.Count > 0) {
        foreach (int element in seenTutorials_) {
          output.WriteSFixed32(11, element);
        }
      }
      if (HasSavePoint) {
        output.WriteMessage(12, SavePoint);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.HotbarButtonData element in HotbarButtonAssignmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Hero.SkillKeyMapping element in SkillKeyMapList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (HasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, TimePlayed);
        }
        if (HasActivatedWaypoints) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ActivatedWaypoints);
        }
        if (HasHirelingSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, HirelingSavedData);
        }
        if (HasLastLevelTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, LastLevelTime);
        }
        if (HasLearnedLore) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, LearnedLore);
        }
        if (HasSavedConversations) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, SavedConversations);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoActiveSkills_.Count;
          size += dataSize;
          size += 1 * snoActiveSkills_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * seenTutorials_.Count;
          size += dataSize;
          size += 1 * seenTutorials_.Count;
        }
        if (HasSavePoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, SavePoint);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedData ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedData prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedData result = new SavedData();
      
      protected override SavedData MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedData();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedData.Descriptor; }
      }
      
      public override SavedData DefaultInstanceForType {
        get { return global::D3.Hero.SavedData.DefaultInstance; }
      }
      
      public override SavedData BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.hotbarButtonAssignments_.MakeReadOnly();
        result.skillKeyMap_.MakeReadOnly();
        result.snoActiveSkills_.MakeReadOnly();
        result.snoTraits_.MakeReadOnly();
        result.seenTutorials_.MakeReadOnly();
        SavedData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedData) {
          return MergeFrom((SavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedData other) {
        if (other == global::D3.Hero.SavedData.DefaultInstance) return this;
        if (other.hotbarButtonAssignments_.Count != 0) {
          base.AddRange(other.hotbarButtonAssignments_, result.hotbarButtonAssignments_);
        }
        if (other.skillKeyMap_.Count != 0) {
          base.AddRange(other.skillKeyMap_, result.skillKeyMap_);
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasActivatedWaypoints) {
          ActivatedWaypoints = other.ActivatedWaypoints;
        }
        if (other.HasHirelingSavedData) {
          MergeHirelingSavedData(other.HirelingSavedData);
        }
        if (other.HasLastLevelTime) {
          LastLevelTime = other.LastLevelTime;
        }
        if (other.HasLearnedLore) {
          MergeLearnedLore(other.LearnedLore);
        }
        if (other.HasSavedConversations) {
          MergeSavedConversations(other.SavedConversations);
        }
        if (other.snoActiveSkills_.Count != 0) {
          base.AddRange(other.snoActiveSkills_, result.snoActiveSkills_);
        }
        if (other.snoTraits_.Count != 0) {
          base.AddRange(other.snoTraits_, result.snoTraits_);
        }
        if (other.seenTutorials_.Count != 0) {
          base.AddRange(other.seenTutorials_, result.seenTutorials_);
        }
        if (other.HasSavePoint) {
          MergeSavePoint(other.SavePoint);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Hero.HotbarButtonData.Builder subBuilder = global::D3.Hero.HotbarButtonData.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddHotbarButtonAssignments(subBuilder.BuildPartial());
              break;
            }
            case 18: {
              global::D3.Hero.SkillKeyMapping.Builder subBuilder = global::D3.Hero.SkillKeyMapping.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSkillKeyMap(subBuilder.BuildPartial());
              break;
            }
            case 24: {
              TimePlayed = input.ReadUInt32();
              break;
            }
            case 32: {
              ActivatedWaypoints = input.ReadUInt32();
              break;
            }
            case 42: {
              global::D3.Hireling.SavedData.Builder subBuilder = global::D3.Hireling.SavedData.CreateBuilder();
              if (HasHirelingSavedData) {
                subBuilder.MergeFrom(HirelingSavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HirelingSavedData = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              LastLevelTime = input.ReadUInt32();
              break;
            }
            case 58: {
              global::D3.Hero.LearnedLore.Builder subBuilder = global::D3.Hero.LearnedLore.CreateBuilder();
              if (HasLearnedLore) {
                subBuilder.MergeFrom(LearnedLore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LearnedLore = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.Hero.SavedConversations.Builder subBuilder = global::D3.Hero.SavedConversations.CreateBuilder();
              if (HasSavedConversations) {
                subBuilder.MergeFrom(SavedConversations);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedConversations = subBuilder.BuildPartial();
              break;
            }
            case 77: {
              AddSnoActiveSkills(input.ReadSFixed32());
              break;
            }
            case 85: {
              AddSnoTraits(input.ReadSFixed32());
              break;
            }
            case 93: {
              AddSeenTutorials(input.ReadSFixed32());
              break;
            }
            case 98: {
              global::D3.Hero.SavePointData_Proto.Builder subBuilder = global::D3.Hero.SavePointData_Proto.CreateBuilder();
              if (HasSavePoint) {
                subBuilder.MergeFrom(SavePoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavePoint = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.HotbarButtonData> HotbarButtonAssignmentsList {
        get { return result.hotbarButtonAssignments_; }
      }
      public int HotbarButtonAssignmentsCount {
        get { return result.HotbarButtonAssignmentsCount; }
      }
      public global::D3.Hero.HotbarButtonData GetHotbarButtonAssignments(int index) {
        return result.GetHotbarButtonAssignments(index);
      }
      public Builder SetHotbarButtonAssignments(int index, global::D3.Hero.HotbarButtonData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hotbarButtonAssignments_[index] = value;
        return this;
      }
      public Builder SetHotbarButtonAssignments(int index, global::D3.Hero.HotbarButtonData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hotbarButtonAssignments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHotbarButtonAssignments(global::D3.Hero.HotbarButtonData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hotbarButtonAssignments_.Add(value);
        return this;
      }
      public Builder AddHotbarButtonAssignments(global::D3.Hero.HotbarButtonData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hotbarButtonAssignments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHotbarButtonAssignments(scg::IEnumerable<global::D3.Hero.HotbarButtonData> values) {
        base.AddRange(values, result.hotbarButtonAssignments_);
        return this;
      }
      public Builder ClearHotbarButtonAssignments() {
        result.hotbarButtonAssignments_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SkillKeyMapping> SkillKeyMapList {
        get { return result.skillKeyMap_; }
      }
      public int SkillKeyMapCount {
        get { return result.SkillKeyMapCount; }
      }
      public global::D3.Hero.SkillKeyMapping GetSkillKeyMap(int index) {
        return result.GetSkillKeyMap(index);
      }
      public Builder SetSkillKeyMap(int index, global::D3.Hero.SkillKeyMapping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.skillKeyMap_[index] = value;
        return this;
      }
      public Builder SetSkillKeyMap(int index, global::D3.Hero.SkillKeyMapping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.skillKeyMap_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkillKeyMap(global::D3.Hero.SkillKeyMapping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.skillKeyMap_.Add(value);
        return this;
      }
      public Builder AddSkillKeyMap(global::D3.Hero.SkillKeyMapping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.skillKeyMap_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkillKeyMap(scg::IEnumerable<global::D3.Hero.SkillKeyMapping> values) {
        base.AddRange(values, result.skillKeyMap_);
        return this;
      }
      public Builder ClearSkillKeyMap() {
        result.skillKeyMap_.Clear();
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.HasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasActivatedWaypoints {
        get { return result.HasActivatedWaypoints; }
      }
      public uint ActivatedWaypoints {
        get { return result.ActivatedWaypoints; }
        set { SetActivatedWaypoints(value); }
      }
      public Builder SetActivatedWaypoints(uint value) {
        result.hasActivatedWaypoints = true;
        result.activatedWaypoints_ = value;
        return this;
      }
      public Builder ClearActivatedWaypoints() {
        result.hasActivatedWaypoints = false;
        result.activatedWaypoints_ = 0;
        return this;
      }
      
      public bool HasHirelingSavedData {
       get { return result.HasHirelingSavedData; }
      }
      public global::D3.Hireling.SavedData HirelingSavedData {
        get { return result.HirelingSavedData; }
        set { SetHirelingSavedData(value); }
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = value;
        return this;
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHirelingSavedData &&
            result.hirelingSavedData_ != global::D3.Hireling.SavedData.DefaultInstance) {
            result.hirelingSavedData_ = global::D3.Hireling.SavedData.CreateBuilder(result.hirelingSavedData_).MergeFrom(value).BuildPartial();
        } else {
          result.hirelingSavedData_ = value;
        }
        result.hasHirelingSavedData = true;
        return this;
      }
      public Builder ClearHirelingSavedData() {
        result.hasHirelingSavedData = false;
        result.hirelingSavedData_ = global::D3.Hireling.SavedData.DefaultInstance;
        return this;
      }
      
      public bool HasLastLevelTime {
        get { return result.HasLastLevelTime; }
      }
      public uint LastLevelTime {
        get { return result.LastLevelTime; }
        set { SetLastLevelTime(value); }
      }
      public Builder SetLastLevelTime(uint value) {
        result.hasLastLevelTime = true;
        result.lastLevelTime_ = value;
        return this;
      }
      public Builder ClearLastLevelTime() {
        result.hasLastLevelTime = false;
        result.lastLevelTime_ = 0;
        return this;
      }
      
      public bool HasLearnedLore {
       get { return result.HasLearnedLore; }
      }
      public global::D3.Hero.LearnedLore LearnedLore {
        get { return result.LearnedLore; }
        set { SetLearnedLore(value); }
      }
      public Builder SetLearnedLore(global::D3.Hero.LearnedLore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLearnedLore = true;
        result.learnedLore_ = value;
        return this;
      }
      public Builder SetLearnedLore(global::D3.Hero.LearnedLore.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasLearnedLore = true;
        result.learnedLore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLearnedLore(global::D3.Hero.LearnedLore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasLearnedLore &&
            result.learnedLore_ != global::D3.Hero.LearnedLore.DefaultInstance) {
            result.learnedLore_ = global::D3.Hero.LearnedLore.CreateBuilder(result.learnedLore_).MergeFrom(value).BuildPartial();
        } else {
          result.learnedLore_ = value;
        }
        result.hasLearnedLore = true;
        return this;
      }
      public Builder ClearLearnedLore() {
        result.hasLearnedLore = false;
        result.learnedLore_ = global::D3.Hero.LearnedLore.DefaultInstance;
        return this;
      }
      
      public bool HasSavedConversations {
       get { return result.HasSavedConversations; }
      }
      public global::D3.Hero.SavedConversations SavedConversations {
        get { return result.SavedConversations; }
        set { SetSavedConversations(value); }
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSavedConversations = true;
        result.savedConversations_ = value;
        return this;
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSavedConversations = true;
        result.savedConversations_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSavedConversations &&
            result.savedConversations_ != global::D3.Hero.SavedConversations.DefaultInstance) {
            result.savedConversations_ = global::D3.Hero.SavedConversations.CreateBuilder(result.savedConversations_).MergeFrom(value).BuildPartial();
        } else {
          result.savedConversations_ = value;
        }
        result.hasSavedConversations = true;
        return this;
      }
      public Builder ClearSavedConversations() {
        result.hasSavedConversations = false;
        result.savedConversations_ = global::D3.Hero.SavedConversations.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoActiveSkillsList {
        get { return result.snoActiveSkills_; }
      }
      public int SnoActiveSkillsCount {
        get { return result.SnoActiveSkillsCount; }
      }
      public int GetSnoActiveSkills(int index) {
        return result.GetSnoActiveSkills(index);
      }
      public Builder SetSnoActiveSkills(int index, int value) {
        result.snoActiveSkills_[index] = value;
        return this;
      }
      public Builder AddSnoActiveSkills(int value) {
        result.snoActiveSkills_.Add(value);
        return this;
      }
      public Builder AddRangeSnoActiveSkills(scg::IEnumerable<int> values) {
        base.AddRange(values, result.snoActiveSkills_);
        return this;
      }
      public Builder ClearSnoActiveSkills() {
        result.snoActiveSkills_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return result.snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        base.AddRange(values, result.snoTraits_);
        return this;
      }
      public Builder ClearSnoTraits() {
        result.snoTraits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> SeenTutorialsList {
        get { return result.seenTutorials_; }
      }
      public int SeenTutorialsCount {
        get { return result.SeenTutorialsCount; }
      }
      public int GetSeenTutorials(int index) {
        return result.GetSeenTutorials(index);
      }
      public Builder SetSeenTutorials(int index, int value) {
        result.seenTutorials_[index] = value;
        return this;
      }
      public Builder AddSeenTutorials(int value) {
        result.seenTutorials_.Add(value);
        return this;
      }
      public Builder AddRangeSeenTutorials(scg::IEnumerable<int> values) {
        base.AddRange(values, result.seenTutorials_);
        return this;
      }
      public Builder ClearSeenTutorials() {
        result.seenTutorials_.Clear();
        return this;
      }
      
      public bool HasSavePoint {
       get { return result.HasSavePoint; }
      }
      public global::D3.Hero.SavePointData_Proto SavePoint {
        get { return result.SavePoint; }
        set { SetSavePoint(value); }
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSavePoint = true;
        result.savePoint_ = value;
        return this;
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSavePoint = true;
        result.savePoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSavePoint &&
            result.savePoint_ != global::D3.Hero.SavePointData_Proto.DefaultInstance) {
            result.savePoint_ = global::D3.Hero.SavePointData_Proto.CreateBuilder(result.savePoint_).MergeFrom(value).BuildPartial();
        } else {
          result.savePoint_ = value;
        }
        result.hasSavePoint = true;
        return this;
      }
      public Builder ClearSavePoint() {
        result.hasSavePoint = false;
        result.savePoint_ = global::D3.Hero.SavePointData_Proto.DefaultInstance;
        return this;
      }
    }
    static SavedData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class Timestamps : pb::GeneratedMessage<Timestamps, Timestamps.Builder> {
    private static readonly Timestamps defaultInstance = new Builder().BuildPartial();
    public static Timestamps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Timestamps DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Timestamps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Timestamps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Timestamps, Timestamps.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Timestamps__FieldAccessorTable; }
    }
    
    public const int CreateTimeFieldNumber = 1;
    private bool hasCreateTime;
    private long createTime_ = 0;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public long CreateTime {
      get { return createTime_; }
    }
    
    public const int DeleteTimeFieldNumber = 2;
    private bool hasDeleteTime;
    private long deleteTime_ = 0;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public long DeleteTime {
      get { return deleteTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCreateTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasCreateTime) {
        output.WriteSInt64(1, CreateTime);
      }
      if (HasDeleteTime) {
        output.WriteSInt64(2, DeleteTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasCreateTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, CreateTime);
        }
        if (HasDeleteTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, DeleteTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Timestamps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Timestamps prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Timestamps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Timestamps result = new Timestamps();
      
      protected override Timestamps MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Timestamps();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Timestamps.Descriptor; }
      }
      
      public override Timestamps DefaultInstanceForType {
        get { return global::D3.Hero.Timestamps.DefaultInstance; }
      }
      
      public override Timestamps BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Timestamps returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Timestamps) {
          return MergeFrom((Timestamps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Timestamps other) {
        if (other == global::D3.Hero.Timestamps.DefaultInstance) return this;
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              CreateTime = input.ReadSInt64();
              break;
            }
            case 16: {
              DeleteTime = input.ReadSInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasCreateTime {
        get { return result.HasCreateTime; }
      }
      public long CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(long value) {
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.HasDeleteTime; }
      }
      public long DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(long value) {
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        result.hasDeleteTime = false;
        result.deleteTime_ = 0;
        return this;
      }
    }
    static Timestamps() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private static readonly SavedDefinition defaultInstance = new Builder().BuildPartial();
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Hero.Digest digest_ = global::D3.Hero.Digest.DefaultInstance;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Hero.Digest Digest {
      get { return digest_; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.DefaultInstance;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_; }
    }
    
    public const int SavedDataFieldNumber = 4;
    private bool hasSavedData;
    private global::D3.Hero.SavedData savedData_ = global::D3.Hero.SavedData.DefaultInstance;
    public bool HasSavedData {
      get { return hasSavedData; }
    }
    public global::D3.Hero.SavedData SavedData {
      get { return savedData_; }
    }
    
    public const int SavedQuestFieldNumber = 5;
    private pbc::PopsicleList<global::D3.Hero.SavedQuest> savedQuest_ = new pbc::PopsicleList<global::D3.Hero.SavedQuest>();
    public scg::IList<global::D3.Hero.SavedQuest> SavedQuestList {
      get { return savedQuest_; }
    }
    public int SavedQuestCount {
      get { return savedQuest_.Count; }
    }
    public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
      return savedQuest_[index];
    }
    
    public const int ItemsFieldNumber = 6;
    private bool hasItems;
    private global::D3.Items.ItemList items_ = global::D3.Items.ItemList.DefaultInstance;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_; }
    }
    
    public const int QuestRewardHistoryFieldNumber = 7;
    private pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry> questRewardHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
      get { return questRewardHistory_; }
    }
    public int QuestRewardHistoryCount {
      get { return questRewardHistory_.Count; }
    }
    public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
      return questRewardHistory_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasSavedAttributes) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (!SavedAttributes.IsInitialized) return false;
        if (HasSavedData) {
          if (!SavedData.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          if (!element.IsInitialized) return false;
        }
        if (HasItems) {
          if (!Items.IsInitialized) return false;
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasVersion) {
        output.WriteUInt32(1, Version);
      }
      if (HasDigest) {
        output.WriteMessage(2, Digest);
      }
      if (HasSavedAttributes) {
        output.WriteMessage(3, SavedAttributes);
      }
      if (HasSavedData) {
        output.WriteMessage(4, SavedData);
      }
      foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
        output.WriteMessage(5, element);
      }
      if (HasItems) {
        output.WriteMessage(6, Items);
      }
      foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
        output.WriteMessage(7, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (HasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (HasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (HasSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SavedData);
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (HasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Items);
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedDefinition result = new SavedDefinition();
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedDefinition();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Hero.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.savedQuest_.MakeReadOnly();
        result.questRewardHistory_.MakeReadOnly();
        SavedDefinition returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Hero.SavedDefinition.DefaultInstance) return this;
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasSavedData) {
          MergeSavedData(other.SavedData);
        }
        if (other.savedQuest_.Count != 0) {
          base.AddRange(other.savedQuest_, result.savedQuest_);
        }
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        if (other.questRewardHistory_.Count != 0) {
          base.AddRange(other.questRewardHistory_, result.questRewardHistory_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Version = input.ReadUInt32();
              break;
            }
            case 18: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (HasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (HasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (HasSavedData) {
                subBuilder.MergeFrom(SavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedData = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Hero.SavedQuest.Builder subBuilder = global::D3.Hero.SavedQuest.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSavedQuest(subBuilder.BuildPartial());
              break;
            }
            case 50: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (HasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::D3.Hero.QuestRewardHistoryEntry.Builder subBuilder = global::D3.Hero.QuestRewardHistoryEntry.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddQuestRewardHistory(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.HasDigest; }
      }
      public global::D3.Hero.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasDigest &&
            result.digest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.digest_ = global::D3.Hero.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        result.hasDigest = false;
        result.digest_ = global::D3.Hero.Digest.DefaultInstance;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.HasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        result.hasSavedAttributes = false;
        result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.DefaultInstance;
        return this;
      }
      
      public bool HasSavedData {
       get { return result.HasSavedData; }
      }
      public global::D3.Hero.SavedData SavedData {
        get { return result.SavedData; }
        set { SetSavedData(value); }
      }
      public Builder SetSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSavedData = true;
        result.savedData_ = value;
        return this;
      }
      public Builder SetSavedData(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSavedData = true;
        result.savedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSavedData &&
            result.savedData_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.savedData_ = global::D3.Hero.SavedData.CreateBuilder(result.savedData_).MergeFrom(value).BuildPartial();
        } else {
          result.savedData_ = value;
        }
        result.hasSavedData = true;
        return this;
      }
      public Builder ClearSavedData() {
        result.hasSavedData = false;
        result.savedData_ = global::D3.Hero.SavedData.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SavedQuest> SavedQuestList {
        get { return result.savedQuest_; }
      }
      public int SavedQuestCount {
        get { return result.SavedQuestCount; }
      }
      public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
        return result.GetSavedQuest(index);
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.savedQuest_[index] = value;
        return this;
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.savedQuest_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.savedQuest_.Add(value);
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.savedQuest_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSavedQuest(scg::IEnumerable<global::D3.Hero.SavedQuest> values) {
        base.AddRange(values, result.savedQuest_);
        return this;
      }
      public Builder ClearSavedQuest() {
        result.savedQuest_.Clear();
        return this;
      }
      
      public bool HasItems {
       get { return result.HasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        result.hasItems = false;
        result.items_ = global::D3.Items.ItemList.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
        get { return result.questRewardHistory_; }
      }
      public int QuestRewardHistoryCount {
        get { return result.QuestRewardHistoryCount; }
      }
      public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
        return result.GetQuestRewardHistory(index);
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.questRewardHistory_[index] = value;
        return this;
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.questRewardHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.questRewardHistory_.Add(value);
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.questRewardHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestRewardHistory(scg::IEnumerable<global::D3.Hero.QuestRewardHistoryEntry> values) {
        base.AddRange(values, result.questRewardHistory_);
        return this;
      }
      public Builder ClearQuestRewardHistory() {
        result.questRewardHistory_.Clear();
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class NameSequence : pb::GeneratedMessage<NameSequence, NameSequence.Builder> {
    private static readonly NameSequence defaultInstance = new Builder().BuildPartial();
    public static NameSequence DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameSequence DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NameSequence ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameSequence__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NameSequence, NameSequence.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameSequence__FieldAccessorTable; }
    }
    
    public const int SequenceFieldNumber = 1;
    private bool hasSequence;
    private long sequence_ = 0L;
    public bool HasSequence {
      get { return hasSequence; }
    }
    public long Sequence {
      get { return sequence_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSequence) {
        output.WriteInt64(1, Sequence);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSequence) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Sequence);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NameSequence ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameSequence ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameSequence ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameSequence ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameSequence prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<NameSequence, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NameSequence result = new NameSequence();
      
      protected override NameSequence MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NameSequence();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.NameSequence.Descriptor; }
      }
      
      public override NameSequence DefaultInstanceForType {
        get { return global::D3.Hero.NameSequence.DefaultInstance; }
      }
      
      public override NameSequence BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        NameSequence returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NameSequence) {
          return MergeFrom((NameSequence) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameSequence other) {
        if (other == global::D3.Hero.NameSequence.DefaultInstance) return this;
        if (other.HasSequence) {
          Sequence = other.Sequence;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Sequence = input.ReadInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasSequence {
        get { return result.HasSequence; }
      }
      public long Sequence {
        get { return result.Sequence; }
        set { SetSequence(value); }
      }
      public Builder SetSequence(long value) {
        result.hasSequence = true;
        result.sequence_ = value;
        return this;
      }
      public Builder ClearSequence() {
        result.hasSequence = false;
        result.sequence_ = 0L;
        return this;
      }
    }
    static NameSequence() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class NameText : pb::GeneratedMessage<NameText, NameText.Builder> {
    private static readonly NameText defaultInstance = new Builder().BuildPartial();
    public static NameText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameText DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NameText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NameText, NameText.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameText__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasName) {
        output.WriteString(1, Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NameText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameText ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameText prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<NameText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NameText result = new NameText();
      
      protected override NameText MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NameText();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.NameText.Descriptor; }
      }
      
      public override NameText DefaultInstanceForType {
        get { return global::D3.Hero.NameText.DefaultInstance; }
      }
      
      public override NameText BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        NameText returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NameText) {
          return MergeFrom((NameText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameText other) {
        if (other == global::D3.Hero.NameText.DefaultInstance) return this;
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Name = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static NameText() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  public sealed partial class Escrow : pb::GeneratedMessage<Escrow, Escrow.Builder> {
    private static readonly Escrow defaultInstance = new Builder().BuildPartial();
    public static Escrow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Escrow DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Escrow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Escrow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Escrow, Escrow.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Escrow__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_ = global::D3.Items.Generator.DefaultInstance;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_; }
    }
    
    public const int HeroDataFieldNumber = 3;
    private bool hasHeroData;
    private global::D3.Hero.SavedData heroData_ = global::D3.Hero.SavedData.DefaultInstance;
    public bool HasHeroData {
      get { return hasHeroData; }
    }
    public global::D3.Hero.SavedData HeroData {
      get { return heroData_; }
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private uint state_ = 0;
    public bool HasState {
      get { return hasState; }
    }
    public uint State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        if (HasHeroData) {
          if (!HeroData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasVersion) {
        output.WriteUInt32(1, Version);
      }
      if (HasGenerator) {
        output.WriteMessage(2, Generator);
      }
      if (HasHeroData) {
        output.WriteMessage(3, HeroData);
      }
      if (HasState) {
        output.WriteUInt32(4, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (HasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        if (HasHeroData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, HeroData);
        }
        if (HasState) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, State);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Escrow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Escrow ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Escrow prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Escrow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Escrow result = new Escrow();
      
      protected override Escrow MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Escrow();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Escrow.Descriptor; }
      }
      
      public override Escrow DefaultInstanceForType {
        get { return global::D3.Hero.Escrow.DefaultInstance; }
      }
      
      public override Escrow BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Escrow returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Escrow) {
          return MergeFrom((Escrow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Escrow other) {
        if (other == global::D3.Hero.Escrow.DefaultInstance) return this;
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        if (other.HasHeroData) {
          MergeHeroData(other.HeroData);
        }
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Version = input.ReadUInt32();
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (HasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (HasHeroData) {
                subBuilder.MergeFrom(HeroData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroData = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              State = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.HasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        result.hasGenerator = false;
        result.generator_ = global::D3.Items.Generator.DefaultInstance;
        return this;
      }
      
      public bool HasHeroData {
       get { return result.HasHeroData; }
      }
      public global::D3.Hero.SavedData HeroData {
        get { return result.HeroData; }
        set { SetHeroData(value); }
      }
      public Builder SetHeroData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeroData = true;
        result.heroData_ = value;
        return this;
      }
      public Builder SetHeroData(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHeroData = true;
        result.heroData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHeroData &&
            result.heroData_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.heroData_ = global::D3.Hero.SavedData.CreateBuilder(result.heroData_).MergeFrom(value).BuildPartial();
        } else {
          result.heroData_ = value;
        }
        result.hasHeroData = true;
        return this;
      }
      public Builder ClearHeroData() {
        result.hasHeroData = false;
        result.heroData_ = global::D3.Hero.SavedData.DefaultInstance;
        return this;
      }
      
      public bool HasState {
        get { return result.HasState; }
      }
      public uint State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(uint value) {
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static Escrow() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  #endregion
  
}
