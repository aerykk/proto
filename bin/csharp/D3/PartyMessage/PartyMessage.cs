// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.PartyMessage {
  
  public static partial class PartyMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_PartyMessage_ScreenStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.PartyMessage.ScreenStatus, global::D3.PartyMessage.ScreenStatus.Builder> internal__static_D3_PartyMessage_ScreenStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_PartyMessage_SearchForPublicGameParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.PartyMessage.SearchForPublicGameParams, global::D3.PartyMessage.SearchForPublicGameParams.Builder> internal__static_D3_PartyMessage_SearchForPublicGameParams__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PartyMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJQYXJ0eU1lc3NhZ2UucHJvdG8SD0QzLlBhcnR5TWVzc2FnZRoTT25saW5l" + 
          "U2VydmljZS5wcm90byIuCgxTY3JlZW5TdGF0dXMSDgoGc2NyZWVuGAEgAigF" + 
          "Eg4KBnN0YXR1cxgCIAIoBSKaAQoZU2VhcmNoRm9yUHVibGljR2FtZVBhcmFt" + 
          "cxISCgpzdGFydF90aW1lGAEgASgSEhkKEXNlY29uZHNfdG9fc2VhcmNoGAIg" + 
          "ASgNEjcKC2dhbWVfcGFyYW1zGAMgASgLMiIuRDMuT25saW5lU2VydmljZS5H" + 
          "YW1lQ3JlYXRlUGFyYW1zEhUKDXJlbW92ZV9yZWFzb24YBCABKAU=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_PartyMessage_ScreenStatus__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_PartyMessage_ScreenStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.PartyMessage.ScreenStatus, global::D3.PartyMessage.ScreenStatus.Builder>(internal__static_D3_PartyMessage_ScreenStatus__Descriptor,
                new string[] { "Screen", "Status", });
        internal__static_D3_PartyMessage_SearchForPublicGameParams__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_PartyMessage_SearchForPublicGameParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.PartyMessage.SearchForPublicGameParams, global::D3.PartyMessage.SearchForPublicGameParams.Builder>(internal__static_D3_PartyMessage_SearchForPublicGameParams__Descriptor,
                new string[] { "StartTime", "SecondsToSearch", "GameParams", "RemoveReason", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class ScreenStatus : pb::GeneratedMessage<ScreenStatus, ScreenStatus.Builder> {
    private static readonly ScreenStatus defaultInstance = new Builder().BuildPartial();
    public static ScreenStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScreenStatus DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ScreenStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.PartyMessage.PartyMessage.internal__static_D3_PartyMessage_ScreenStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScreenStatus, ScreenStatus.Builder> InternalFieldAccessors {
      get { return global::D3.PartyMessage.PartyMessage.internal__static_D3_PartyMessage_ScreenStatus__FieldAccessorTable; }
    }
    
    public const int ScreenFieldNumber = 1;
    private bool hasScreen;
    private int screen_ = 0;
    public bool HasScreen {
      get { return hasScreen; }
    }
    public int Screen {
      get { return screen_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private int status_ = 0;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasScreen) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasScreen) {
        output.WriteInt32(1, Screen);
      }
      if (HasStatus) {
        output.WriteInt32(2, Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasScreen) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Screen);
        }
        if (HasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ScreenStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScreenStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScreenStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScreenStatus ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScreenStatus ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScreenStatus prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ScreenStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ScreenStatus result = new ScreenStatus();
      
      protected override ScreenStatus MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ScreenStatus();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.PartyMessage.ScreenStatus.Descriptor; }
      }
      
      public override ScreenStatus DefaultInstanceForType {
        get { return global::D3.PartyMessage.ScreenStatus.DefaultInstance; }
      }
      
      public override ScreenStatus BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ScreenStatus returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScreenStatus) {
          return MergeFrom((ScreenStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScreenStatus other) {
        if (other == global::D3.PartyMessage.ScreenStatus.DefaultInstance) return this;
        if (other.HasScreen) {
          Screen = other.Screen;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Screen = input.ReadInt32();
              break;
            }
            case 16: {
              Status = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasScreen {
        get { return result.HasScreen; }
      }
      public int Screen {
        get { return result.Screen; }
        set { SetScreen(value); }
      }
      public Builder SetScreen(int value) {
        result.hasScreen = true;
        result.screen_ = value;
        return this;
      }
      public Builder ClearScreen() {
        result.hasScreen = false;
        result.screen_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.HasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static ScreenStatus() {
      object.ReferenceEquals(global::D3.PartyMessage.PartyMessage.Descriptor, null);
    }
  }
  
  public sealed partial class SearchForPublicGameParams : pb::GeneratedMessage<SearchForPublicGameParams, SearchForPublicGameParams.Builder> {
    private static readonly SearchForPublicGameParams defaultInstance = new Builder().BuildPartial();
    public static SearchForPublicGameParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchForPublicGameParams DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SearchForPublicGameParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.PartyMessage.PartyMessage.internal__static_D3_PartyMessage_SearchForPublicGameParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchForPublicGameParams, SearchForPublicGameParams.Builder> InternalFieldAccessors {
      get { return global::D3.PartyMessage.PartyMessage.internal__static_D3_PartyMessage_SearchForPublicGameParams__FieldAccessorTable; }
    }
    
    public const int StartTimeFieldNumber = 1;
    private bool hasStartTime;
    private long startTime_ = 0;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    public const int SecondsToSearchFieldNumber = 2;
    private bool hasSecondsToSearch;
    private uint secondsToSearch_ = 0;
    public bool HasSecondsToSearch {
      get { return hasSecondsToSearch; }
    }
    public uint SecondsToSearch {
      get { return secondsToSearch_; }
    }
    
    public const int GameParamsFieldNumber = 3;
    private bool hasGameParams;
    private global::D3.OnlineService.GameCreateParams gameParams_ = global::D3.OnlineService.GameCreateParams.DefaultInstance;
    public bool HasGameParams {
      get { return hasGameParams; }
    }
    public global::D3.OnlineService.GameCreateParams GameParams {
      get { return gameParams_; }
    }
    
    public const int RemoveReasonFieldNumber = 4;
    private bool hasRemoveReason;
    private int removeReason_ = 0;
    public bool HasRemoveReason {
      get { return hasRemoveReason; }
    }
    public int RemoveReason {
      get { return removeReason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGameParams) {
          if (!GameParams.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasStartTime) {
        output.WriteSInt64(1, StartTime);
      }
      if (HasSecondsToSearch) {
        output.WriteUInt32(2, SecondsToSearch);
      }
      if (HasGameParams) {
        output.WriteMessage(3, GameParams);
      }
      if (HasRemoveReason) {
        output.WriteInt32(4, RemoveReason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasStartTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, StartTime);
        }
        if (HasSecondsToSearch) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SecondsToSearch);
        }
        if (HasGameParams) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GameParams);
        }
        if (HasRemoveReason) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, RemoveReason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchForPublicGameParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchForPublicGameParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchForPublicGameParams ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchForPublicGameParams prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SearchForPublicGameParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SearchForPublicGameParams result = new SearchForPublicGameParams();
      
      protected override SearchForPublicGameParams MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SearchForPublicGameParams();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.PartyMessage.SearchForPublicGameParams.Descriptor; }
      }
      
      public override SearchForPublicGameParams DefaultInstanceForType {
        get { return global::D3.PartyMessage.SearchForPublicGameParams.DefaultInstance; }
      }
      
      public override SearchForPublicGameParams BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SearchForPublicGameParams returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchForPublicGameParams) {
          return MergeFrom((SearchForPublicGameParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchForPublicGameParams other) {
        if (other == global::D3.PartyMessage.SearchForPublicGameParams.DefaultInstance) return this;
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasSecondsToSearch) {
          SecondsToSearch = other.SecondsToSearch;
        }
        if (other.HasGameParams) {
          MergeGameParams(other.GameParams);
        }
        if (other.HasRemoveReason) {
          RemoveReason = other.RemoveReason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              StartTime = input.ReadSInt64();
              break;
            }
            case 16: {
              SecondsToSearch = input.ReadUInt32();
              break;
            }
            case 26: {
              global::D3.OnlineService.GameCreateParams.Builder subBuilder = global::D3.OnlineService.GameCreateParams.CreateBuilder();
              if (HasGameParams) {
                subBuilder.MergeFrom(GameParams);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameParams = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              RemoveReason = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasStartTime {
        get { return result.HasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasSecondsToSearch {
        get { return result.HasSecondsToSearch; }
      }
      public uint SecondsToSearch {
        get { return result.SecondsToSearch; }
        set { SetSecondsToSearch(value); }
      }
      public Builder SetSecondsToSearch(uint value) {
        result.hasSecondsToSearch = true;
        result.secondsToSearch_ = value;
        return this;
      }
      public Builder ClearSecondsToSearch() {
        result.hasSecondsToSearch = false;
        result.secondsToSearch_ = 0;
        return this;
      }
      
      public bool HasGameParams {
       get { return result.HasGameParams; }
      }
      public global::D3.OnlineService.GameCreateParams GameParams {
        get { return result.GameParams; }
        set { SetGameParams(value); }
      }
      public Builder SetGameParams(global::D3.OnlineService.GameCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGameParams = true;
        result.gameParams_ = value;
        return this;
      }
      public Builder SetGameParams(global::D3.OnlineService.GameCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGameParams = true;
        result.gameParams_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameParams(global::D3.OnlineService.GameCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGameParams &&
            result.gameParams_ != global::D3.OnlineService.GameCreateParams.DefaultInstance) {
            result.gameParams_ = global::D3.OnlineService.GameCreateParams.CreateBuilder(result.gameParams_).MergeFrom(value).BuildPartial();
        } else {
          result.gameParams_ = value;
        }
        result.hasGameParams = true;
        return this;
      }
      public Builder ClearGameParams() {
        result.hasGameParams = false;
        result.gameParams_ = global::D3.OnlineService.GameCreateParams.DefaultInstance;
        return this;
      }
      
      public bool HasRemoveReason {
        get { return result.HasRemoveReason; }
      }
      public int RemoveReason {
        get { return result.RemoveReason; }
        set { SetRemoveReason(value); }
      }
      public Builder SetRemoveReason(int value) {
        result.hasRemoveReason = true;
        result.removeReason_ = value;
        return this;
      }
      public Builder ClearRemoveReason() {
        result.hasRemoveReason = false;
        result.removeReason_ = 0;
        return this;
      }
    }
    static SearchForPublicGameParams() {
      object.ReferenceEquals(global::D3.PartyMessage.PartyMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}
