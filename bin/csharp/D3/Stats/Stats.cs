// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Stats {
  
  public static partial class Stats {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Stats_StatCategory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Stats.StatCategory, global::D3.Stats.StatCategory.Builder> internal__static_D3_Stats_StatCategory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Stats_StatList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Stats.StatList, global::D3.Stats.StatList.Builder> internal__static_D3_Stats_StatList__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Stats() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtTdGF0cy5wcm90bxIIRDMuU3RhdHMiTgoMU3RhdENhdGVnb3J5Eg8KB3N0" + 
          "YXRfaWQYASACKA0SDgoGZGF0YV8xGAIgAigNEg4KBmRhdGFfMhgDIAEoDRIN" + 
          "CgV0b3RhbBgEIAIoBCIxCghTdGF0TGlzdBIlCgVzdGF0cxgBIAMoCzIWLkQz" + 
          "LlN0YXRzLlN0YXRDYXRlZ29yeQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Stats_StatCategory__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Stats_StatCategory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Stats.StatCategory, global::D3.Stats.StatCategory.Builder>(internal__static_D3_Stats_StatCategory__Descriptor,
                new string[] { "StatId", "Data1", "Data2", "Total", });
        internal__static_D3_Stats_StatList__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Stats_StatList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Stats.StatList, global::D3.Stats.StatList.Builder>(internal__static_D3_Stats_StatList__Descriptor,
                new string[] { "Stats", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class StatCategory : pb::GeneratedMessage<StatCategory, StatCategory.Builder> {
    private static readonly StatCategory defaultInstance = new Builder().BuildPartial();
    public static StatCategory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatCategory DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override StatCategory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Stats.Stats.internal__static_D3_Stats_StatCategory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatCategory, StatCategory.Builder> InternalFieldAccessors {
      get { return global::D3.Stats.Stats.internal__static_D3_Stats_StatCategory__FieldAccessorTable; }
    }
    
    public const int StatIdFieldNumber = 1;
    private bool hasStatId;
    private uint statId_ = 0;
    public bool HasStatId {
      get { return hasStatId; }
    }
    [global::System.CLSCompliant(false)]
    public uint StatId {
      get { return statId_; }
    }
    
    public const int Data1FieldNumber = 2;
    private bool hasData1;
    private uint data1_ = 0;
    public bool HasData1 {
      get { return hasData1; }
    }
    [global::System.CLSCompliant(false)]
    public uint Data1 {
      get { return data1_; }
    }
    
    public const int Data2FieldNumber = 3;
    private bool hasData2;
    private uint data2_ = 0;
    public bool HasData2 {
      get { return hasData2; }
    }
    [global::System.CLSCompliant(false)]
    public uint Data2 {
      get { return data2_; }
    }
    
    public const int TotalFieldNumber = 4;
    private bool hasTotal;
    private ulong total_ = 0UL;
    public bool HasTotal {
      get { return hasTotal; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Total {
      get { return total_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatId) return false;
        if (!hasData1) return false;
        if (!hasTotal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasStatId) {
        output.WriteUInt32(1, StatId);
      }
      if (HasData1) {
        output.WriteUInt32(2, Data1);
      }
      if (HasData2) {
        output.WriteUInt32(3, Data2);
      }
      if (HasTotal) {
        output.WriteUInt64(4, Total);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasStatId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, StatId);
        }
        if (HasData1) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Data1);
        }
        if (HasData2) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Data2);
        }
        if (HasTotal) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, Total);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatCategory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatCategory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatCategory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatCategory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatCategory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatCategory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatCategory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatCategory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatCategory ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatCategory ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatCategory prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<StatCategory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      StatCategory result = new StatCategory();
      
      protected override StatCategory MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new StatCategory();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Stats.StatCategory.Descriptor; }
      }
      
      public override StatCategory DefaultInstanceForType {
        get { return global::D3.Stats.StatCategory.DefaultInstance; }
      }
      
      public override StatCategory BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        StatCategory returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatCategory) {
          return MergeFrom((StatCategory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatCategory other) {
        if (other == global::D3.Stats.StatCategory.DefaultInstance) return this;
        if (other.HasStatId) {
          StatId = other.StatId;
        }
        if (other.HasData1) {
          Data1 = other.Data1;
        }
        if (other.HasData2) {
          Data2 = other.Data2;
        }
        if (other.HasTotal) {
          Total = other.Total;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              StatId = input.ReadUInt32();
              break;
            }
            case 16: {
              Data1 = input.ReadUInt32();
              break;
            }
            case 24: {
              Data2 = input.ReadUInt32();
              break;
            }
            case 32: {
              Total = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasStatId {
        get { return result.HasStatId; }
      }
      [global::System.CLSCompliant(false)]
      public uint StatId {
        get { return result.StatId; }
        set { SetStatId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStatId(uint value) {
        result.hasStatId = true;
        result.statId_ = value;
        return this;
      }
      public Builder ClearStatId() {
        result.hasStatId = false;
        result.statId_ = 0;
        return this;
      }
      
      public bool HasData1 {
        get { return result.HasData1; }
      }
      [global::System.CLSCompliant(false)]
      public uint Data1 {
        get { return result.Data1; }
        set { SetData1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetData1(uint value) {
        result.hasData1 = true;
        result.data1_ = value;
        return this;
      }
      public Builder ClearData1() {
        result.hasData1 = false;
        result.data1_ = 0;
        return this;
      }
      
      public bool HasData2 {
        get { return result.HasData2; }
      }
      [global::System.CLSCompliant(false)]
      public uint Data2 {
        get { return result.Data2; }
        set { SetData2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetData2(uint value) {
        result.hasData2 = true;
        result.data2_ = value;
        return this;
      }
      public Builder ClearData2() {
        result.hasData2 = false;
        result.data2_ = 0;
        return this;
      }
      
      public bool HasTotal {
        get { return result.HasTotal; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Total {
        get { return result.Total; }
        set { SetTotal(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotal(ulong value) {
        result.hasTotal = true;
        result.total_ = value;
        return this;
      }
      public Builder ClearTotal() {
        result.hasTotal = false;
        result.total_ = 0UL;
        return this;
      }
    }
    static StatCategory() {
      object.ReferenceEquals(global::D3.Stats.Stats.Descriptor, null);
    }
  }
  
  public sealed partial class StatList : pb::GeneratedMessage<StatList, StatList.Builder> {
    private static readonly StatList defaultInstance = new Builder().BuildPartial();
    public static StatList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatList DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override StatList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Stats.Stats.internal__static_D3_Stats_StatList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatList, StatList.Builder> InternalFieldAccessors {
      get { return global::D3.Stats.Stats.internal__static_D3_Stats_StatList__FieldAccessorTable; }
    }
    
    public const int StatsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Stats.StatCategory> stats_ = new pbc::PopsicleList<global::D3.Stats.StatCategory>();
    public scg::IList<global::D3.Stats.StatCategory> StatsList {
      get { return stats_; }
    }
    public int StatsCount {
      get { return stats_.Count; }
    }
    public global::D3.Stats.StatCategory GetStats(int index) {
      return stats_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Stats.StatCategory element in StatsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.Stats.StatCategory element in StatsList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Stats.StatCategory element in StatsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatList ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatList ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatList prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<StatList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      StatList result = new StatList();
      
      protected override StatList MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new StatList();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Stats.StatList.Descriptor; }
      }
      
      public override StatList DefaultInstanceForType {
        get { return global::D3.Stats.StatList.DefaultInstance; }
      }
      
      public override StatList BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.stats_.MakeReadOnly();
        StatList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatList) {
          return MergeFrom((StatList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatList other) {
        if (other == global::D3.Stats.StatList.DefaultInstance) return this;
        if (other.stats_.Count != 0) {
          base.AddRange(other.stats_, result.stats_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Stats.StatCategory.Builder subBuilder = global::D3.Stats.StatCategory.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddStats(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.Stats.StatCategory> StatsList {
        get { return result.stats_; }
      }
      public int StatsCount {
        get { return result.StatsCount; }
      }
      public global::D3.Stats.StatCategory GetStats(int index) {
        return result.GetStats(index);
      }
      public Builder SetStats(int index, global::D3.Stats.StatCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.stats_[index] = value;
        return this;
      }
      public Builder SetStats(int index, global::D3.Stats.StatCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.stats_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStats(global::D3.Stats.StatCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.stats_.Add(value);
        return this;
      }
      public Builder AddStats(global::D3.Stats.StatCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.stats_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStats(scg::IEnumerable<global::D3.Stats.StatCategory> values) {
        base.AddRange(values, result.stats_);
        return this;
      }
      public Builder ClearStats() {
        result.stats_.Clear();
        return this;
      }
    }
    static StatList() {
      object.ReferenceEquals(global::D3.Stats.Stats.Descriptor, null);
    }
  }
  
  #endregion
  
}
