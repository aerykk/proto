// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Items {
  
  public static partial class Items {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Items_RareItemName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.RareItemName, global::D3.Items.RareItemName.Builder> internal__static_D3_Items_RareItemName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_Generator__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.Generator, global::D3.Items.Generator.Builder> internal__static_D3_Items_Generator__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_EmbeddedGenerator__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.EmbeddedGenerator, global::D3.Items.EmbeddedGenerator.Builder> internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_SavedItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.SavedItem, global::D3.Items.SavedItem.Builder> internal__static_D3_Items_SavedItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_AuctionAccountInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionAccountInfo, global::D3.Items.AuctionAccountInfo.Builder> internal__static_D3_Items_AuctionAccountInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_AuctionItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionItem, global::D3.Items.AuctionItem.Builder> internal__static_D3_Items_AuctionItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_AuctionInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionInfo, global::D3.Items.AuctionInfo.Builder> internal__static_D3_Items_AuctionInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_ItemList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.ItemList, global::D3.Items.ItemList.Builder> internal__static_D3_Items_ItemList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_Ownership__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.Ownership, global::D3.Items.Ownership.Builder> internal__static_D3_Items_Ownership__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Items() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtJdGVtcy5wcm90bxIIRDMuSXRlbXMaDkdCSGFuZGxlLnByb3RvGhNPbmxp" + 
          "bmVTZXJ2aWNlLnByb3RvIosBCgxSYXJlSXRlbU5hbWUSGwoTaXRlbV9uYW1l" + 
          "X2lzX3ByZWZpeBgBIAIoCBIdChVzbm9fYWZmaXhfc3RyaW5nX2xpc3QYAiAC" + 
          "KA8SHwoXYWZmaXhfc3RyaW5nX2xpc3RfaW5kZXgYAyACKBESHgoWaXRlbV9z" + 
          "dHJpbmdfbGlzdF9pbmRleBgEIAIoESKWAwoJR2VuZXJhdG9yEgwKBHNlZWQY" + 
          "ASACKA0SKQoJZ2JfaGFuZGxlGAIgAigLMhYuRDMuR2FtZUJhbGFuY2UuSGFu" + 
          "ZGxlEhQKDGJhc2VfYWZmaXhlcxgDIAMoDxIuCg5yYXJlX2l0ZW1fbmFtZRgE" + 
          "IAIoCzIWLkQzLkl0ZW1zLlJhcmVJdGVtTmFtZRIVCg1lbmNoYW50X2FmZml4" + 
          "GAUgAigPEhQKDHNvY2tldF9hZmZpeBgGIAIoDxINCgVmbGFncxgHIAIoDRIS" + 
          "CgpkdXJhYmlsaXR5GAggAigNEhIKCnN0YWNrX3NpemUYCSACKAQSEAoIZHll" + 
          "X3R5cGUYCiACKA0SGgoSaXRlbV9xdWFsaXR5X2xldmVsGAsgAigREhoKEml0" + 
          "ZW1fYmluZGluZ19sZXZlbBgMIAIoERIWCg5tYXhfZHVyYWJpbGl0eRgNIAIo" + 
          "DRItCghjb250ZW50cxgOIAMoCzIbLkQzLkl0ZW1zLkVtYmVkZGVkR2VuZXJh" + 
          "dG9yEhUKDWF0dHVuZWRfc2tpbGwYDyABKA8iYQoRRW1iZWRkZWRHZW5lcmF0" + 
          "b3ISJAoCaWQYASACKAsyGC5EMy5PbmxpbmVTZXJ2aWNlLkl0ZW1JZBImCgln" + 
          "ZW5lcmF0b3IYAiACKAsyEy5EMy5JdGVtcy5HZW5lcmF0b3IilwIKCVNhdmVk" + 
          "SXRlbRIkCgJpZBgBIAIoCzIYLkQzLk9ubGluZVNlcnZpY2UuSXRlbUlkEjMK" + 
          "D293bmVyX2VudGl0eV9pZBgCIAEoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50" + 
          "aXR5SWQSKwoJc29ja2V0X2lkGAMgASgLMhguRDMuT25saW5lU2VydmljZS5J" + 
          "dGVtSWQSFgoOaGlyZWxpbmdfY2xhc3MYBCACKBESEQoJaXRlbV9zbG90GAUg" + 
          "AigREhQKDHNxdWFyZV9pbmRleBgGIAIoERIZChF1c2VkX3NvY2tldF9jb3Vu" + 
          "dBgHIAIoDRImCglnZW5lcmF0b3IYCCABKAsyEy5EMy5JdGVtcy5HZW5lcmF0" + 
          "b3IicwoSQXVjdGlvbkFjY291bnRJbmZvEi4KCmFjY291bnRfaWQYASACKAsy" + 
          "Gi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEi0KCWVzY3Jvd19pZBgCIAIo" + 
          "CzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWQiWwoLQXVjdGlvbkl0ZW0S" + 
          "JAoCaWQYASACKAsyGC5EMy5PbmxpbmVTZXJ2aWNlLkl0ZW1JZBImCglnZW5l" + 
          "cmF0b3IYAiACKAsyEy5EMy5JdGVtcy5HZW5lcmF0b3IiVwoLQXVjdGlvbklu" + 
          "Zm8SJAoCaWQYASACKAsyGC5EMy5PbmxpbmVTZXJ2aWNlLkl0ZW1JZBIiCgVv" + 
          "d25lchgCIAEoCzITLkQzLkl0ZW1zLk93bmVyc2hpcCIuCghJdGVtTGlzdBIi" + 
          "CgVpdGVtcxgBIAMoCzITLkQzLkl0ZW1zLlNhdmVkSXRlbSKEAQoJT3duZXJz" + 
          "aGlwEjMKD293bmVyX2VudGl0eV9pZBgBIAIoCzIaLkQzLk9ubGluZVNlcnZp" + 
          "Y2UuRW50aXR5SWQSEwoLZGVsZXRlX3RpbWUYAiABKBISLQoJZXNjcm93X2lk" + 
          "GAMgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Items_RareItemName__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Items_RareItemName__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.RareItemName, global::D3.Items.RareItemName.Builder>(internal__static_D3_Items_RareItemName__Descriptor,
                new string[] { "ItemNameIsPrefix", "SnoAffixStringList", "AffixStringListIndex", "ItemStringListIndex", });
        internal__static_D3_Items_Generator__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Items_Generator__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.Generator, global::D3.Items.Generator.Builder>(internal__static_D3_Items_Generator__Descriptor,
                new string[] { "Seed", "GbHandle", "BaseAffixes", "RareItemName", "EnchantAffix", "SocketAffix", "Flags", "Durability", "StackSize", "DyeType", "ItemQualityLevel", "ItemBindingLevel", "MaxDurability", "Contents", "AttunedSkill", });
        internal__static_D3_Items_EmbeddedGenerator__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.EmbeddedGenerator, global::D3.Items.EmbeddedGenerator.Builder>(internal__static_D3_Items_EmbeddedGenerator__Descriptor,
                new string[] { "Id", "Generator", });
        internal__static_D3_Items_SavedItem__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Items_SavedItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.SavedItem, global::D3.Items.SavedItem.Builder>(internal__static_D3_Items_SavedItem__Descriptor,
                new string[] { "Id", "OwnerEntityId", "SocketId", "HirelingClass", "ItemSlot", "SquareIndex", "UsedSocketCount", "Generator", });
        internal__static_D3_Items_AuctionAccountInfo__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Items_AuctionAccountInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionAccountInfo, global::D3.Items.AuctionAccountInfo.Builder>(internal__static_D3_Items_AuctionAccountInfo__Descriptor,
                new string[] { "AccountId", "EscrowId", });
        internal__static_D3_Items_AuctionItem__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Items_AuctionItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionItem, global::D3.Items.AuctionItem.Builder>(internal__static_D3_Items_AuctionItem__Descriptor,
                new string[] { "Id", "Generator", });
        internal__static_D3_Items_AuctionInfo__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Items_AuctionInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.AuctionInfo, global::D3.Items.AuctionInfo.Builder>(internal__static_D3_Items_AuctionInfo__Descriptor,
                new string[] { "Id", "Owner", });
        internal__static_D3_Items_ItemList__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Items_ItemList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.ItemList, global::D3.Items.ItemList.Builder>(internal__static_D3_Items_ItemList__Descriptor,
                new string[] { "Items", });
        internal__static_D3_Items_Ownership__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Items_Ownership__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.Ownership, global::D3.Items.Ownership.Builder>(internal__static_D3_Items_Ownership__Descriptor,
                new string[] { "OwnerEntityId", "DeleteTime", "EscrowId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameBalance.GBHandle.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class RareItemName : pb::GeneratedMessage<RareItemName, RareItemName.Builder> {
    private static readonly RareItemName defaultInstance = new Builder().BuildPartial();
    public static RareItemName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RareItemName DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RareItemName ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_RareItemName__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RareItemName, RareItemName.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_RareItemName__FieldAccessorTable; }
    }
    
    public const int ItemNameIsPrefixFieldNumber = 1;
    private bool hasItemNameIsPrefix;
    private bool itemNameIsPrefix_ = false;
    public bool HasItemNameIsPrefix {
      get { return hasItemNameIsPrefix; }
    }
    public bool ItemNameIsPrefix {
      get { return itemNameIsPrefix_; }
    }
    
    public const int SnoAffixStringListFieldNumber = 2;
    private bool hasSnoAffixStringList;
    private int snoAffixStringList_ = 0;
    public bool HasSnoAffixStringList {
      get { return hasSnoAffixStringList; }
    }
    public int SnoAffixStringList {
      get { return snoAffixStringList_; }
    }
    
    public const int AffixStringListIndexFieldNumber = 3;
    private bool hasAffixStringListIndex;
    private int affixStringListIndex_ = 0;
    public bool HasAffixStringListIndex {
      get { return hasAffixStringListIndex; }
    }
    public int AffixStringListIndex {
      get { return affixStringListIndex_; }
    }
    
    public const int ItemStringListIndexFieldNumber = 4;
    private bool hasItemStringListIndex;
    private int itemStringListIndex_ = 0;
    public bool HasItemStringListIndex {
      get { return hasItemStringListIndex; }
    }
    public int ItemStringListIndex {
      get { return itemStringListIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemNameIsPrefix) return false;
        if (!hasSnoAffixStringList) return false;
        if (!hasAffixStringListIndex) return false;
        if (!hasItemStringListIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasItemNameIsPrefix) {
        output.WriteBool(1, ItemNameIsPrefix);
      }
      if (HasSnoAffixStringList) {
        output.WriteSFixed32(2, SnoAffixStringList);
      }
      if (HasAffixStringListIndex) {
        output.WriteSInt32(3, AffixStringListIndex);
      }
      if (HasItemStringListIndex) {
        output.WriteSInt32(4, ItemStringListIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasItemNameIsPrefix) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, ItemNameIsPrefix);
        }
        if (HasSnoAffixStringList) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, SnoAffixStringList);
        }
        if (HasAffixStringListIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, AffixStringListIndex);
        }
        if (HasItemStringListIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, ItemStringListIndex);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RareItemName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RareItemName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RareItemName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RareItemName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RareItemName prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RareItemName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RareItemName result = new RareItemName();
      
      protected override RareItemName MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RareItemName();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.RareItemName.Descriptor; }
      }
      
      public override RareItemName DefaultInstanceForType {
        get { return global::D3.Items.RareItemName.DefaultInstance; }
      }
      
      public override RareItemName BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RareItemName returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RareItemName) {
          return MergeFrom((RareItemName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RareItemName other) {
        if (other == global::D3.Items.RareItemName.DefaultInstance) return this;
        if (other.HasItemNameIsPrefix) {
          ItemNameIsPrefix = other.ItemNameIsPrefix;
        }
        if (other.HasSnoAffixStringList) {
          SnoAffixStringList = other.SnoAffixStringList;
        }
        if (other.HasAffixStringListIndex) {
          AffixStringListIndex = other.AffixStringListIndex;
        }
        if (other.HasItemStringListIndex) {
          ItemStringListIndex = other.ItemStringListIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              ItemNameIsPrefix = input.ReadBool();
              break;
            }
            case 21: {
              SnoAffixStringList = input.ReadSFixed32();
              break;
            }
            case 24: {
              AffixStringListIndex = input.ReadSInt32();
              break;
            }
            case 32: {
              ItemStringListIndex = input.ReadSInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasItemNameIsPrefix {
        get { return result.HasItemNameIsPrefix; }
      }
      public bool ItemNameIsPrefix {
        get { return result.ItemNameIsPrefix; }
        set { SetItemNameIsPrefix(value); }
      }
      public Builder SetItemNameIsPrefix(bool value) {
        result.hasItemNameIsPrefix = true;
        result.itemNameIsPrefix_ = value;
        return this;
      }
      public Builder ClearItemNameIsPrefix() {
        result.hasItemNameIsPrefix = false;
        result.itemNameIsPrefix_ = false;
        return this;
      }
      
      public bool HasSnoAffixStringList {
        get { return result.HasSnoAffixStringList; }
      }
      public int SnoAffixStringList {
        get { return result.SnoAffixStringList; }
        set { SetSnoAffixStringList(value); }
      }
      public Builder SetSnoAffixStringList(int value) {
        result.hasSnoAffixStringList = true;
        result.snoAffixStringList_ = value;
        return this;
      }
      public Builder ClearSnoAffixStringList() {
        result.hasSnoAffixStringList = false;
        result.snoAffixStringList_ = 0;
        return this;
      }
      
      public bool HasAffixStringListIndex {
        get { return result.HasAffixStringListIndex; }
      }
      public int AffixStringListIndex {
        get { return result.AffixStringListIndex; }
        set { SetAffixStringListIndex(value); }
      }
      public Builder SetAffixStringListIndex(int value) {
        result.hasAffixStringListIndex = true;
        result.affixStringListIndex_ = value;
        return this;
      }
      public Builder ClearAffixStringListIndex() {
        result.hasAffixStringListIndex = false;
        result.affixStringListIndex_ = 0;
        return this;
      }
      
      public bool HasItemStringListIndex {
        get { return result.HasItemStringListIndex; }
      }
      public int ItemStringListIndex {
        get { return result.ItemStringListIndex; }
        set { SetItemStringListIndex(value); }
      }
      public Builder SetItemStringListIndex(int value) {
        result.hasItemStringListIndex = true;
        result.itemStringListIndex_ = value;
        return this;
      }
      public Builder ClearItemStringListIndex() {
        result.hasItemStringListIndex = false;
        result.itemStringListIndex_ = 0;
        return this;
      }
    }
    static RareItemName() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class Generator : pb::GeneratedMessage<Generator, Generator.Builder> {
    private static readonly Generator defaultInstance = new Builder().BuildPartial();
    public static Generator DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Generator DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Generator ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_Generator__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Generator, Generator.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_Generator__FieldAccessorTable; }
    }
    
    public const int SeedFieldNumber = 1;
    private bool hasSeed;
    private uint seed_ = 0;
    public bool HasSeed {
      get { return hasSeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Seed {
      get { return seed_; }
    }
    
    public const int GbHandleFieldNumber = 2;
    private bool hasGbHandle;
    private global::D3.GameBalance.Handle gbHandle_ = global::D3.GameBalance.Handle.DefaultInstance;
    public bool HasGbHandle {
      get { return hasGbHandle; }
    }
    public global::D3.GameBalance.Handle GbHandle {
      get { return gbHandle_; }
    }
    
    public const int BaseAffixesFieldNumber = 3;
    private pbc::PopsicleList<int> baseAffixes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BaseAffixesList {
      get { return pbc::Lists.AsReadOnly(baseAffixes_); }
    }
    public int BaseAffixesCount {
      get { return baseAffixes_.Count; }
    }
    public int GetBaseAffixes(int index) {
      return baseAffixes_[index];
    }
    
    public const int RareItemNameFieldNumber = 4;
    private bool hasRareItemName;
    private global::D3.Items.RareItemName rareItemName_ = global::D3.Items.RareItemName.DefaultInstance;
    public bool HasRareItemName {
      get { return hasRareItemName; }
    }
    public global::D3.Items.RareItemName RareItemName {
      get { return rareItemName_; }
    }
    
    public const int EnchantAffixFieldNumber = 5;
    private bool hasEnchantAffix;
    private int enchantAffix_ = 0;
    public bool HasEnchantAffix {
      get { return hasEnchantAffix; }
    }
    public int EnchantAffix {
      get { return enchantAffix_; }
    }
    
    public const int SocketAffixFieldNumber = 6;
    private bool hasSocketAffix;
    private int socketAffix_ = 0;
    public bool HasSocketAffix {
      get { return hasSocketAffix; }
    }
    public int SocketAffix {
      get { return socketAffix_; }
    }
    
    public const int FlagsFieldNumber = 7;
    private bool hasFlags;
    private uint flags_ = 0;
    public bool HasFlags {
      get { return hasFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags {
      get { return flags_; }
    }
    
    public const int DurabilityFieldNumber = 8;
    private bool hasDurability;
    private uint durability_ = 0;
    public bool HasDurability {
      get { return hasDurability; }
    }
    [global::System.CLSCompliant(false)]
    public uint Durability {
      get { return durability_; }
    }
    
    public const int StackSizeFieldNumber = 9;
    private bool hasStackSize;
    private ulong stackSize_ = 0UL;
    public bool HasStackSize {
      get { return hasStackSize; }
    }
    [global::System.CLSCompliant(false)]
    public ulong StackSize {
      get { return stackSize_; }
    }
    
    public const int DyeTypeFieldNumber = 10;
    private bool hasDyeType;
    private uint dyeType_ = 0;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    [global::System.CLSCompliant(false)]
    public uint DyeType {
      get { return dyeType_; }
    }
    
    public const int ItemQualityLevelFieldNumber = 11;
    private bool hasItemQualityLevel;
    private int itemQualityLevel_ = 0;
    public bool HasItemQualityLevel {
      get { return hasItemQualityLevel; }
    }
    public int ItemQualityLevel {
      get { return itemQualityLevel_; }
    }
    
    public const int ItemBindingLevelFieldNumber = 12;
    private bool hasItemBindingLevel;
    private int itemBindingLevel_ = 0;
    public bool HasItemBindingLevel {
      get { return hasItemBindingLevel; }
    }
    public int ItemBindingLevel {
      get { return itemBindingLevel_; }
    }
    
    public const int MaxDurabilityFieldNumber = 13;
    private bool hasMaxDurability;
    private uint maxDurability_ = 0;
    public bool HasMaxDurability {
      get { return hasMaxDurability; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxDurability {
      get { return maxDurability_; }
    }
    
    public const int ContentsFieldNumber = 14;
    private pbc::PopsicleList<global::D3.Items.EmbeddedGenerator> contents_ = new pbc::PopsicleList<global::D3.Items.EmbeddedGenerator>();
    public scg::IList<global::D3.Items.EmbeddedGenerator> ContentsList {
      get { return contents_; }
    }
    public int ContentsCount {
      get { return contents_.Count; }
    }
    public global::D3.Items.EmbeddedGenerator GetContents(int index) {
      return contents_[index];
    }
    
    public const int AttunedSkillFieldNumber = 15;
    private bool hasAttunedSkill;
    private int attunedSkill_ = 0;
    public bool HasAttunedSkill {
      get { return hasAttunedSkill; }
    }
    public int AttunedSkill {
      get { return attunedSkill_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeed) return false;
        if (!hasGbHandle) return false;
        if (!hasRareItemName) return false;
        if (!hasEnchantAffix) return false;
        if (!hasSocketAffix) return false;
        if (!hasFlags) return false;
        if (!hasDurability) return false;
        if (!hasStackSize) return false;
        if (!hasDyeType) return false;
        if (!hasItemQualityLevel) return false;
        if (!hasItemBindingLevel) return false;
        if (!hasMaxDurability) return false;
        if (!GbHandle.IsInitialized) return false;
        if (!RareItemName.IsInitialized) return false;
        foreach (global::D3.Items.EmbeddedGenerator element in ContentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSeed) {
        output.WriteUInt32(1, Seed);
      }
      if (HasGbHandle) {
        output.WriteMessage(2, GbHandle);
      }
      if (baseAffixes_.Count > 0) {
        foreach (int element in baseAffixes_) {
          output.WriteSFixed32(3, element);
        }
      }
      if (HasRareItemName) {
        output.WriteMessage(4, RareItemName);
      }
      if (HasEnchantAffix) {
        output.WriteSFixed32(5, EnchantAffix);
      }
      if (HasSocketAffix) {
        output.WriteSFixed32(6, SocketAffix);
      }
      if (HasFlags) {
        output.WriteUInt32(7, Flags);
      }
      if (HasDurability) {
        output.WriteUInt32(8, Durability);
      }
      if (HasStackSize) {
        output.WriteUInt64(9, StackSize);
      }
      if (HasDyeType) {
        output.WriteUInt32(10, DyeType);
      }
      if (HasItemQualityLevel) {
        output.WriteSInt32(11, ItemQualityLevel);
      }
      if (HasItemBindingLevel) {
        output.WriteSInt32(12, ItemBindingLevel);
      }
      if (HasMaxDurability) {
        output.WriteUInt32(13, MaxDurability);
      }
      foreach (global::D3.Items.EmbeddedGenerator element in ContentsList) {
        output.WriteMessage(14, element);
      }
      if (HasAttunedSkill) {
        output.WriteSFixed32(15, AttunedSkill);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSeed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Seed);
        }
        if (HasGbHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GbHandle);
        }
        {
          int dataSize = 0;
          dataSize = 4 * baseAffixes_.Count;
          size += dataSize;
          size += 1 * baseAffixes_.Count;
        }
        if (HasRareItemName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, RareItemName);
        }
        if (HasEnchantAffix) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(5, EnchantAffix);
        }
        if (HasSocketAffix) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(6, SocketAffix);
        }
        if (HasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, Flags);
        }
        if (HasDurability) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Durability);
        }
        if (HasStackSize) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, StackSize);
        }
        if (HasDyeType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, DyeType);
        }
        if (HasItemQualityLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, ItemQualityLevel);
        }
        if (HasItemBindingLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, ItemBindingLevel);
        }
        if (HasMaxDurability) {
          size += pb::CodedOutputStream.ComputeUInt32Size(13, MaxDurability);
        }
        foreach (global::D3.Items.EmbeddedGenerator element in ContentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        if (HasAttunedSkill) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(15, AttunedSkill);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Generator ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Generator ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Generator ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Generator ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Generator ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Generator ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Generator ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Generator prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Generator, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Generator result = new Generator();
      
      protected override Generator MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Generator();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.Generator.Descriptor; }
      }
      
      public override Generator DefaultInstanceForType {
        get { return global::D3.Items.Generator.DefaultInstance; }
      }
      
      public override Generator BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.baseAffixes_.MakeReadOnly();
        result.contents_.MakeReadOnly();
        Generator returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Generator) {
          return MergeFrom((Generator) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Generator other) {
        if (other == global::D3.Items.Generator.DefaultInstance) return this;
        if (other.HasSeed) {
          Seed = other.Seed;
        }
        if (other.HasGbHandle) {
          MergeGbHandle(other.GbHandle);
        }
        if (other.baseAffixes_.Count != 0) {
          base.AddRange(other.baseAffixes_, result.baseAffixes_);
        }
        if (other.HasRareItemName) {
          MergeRareItemName(other.RareItemName);
        }
        if (other.HasEnchantAffix) {
          EnchantAffix = other.EnchantAffix;
        }
        if (other.HasSocketAffix) {
          SocketAffix = other.SocketAffix;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasDurability) {
          Durability = other.Durability;
        }
        if (other.HasStackSize) {
          StackSize = other.StackSize;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        if (other.HasItemQualityLevel) {
          ItemQualityLevel = other.ItemQualityLevel;
        }
        if (other.HasItemBindingLevel) {
          ItemBindingLevel = other.ItemBindingLevel;
        }
        if (other.HasMaxDurability) {
          MaxDurability = other.MaxDurability;
        }
        if (other.contents_.Count != 0) {
          base.AddRange(other.contents_, result.contents_);
        }
        if (other.HasAttunedSkill) {
          AttunedSkill = other.AttunedSkill;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Seed = input.ReadUInt32();
              break;
            }
            case 18: {
              global::D3.GameBalance.Handle.Builder subBuilder = global::D3.GameBalance.Handle.CreateBuilder();
              if (HasGbHandle) {
                subBuilder.MergeFrom(GbHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GbHandle = subBuilder.BuildPartial();
              break;
            }
            case 29: {
              AddBaseAffixes(input.ReadSFixed32());
              break;
            }
            case 34: {
              global::D3.Items.RareItemName.Builder subBuilder = global::D3.Items.RareItemName.CreateBuilder();
              if (HasRareItemName) {
                subBuilder.MergeFrom(RareItemName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RareItemName = subBuilder.BuildPartial();
              break;
            }
            case 45: {
              EnchantAffix = input.ReadSFixed32();
              break;
            }
            case 53: {
              SocketAffix = input.ReadSFixed32();
              break;
            }
            case 56: {
              Flags = input.ReadUInt32();
              break;
            }
            case 64: {
              Durability = input.ReadUInt32();
              break;
            }
            case 72: {
              StackSize = input.ReadUInt64();
              break;
            }
            case 80: {
              DyeType = input.ReadUInt32();
              break;
            }
            case 88: {
              ItemQualityLevel = input.ReadSInt32();
              break;
            }
            case 96: {
              ItemBindingLevel = input.ReadSInt32();
              break;
            }
            case 104: {
              MaxDurability = input.ReadUInt32();
              break;
            }
            case 114: {
              global::D3.Items.EmbeddedGenerator.Builder subBuilder = global::D3.Items.EmbeddedGenerator.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddContents(subBuilder.BuildPartial());
              break;
            }
            case 125: {
              AttunedSkill = input.ReadSFixed32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSeed {
        get { return result.HasSeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint Seed {
        get { return result.Seed; }
        set { SetSeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSeed(uint value) {
        result.hasSeed = true;
        result.seed_ = value;
        return this;
      }
      public Builder ClearSeed() {
        result.hasSeed = false;
        result.seed_ = 0;
        return this;
      }
      
      public bool HasGbHandle {
       get { return result.HasGbHandle; }
      }
      public global::D3.GameBalance.Handle GbHandle {
        get { return result.GbHandle; }
        set { SetGbHandle(value); }
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGbHandle = true;
        result.gbHandle_ = value;
        return this;
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGbHandle = true;
        result.gbHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGbHandle &&
            result.gbHandle_ != global::D3.GameBalance.Handle.DefaultInstance) {
            result.gbHandle_ = global::D3.GameBalance.Handle.CreateBuilder(result.gbHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.gbHandle_ = value;
        }
        result.hasGbHandle = true;
        return this;
      }
      public Builder ClearGbHandle() {
        result.hasGbHandle = false;
        result.gbHandle_ = global::D3.GameBalance.Handle.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> BaseAffixesList {
        get { return result.baseAffixes_; }
      }
      public int BaseAffixesCount {
        get { return result.BaseAffixesCount; }
      }
      public int GetBaseAffixes(int index) {
        return result.GetBaseAffixes(index);
      }
      public Builder SetBaseAffixes(int index, int value) {
        result.baseAffixes_[index] = value;
        return this;
      }
      public Builder AddBaseAffixes(int value) {
        result.baseAffixes_.Add(value);
        return this;
      }
      public Builder AddRangeBaseAffixes(scg::IEnumerable<int> values) {
        base.AddRange(values, result.baseAffixes_);
        return this;
      }
      public Builder ClearBaseAffixes() {
        result.baseAffixes_.Clear();
        return this;
      }
      
      public bool HasRareItemName {
       get { return result.HasRareItemName; }
      }
      public global::D3.Items.RareItemName RareItemName {
        get { return result.RareItemName; }
        set { SetRareItemName(value); }
      }
      public Builder SetRareItemName(global::D3.Items.RareItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasRareItemName = true;
        result.rareItemName_ = value;
        return this;
      }
      public Builder SetRareItemName(global::D3.Items.RareItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasRareItemName = true;
        result.rareItemName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRareItemName(global::D3.Items.RareItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasRareItemName &&
            result.rareItemName_ != global::D3.Items.RareItemName.DefaultInstance) {
            result.rareItemName_ = global::D3.Items.RareItemName.CreateBuilder(result.rareItemName_).MergeFrom(value).BuildPartial();
        } else {
          result.rareItemName_ = value;
        }
        result.hasRareItemName = true;
        return this;
      }
      public Builder ClearRareItemName() {
        result.hasRareItemName = false;
        result.rareItemName_ = global::D3.Items.RareItemName.DefaultInstance;
        return this;
      }
      
      public bool HasEnchantAffix {
        get { return result.HasEnchantAffix; }
      }
      public int EnchantAffix {
        get { return result.EnchantAffix; }
        set { SetEnchantAffix(value); }
      }
      public Builder SetEnchantAffix(int value) {
        result.hasEnchantAffix = true;
        result.enchantAffix_ = value;
        return this;
      }
      public Builder ClearEnchantAffix() {
        result.hasEnchantAffix = false;
        result.enchantAffix_ = 0;
        return this;
      }
      
      public bool HasSocketAffix {
        get { return result.HasSocketAffix; }
      }
      public int SocketAffix {
        get { return result.SocketAffix; }
        set { SetSocketAffix(value); }
      }
      public Builder SetSocketAffix(int value) {
        result.hasSocketAffix = true;
        result.socketAffix_ = value;
        return this;
      }
      public Builder ClearSocketAffix() {
        result.hasSocketAffix = false;
        result.socketAffix_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.HasFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags(uint value) {
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasDurability {
        get { return result.HasDurability; }
      }
      [global::System.CLSCompliant(false)]
      public uint Durability {
        get { return result.Durability; }
        set { SetDurability(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDurability(uint value) {
        result.hasDurability = true;
        result.durability_ = value;
        return this;
      }
      public Builder ClearDurability() {
        result.hasDurability = false;
        result.durability_ = 0;
        return this;
      }
      
      public bool HasStackSize {
        get { return result.HasStackSize; }
      }
      [global::System.CLSCompliant(false)]
      public ulong StackSize {
        get { return result.StackSize; }
        set { SetStackSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStackSize(ulong value) {
        result.hasStackSize = true;
        result.stackSize_ = value;
        return this;
      }
      public Builder ClearStackSize() {
        result.hasStackSize = false;
        result.stackSize_ = 0UL;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.HasDyeType; }
      }
      [global::System.CLSCompliant(false)]
      public uint DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDyeType(uint value) {
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      public bool HasItemQualityLevel {
        get { return result.HasItemQualityLevel; }
      }
      public int ItemQualityLevel {
        get { return result.ItemQualityLevel; }
        set { SetItemQualityLevel(value); }
      }
      public Builder SetItemQualityLevel(int value) {
        result.hasItemQualityLevel = true;
        result.itemQualityLevel_ = value;
        return this;
      }
      public Builder ClearItemQualityLevel() {
        result.hasItemQualityLevel = false;
        result.itemQualityLevel_ = 0;
        return this;
      }
      
      public bool HasItemBindingLevel {
        get { return result.HasItemBindingLevel; }
      }
      public int ItemBindingLevel {
        get { return result.ItemBindingLevel; }
        set { SetItemBindingLevel(value); }
      }
      public Builder SetItemBindingLevel(int value) {
        result.hasItemBindingLevel = true;
        result.itemBindingLevel_ = value;
        return this;
      }
      public Builder ClearItemBindingLevel() {
        result.hasItemBindingLevel = false;
        result.itemBindingLevel_ = 0;
        return this;
      }
      
      public bool HasMaxDurability {
        get { return result.HasMaxDurability; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxDurability {
        get { return result.MaxDurability; }
        set { SetMaxDurability(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxDurability(uint value) {
        result.hasMaxDurability = true;
        result.maxDurability_ = value;
        return this;
      }
      public Builder ClearMaxDurability() {
        result.hasMaxDurability = false;
        result.maxDurability_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Items.EmbeddedGenerator> ContentsList {
        get { return result.contents_; }
      }
      public int ContentsCount {
        get { return result.ContentsCount; }
      }
      public global::D3.Items.EmbeddedGenerator GetContents(int index) {
        return result.GetContents(index);
      }
      public Builder SetContents(int index, global::D3.Items.EmbeddedGenerator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.contents_[index] = value;
        return this;
      }
      public Builder SetContents(int index, global::D3.Items.EmbeddedGenerator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.contents_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContents(global::D3.Items.EmbeddedGenerator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.contents_.Add(value);
        return this;
      }
      public Builder AddContents(global::D3.Items.EmbeddedGenerator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.contents_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContents(scg::IEnumerable<global::D3.Items.EmbeddedGenerator> values) {
        base.AddRange(values, result.contents_);
        return this;
      }
      public Builder ClearContents() {
        result.contents_.Clear();
        return this;
      }
      
      public bool HasAttunedSkill {
        get { return result.HasAttunedSkill; }
      }
      public int AttunedSkill {
        get { return result.AttunedSkill; }
        set { SetAttunedSkill(value); }
      }
      public Builder SetAttunedSkill(int value) {
        result.hasAttunedSkill = true;
        result.attunedSkill_ = value;
        return this;
      }
      public Builder ClearAttunedSkill() {
        result.hasAttunedSkill = false;
        result.attunedSkill_ = 0;
        return this;
      }
    }
    static Generator() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class EmbeddedGenerator : pb::GeneratedMessage<EmbeddedGenerator, EmbeddedGenerator.Builder> {
    private static readonly EmbeddedGenerator defaultInstance = new Builder().BuildPartial();
    public static EmbeddedGenerator DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EmbeddedGenerator DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override EmbeddedGenerator ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_EmbeddedGenerator__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EmbeddedGenerator, EmbeddedGenerator.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_ = global::D3.OnlineService.ItemId.DefaultInstance;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_ = global::D3.Items.Generator.DefaultInstance;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasGenerator) return false;
        if (!Id.IsInitialized) return false;
        if (!Generator.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteMessage(1, Id);
      }
      if (HasGenerator) {
        output.WriteMessage(2, Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (HasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EmbeddedGenerator ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbeddedGenerator ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbeddedGenerator prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<EmbeddedGenerator, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      EmbeddedGenerator result = new EmbeddedGenerator();
      
      protected override EmbeddedGenerator MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new EmbeddedGenerator();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.EmbeddedGenerator.Descriptor; }
      }
      
      public override EmbeddedGenerator DefaultInstanceForType {
        get { return global::D3.Items.EmbeddedGenerator.DefaultInstance; }
      }
      
      public override EmbeddedGenerator BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        EmbeddedGenerator returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmbeddedGenerator) {
          return MergeFrom((EmbeddedGenerator) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EmbeddedGenerator other) {
        if (other == global::D3.Items.EmbeddedGenerator.DefaultInstance) return this;
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (HasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (HasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
       get { return result.HasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = global::D3.OnlineService.ItemId.DefaultInstance;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.HasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        result.hasGenerator = false;
        result.generator_ = global::D3.Items.Generator.DefaultInstance;
        return this;
      }
    }
    static EmbeddedGenerator() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class SavedItem : pb::GeneratedMessage<SavedItem, SavedItem.Builder> {
    private static readonly SavedItem defaultInstance = new Builder().BuildPartial();
    public static SavedItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedItem DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_SavedItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedItem, SavedItem.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_SavedItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_ = global::D3.OnlineService.ItemId.DefaultInstance;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
    }
    
    public const int OwnerEntityIdFieldNumber = 2;
    private bool hasOwnerEntityId;
    private global::D3.OnlineService.EntityId ownerEntityId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasOwnerEntityId {
      get { return hasOwnerEntityId; }
    }
    public global::D3.OnlineService.EntityId OwnerEntityId {
      get { return ownerEntityId_; }
    }
    
    public const int SocketIdFieldNumber = 3;
    private bool hasSocketId;
    private global::D3.OnlineService.ItemId socketId_ = global::D3.OnlineService.ItemId.DefaultInstance;
    public bool HasSocketId {
      get { return hasSocketId; }
    }
    public global::D3.OnlineService.ItemId SocketId {
      get { return socketId_; }
    }
    
    public const int HirelingClassFieldNumber = 4;
    private bool hasHirelingClass;
    private int hirelingClass_ = 0;
    public bool HasHirelingClass {
      get { return hasHirelingClass; }
    }
    public int HirelingClass {
      get { return hirelingClass_; }
    }
    
    public const int ItemSlotFieldNumber = 5;
    private bool hasItemSlot;
    private int itemSlot_ = 0;
    public bool HasItemSlot {
      get { return hasItemSlot; }
    }
    public int ItemSlot {
      get { return itemSlot_; }
    }
    
    public const int SquareIndexFieldNumber = 6;
    private bool hasSquareIndex;
    private int squareIndex_ = 0;
    public bool HasSquareIndex {
      get { return hasSquareIndex; }
    }
    public int SquareIndex {
      get { return squareIndex_; }
    }
    
    public const int UsedSocketCountFieldNumber = 7;
    private bool hasUsedSocketCount;
    private uint usedSocketCount_ = 0;
    public bool HasUsedSocketCount {
      get { return hasUsedSocketCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint UsedSocketCount {
      get { return usedSocketCount_; }
    }
    
    public const int GeneratorFieldNumber = 8;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_ = global::D3.Items.Generator.DefaultInstance;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasHirelingClass) return false;
        if (!hasItemSlot) return false;
        if (!hasSquareIndex) return false;
        if (!hasUsedSocketCount) return false;
        if (!Id.IsInitialized) return false;
        if (HasOwnerEntityId) {
          if (!OwnerEntityId.IsInitialized) return false;
        }
        if (HasSocketId) {
          if (!SocketId.IsInitialized) return false;
        }
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteMessage(1, Id);
      }
      if (HasOwnerEntityId) {
        output.WriteMessage(2, OwnerEntityId);
      }
      if (HasSocketId) {
        output.WriteMessage(3, SocketId);
      }
      if (HasHirelingClass) {
        output.WriteSInt32(4, HirelingClass);
      }
      if (HasItemSlot) {
        output.WriteSInt32(5, ItemSlot);
      }
      if (HasSquareIndex) {
        output.WriteSInt32(6, SquareIndex);
      }
      if (HasUsedSocketCount) {
        output.WriteUInt32(7, UsedSocketCount);
      }
      if (HasGenerator) {
        output.WriteMessage(8, Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (HasOwnerEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, OwnerEntityId);
        }
        if (HasSocketId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SocketId);
        }
        if (HasHirelingClass) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, HirelingClass);
        }
        if (HasItemSlot) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, ItemSlot);
        }
        if (HasSquareIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, SquareIndex);
        }
        if (HasUsedSocketCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, UsedSocketCount);
        }
        if (HasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedItem prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SavedItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedItem result = new SavedItem();
      
      protected override SavedItem MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedItem();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.SavedItem.Descriptor; }
      }
      
      public override SavedItem DefaultInstanceForType {
        get { return global::D3.Items.SavedItem.DefaultInstance; }
      }
      
      public override SavedItem BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SavedItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedItem) {
          return MergeFrom((SavedItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedItem other) {
        if (other == global::D3.Items.SavedItem.DefaultInstance) return this;
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasOwnerEntityId) {
          MergeOwnerEntityId(other.OwnerEntityId);
        }
        if (other.HasSocketId) {
          MergeSocketId(other.SocketId);
        }
        if (other.HasHirelingClass) {
          HirelingClass = other.HirelingClass;
        }
        if (other.HasItemSlot) {
          ItemSlot = other.ItemSlot;
        }
        if (other.HasSquareIndex) {
          SquareIndex = other.SquareIndex;
        }
        if (other.HasUsedSocketCount) {
          UsedSocketCount = other.UsedSocketCount;
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (HasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasOwnerEntityId) {
                subBuilder.MergeFrom(OwnerEntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OwnerEntityId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (HasSocketId) {
                subBuilder.MergeFrom(SocketId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SocketId = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              HirelingClass = input.ReadSInt32();
              break;
            }
            case 40: {
              ItemSlot = input.ReadSInt32();
              break;
            }
            case 48: {
              SquareIndex = input.ReadSInt32();
              break;
            }
            case 56: {
              UsedSocketCount = input.ReadUInt32();
              break;
            }
            case 66: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (HasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
       get { return result.HasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = global::D3.OnlineService.ItemId.DefaultInstance;
        return this;
      }
      
      public bool HasOwnerEntityId {
       get { return result.HasOwnerEntityId; }
      }
      public global::D3.OnlineService.EntityId OwnerEntityId {
        get { return result.OwnerEntityId; }
        set { SetOwnerEntityId(value); }
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOwnerEntityId &&
            result.ownerEntityId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.ownerEntityId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.ownerEntityId_).MergeFrom(value).BuildPartial();
        } else {
          result.ownerEntityId_ = value;
        }
        result.hasOwnerEntityId = true;
        return this;
      }
      public Builder ClearOwnerEntityId() {
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasSocketId {
       get { return result.HasSocketId; }
      }
      public global::D3.OnlineService.ItemId SocketId {
        get { return result.SocketId; }
        set { SetSocketId(value); }
      }
      public Builder SetSocketId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSocketId = true;
        result.socketId_ = value;
        return this;
      }
      public Builder SetSocketId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSocketId = true;
        result.socketId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSocketId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSocketId &&
            result.socketId_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.socketId_ = global::D3.OnlineService.ItemId.CreateBuilder(result.socketId_).MergeFrom(value).BuildPartial();
        } else {
          result.socketId_ = value;
        }
        result.hasSocketId = true;
        return this;
      }
      public Builder ClearSocketId() {
        result.hasSocketId = false;
        result.socketId_ = global::D3.OnlineService.ItemId.DefaultInstance;
        return this;
      }
      
      public bool HasHirelingClass {
        get { return result.HasHirelingClass; }
      }
      public int HirelingClass {
        get { return result.HirelingClass; }
        set { SetHirelingClass(value); }
      }
      public Builder SetHirelingClass(int value) {
        result.hasHirelingClass = true;
        result.hirelingClass_ = value;
        return this;
      }
      public Builder ClearHirelingClass() {
        result.hasHirelingClass = false;
        result.hirelingClass_ = 0;
        return this;
      }
      
      public bool HasItemSlot {
        get { return result.HasItemSlot; }
      }
      public int ItemSlot {
        get { return result.ItemSlot; }
        set { SetItemSlot(value); }
      }
      public Builder SetItemSlot(int value) {
        result.hasItemSlot = true;
        result.itemSlot_ = value;
        return this;
      }
      public Builder ClearItemSlot() {
        result.hasItemSlot = false;
        result.itemSlot_ = 0;
        return this;
      }
      
      public bool HasSquareIndex {
        get { return result.HasSquareIndex; }
      }
      public int SquareIndex {
        get { return result.SquareIndex; }
        set { SetSquareIndex(value); }
      }
      public Builder SetSquareIndex(int value) {
        result.hasSquareIndex = true;
        result.squareIndex_ = value;
        return this;
      }
      public Builder ClearSquareIndex() {
        result.hasSquareIndex = false;
        result.squareIndex_ = 0;
        return this;
      }
      
      public bool HasUsedSocketCount {
        get { return result.HasUsedSocketCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint UsedSocketCount {
        get { return result.UsedSocketCount; }
        set { SetUsedSocketCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsedSocketCount(uint value) {
        result.hasUsedSocketCount = true;
        result.usedSocketCount_ = value;
        return this;
      }
      public Builder ClearUsedSocketCount() {
        result.hasUsedSocketCount = false;
        result.usedSocketCount_ = 0;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.HasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        result.hasGenerator = false;
        result.generator_ = global::D3.Items.Generator.DefaultInstance;
        return this;
      }
    }
    static SavedItem() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class AuctionAccountInfo : pb::GeneratedMessage<AuctionAccountInfo, AuctionAccountInfo.Builder> {
    private static readonly AuctionAccountInfo defaultInstance = new Builder().BuildPartial();
    public static AuctionAccountInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuctionAccountInfo DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AuctionAccountInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionAccountInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuctionAccountInfo, AuctionAccountInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionAccountInfo__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_; }
    }
    
    public const int EscrowIdFieldNumber = 2;
    private bool hasEscrowId;
    private global::D3.OnlineService.EntityId escrowId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasEscrowId {
      get { return hasEscrowId; }
    }
    public global::D3.OnlineService.EntityId EscrowId {
      get { return escrowId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasEscrowId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!EscrowId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteMessage(1, AccountId);
      }
      if (HasEscrowId) {
        output.WriteMessage(2, EscrowId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (HasEscrowId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, EscrowId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuctionAccountInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuctionAccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuctionAccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionAccountInfo ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuctionAccountInfo prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AuctionAccountInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AuctionAccountInfo result = new AuctionAccountInfo();
      
      protected override AuctionAccountInfo MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AuctionAccountInfo();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.AuctionAccountInfo.Descriptor; }
      }
      
      public override AuctionAccountInfo DefaultInstanceForType {
        get { return global::D3.Items.AuctionAccountInfo.DefaultInstance; }
      }
      
      public override AuctionAccountInfo BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AuctionAccountInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuctionAccountInfo) {
          return MergeFrom((AuctionAccountInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuctionAccountInfo other) {
        if (other == global::D3.Items.AuctionAccountInfo.DefaultInstance) return this;
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasEscrowId) {
          MergeEscrowId(other.EscrowId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasEscrowId) {
                subBuilder.MergeFrom(EscrowId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EscrowId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
       get { return result.HasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasEscrowId {
       get { return result.HasEscrowId; }
      }
      public global::D3.OnlineService.EntityId EscrowId {
        get { return result.EscrowId; }
        set { SetEscrowId(value); }
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEscrowId = true;
        result.escrowId_ = value;
        return this;
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEscrowId = true;
        result.escrowId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEscrowId &&
            result.escrowId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.escrowId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.escrowId_).MergeFrom(value).BuildPartial();
        } else {
          result.escrowId_ = value;
        }
        result.hasEscrowId = true;
        return this;
      }
      public Builder ClearEscrowId() {
        result.hasEscrowId = false;
        result.escrowId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
    }
    static AuctionAccountInfo() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class AuctionItem : pb::GeneratedMessage<AuctionItem, AuctionItem.Builder> {
    private static readonly AuctionItem defaultInstance = new Builder().BuildPartial();
    public static AuctionItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuctionItem DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AuctionItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuctionItem, AuctionItem.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_ = global::D3.OnlineService.ItemId.DefaultInstance;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_ = global::D3.Items.Generator.DefaultInstance;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasGenerator) return false;
        if (!Id.IsInitialized) return false;
        if (!Generator.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteMessage(1, Id);
      }
      if (HasGenerator) {
        output.WriteMessage(2, Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (HasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuctionItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuctionItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuctionItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuctionItem ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionItem ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuctionItem prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AuctionItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AuctionItem result = new AuctionItem();
      
      protected override AuctionItem MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AuctionItem();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.AuctionItem.Descriptor; }
      }
      
      public override AuctionItem DefaultInstanceForType {
        get { return global::D3.Items.AuctionItem.DefaultInstance; }
      }
      
      public override AuctionItem BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AuctionItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuctionItem) {
          return MergeFrom((AuctionItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuctionItem other) {
        if (other == global::D3.Items.AuctionItem.DefaultInstance) return this;
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (HasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (HasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
       get { return result.HasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = global::D3.OnlineService.ItemId.DefaultInstance;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.HasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        result.hasGenerator = false;
        result.generator_ = global::D3.Items.Generator.DefaultInstance;
        return this;
      }
    }
    static AuctionItem() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class AuctionInfo : pb::GeneratedMessage<AuctionInfo, AuctionInfo.Builder> {
    private static readonly AuctionInfo defaultInstance = new Builder().BuildPartial();
    public static AuctionInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuctionInfo DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override AuctionInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuctionInfo, AuctionInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_AuctionInfo__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_ = global::D3.OnlineService.ItemId.DefaultInstance;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
    }
    
    public const int OwnerFieldNumber = 2;
    private bool hasOwner;
    private global::D3.Items.Ownership owner_ = global::D3.Items.Ownership.DefaultInstance;
    public bool HasOwner {
      get { return hasOwner; }
    }
    public global::D3.Items.Ownership Owner {
      get { return owner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!Id.IsInitialized) return false;
        if (HasOwner) {
          if (!Owner.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteMessage(1, Id);
      }
      if (HasOwner) {
        output.WriteMessage(2, Owner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (HasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuctionInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuctionInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuctionInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuctionInfo ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuctionInfo ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuctionInfo prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<AuctionInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      AuctionInfo result = new AuctionInfo();
      
      protected override AuctionInfo MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new AuctionInfo();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.AuctionInfo.Descriptor; }
      }
      
      public override AuctionInfo DefaultInstanceForType {
        get { return global::D3.Items.AuctionInfo.DefaultInstance; }
      }
      
      public override AuctionInfo BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        AuctionInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuctionInfo) {
          return MergeFrom((AuctionInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuctionInfo other) {
        if (other == global::D3.Items.AuctionInfo.DefaultInstance) return this;
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasOwner) {
          MergeOwner(other.Owner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (HasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Items.Ownership.Builder subBuilder = global::D3.Items.Ownership.CreateBuilder();
              if (HasOwner) {
                subBuilder.MergeFrom(Owner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Owner = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
       get { return result.HasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = global::D3.OnlineService.ItemId.DefaultInstance;
        return this;
      }
      
      public bool HasOwner {
       get { return result.HasOwner; }
      }
      public global::D3.Items.Ownership Owner {
        get { return result.Owner; }
        set { SetOwner(value); }
      }
      public Builder SetOwner(global::D3.Items.Ownership value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOwner = true;
        result.owner_ = value;
        return this;
      }
      public Builder SetOwner(global::D3.Items.Ownership.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOwner = true;
        result.owner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwner(global::D3.Items.Ownership value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOwner &&
            result.owner_ != global::D3.Items.Ownership.DefaultInstance) {
            result.owner_ = global::D3.Items.Ownership.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
        } else {
          result.owner_ = value;
        }
        result.hasOwner = true;
        return this;
      }
      public Builder ClearOwner() {
        result.hasOwner = false;
        result.owner_ = global::D3.Items.Ownership.DefaultInstance;
        return this;
      }
    }
    static AuctionInfo() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class ItemList : pb::GeneratedMessage<ItemList, ItemList.Builder> {
    private static readonly ItemList defaultInstance = new Builder().BuildPartial();
    public static ItemList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemList DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ItemList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_ItemList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemList, ItemList.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_ItemList__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.SavedItem> items_ = new pbc::PopsicleList<global::D3.Items.SavedItem>();
    public scg::IList<global::D3.Items.SavedItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::D3.Items.SavedItem GetItems(int index) {
      return items_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.Items.SavedItem element in ItemsList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemList ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemList ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemList prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ItemList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ItemList result = new ItemList();
      
      protected override ItemList MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ItemList();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.ItemList.Descriptor; }
      }
      
      public override ItemList DefaultInstanceForType {
        get { return global::D3.Items.ItemList.DefaultInstance; }
      }
      
      public override ItemList BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.items_.MakeReadOnly();
        ItemList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemList) {
          return MergeFrom((ItemList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemList other) {
        if (other == global::D3.Items.ItemList.DefaultInstance) return this;
        if (other.items_.Count != 0) {
          base.AddRange(other.items_, result.items_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Items.SavedItem.Builder subBuilder = global::D3.Items.SavedItem.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddItems(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.SavedItem> ItemsList {
        get { return result.items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::D3.Items.SavedItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::D3.Items.SavedItem> values) {
        base.AddRange(values, result.items_);
        return this;
      }
      public Builder ClearItems() {
        result.items_.Clear();
        return this;
      }
    }
    static ItemList() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  public sealed partial class Ownership : pb::GeneratedMessage<Ownership, Ownership.Builder> {
    private static readonly Ownership defaultInstance = new Builder().BuildPartial();
    public static Ownership DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Ownership DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Ownership ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_Ownership__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Ownership, Ownership.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_Ownership__FieldAccessorTable; }
    }
    
    public const int OwnerEntityIdFieldNumber = 1;
    private bool hasOwnerEntityId;
    private global::D3.OnlineService.EntityId ownerEntityId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasOwnerEntityId {
      get { return hasOwnerEntityId; }
    }
    public global::D3.OnlineService.EntityId OwnerEntityId {
      get { return ownerEntityId_; }
    }
    
    public const int DeleteTimeFieldNumber = 2;
    private bool hasDeleteTime;
    private long deleteTime_ = 0;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public long DeleteTime {
      get { return deleteTime_; }
    }
    
    public const int EscrowIdFieldNumber = 3;
    private bool hasEscrowId;
    private global::D3.OnlineService.EntityId escrowId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasEscrowId {
      get { return hasEscrowId; }
    }
    public global::D3.OnlineService.EntityId EscrowId {
      get { return escrowId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOwnerEntityId) return false;
        if (!OwnerEntityId.IsInitialized) return false;
        if (HasEscrowId) {
          if (!EscrowId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasOwnerEntityId) {
        output.WriteMessage(1, OwnerEntityId);
      }
      if (HasDeleteTime) {
        output.WriteSInt64(2, DeleteTime);
      }
      if (HasEscrowId) {
        output.WriteMessage(3, EscrowId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasOwnerEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, OwnerEntityId);
        }
        if (HasDeleteTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, DeleteTime);
        }
        if (HasEscrowId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, EscrowId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Ownership ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ownership ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ownership ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ownership ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ownership ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ownership ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Ownership ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Ownership ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Ownership ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ownership ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Ownership prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Ownership, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Ownership result = new Ownership();
      
      protected override Ownership MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Ownership();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.Ownership.Descriptor; }
      }
      
      public override Ownership DefaultInstanceForType {
        get { return global::D3.Items.Ownership.DefaultInstance; }
      }
      
      public override Ownership BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Ownership returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Ownership) {
          return MergeFrom((Ownership) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Ownership other) {
        if (other == global::D3.Items.Ownership.DefaultInstance) return this;
        if (other.HasOwnerEntityId) {
          MergeOwnerEntityId(other.OwnerEntityId);
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        if (other.HasEscrowId) {
          MergeEscrowId(other.EscrowId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasOwnerEntityId) {
                subBuilder.MergeFrom(OwnerEntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OwnerEntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              DeleteTime = input.ReadSInt64();
              break;
            }
            case 26: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasEscrowId) {
                subBuilder.MergeFrom(EscrowId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EscrowId = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasOwnerEntityId {
       get { return result.HasOwnerEntityId; }
      }
      public global::D3.OnlineService.EntityId OwnerEntityId {
        get { return result.OwnerEntityId; }
        set { SetOwnerEntityId(value); }
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasOwnerEntityId &&
            result.ownerEntityId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.ownerEntityId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.ownerEntityId_).MergeFrom(value).BuildPartial();
        } else {
          result.ownerEntityId_ = value;
        }
        result.hasOwnerEntityId = true;
        return this;
      }
      public Builder ClearOwnerEntityId() {
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.HasDeleteTime; }
      }
      public long DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(long value) {
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        result.hasDeleteTime = false;
        result.deleteTime_ = 0;
        return this;
      }
      
      public bool HasEscrowId {
       get { return result.HasEscrowId; }
      }
      public global::D3.OnlineService.EntityId EscrowId {
        get { return result.EscrowId; }
        set { SetEscrowId(value); }
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEscrowId = true;
        result.escrowId_ = value;
        return this;
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEscrowId = true;
        result.escrowId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEscrowId &&
            result.escrowId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.escrowId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.escrowId_).MergeFrom(value).BuildPartial();
        } else {
          result.escrowId_ = value;
        }
        result.hasEscrowId = true;
        return this;
      }
      public Builder ClearEscrowId() {
        result.hasEscrowId = false;
        result.escrowId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
    }
    static Ownership() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  #endregion
  
}
