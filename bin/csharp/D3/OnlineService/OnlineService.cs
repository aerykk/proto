// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.OnlineService {
  
  public static partial class OnlineService {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_EntityId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder> internal__static_D3_OnlineService_EntityId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder> internal__static_D3_OnlineService_GameId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ItemId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder> internal__static_D3_OnlineService_ItemId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_CoopCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CoopCreateParams, global::D3.OnlineService.CoopCreateParams.Builder> internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_PvPCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder> internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder> internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_HeroCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder> internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static OnlineService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChZEMy9PbmxpbmVTZXJ2aWNlLnByb3RvEhBEMy5PbmxpbmVTZXJ2aWNlIisK" + 
          "CEVudGl0eUlkEg8KB2lkX2hpZ2gYASACKAQSDgoGaWRfbG93GAIgAigEIjoK" + 
          "BkdhbWVJZBIPCgdmYWN0b3J5GAEgAigEEg8KB2lkX2hpZ2gYAiACKAQSDgoG" + 
          "aWRfbG93GAMgAigEIikKBkl0ZW1JZBIPCgdpZF9oaWdoGAEgAigEEg4KBmlk" + 
          "X2xvdxgCIAIoBCLbAQoQQ29vcENyZWF0ZVBhcmFtcxIYChBkaWZmaWN1bHR5" + 
          "X2xldmVsGAEgAigFEgsKA2FjdBgCIAIoERIRCglzbm9fcXVlc3QYAyACKA8S" + 
          "FQoNcXVlc3Rfc3RlcF9pZBgEIAIoBRI8ChhyZXN1bWVfZnJvbV9zYXZlX2hl" + 
          "cm9faWQYBSABKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEhcKD29w" + 
          "ZW5fdG9fZnJpZW5kcxgGIAIoCBIfChdvcGVuX3RvX2ZyaWVuZHNfbWVzc2Fn" + 
          "ZRgHIAEoCSIkCg9QdlBDcmVhdGVQYXJhbXMSEQoJc25vX3dvcmxkGAEgAigP" + 
          "IsEBChBHYW1lQ3JlYXRlUGFyYW1zEhEKCWdhbWVfdHlwZRgBIAIoERIWCg5j" + 
          "cmVhdGlvbl9mbGFncxgCIAIoDRIwCgRjb29wGAMgASgLMiIuRDMuT25saW5l" + 
          "U2VydmljZS5Db29wQ3JlYXRlUGFyYW1zEi4KA3B2cBgEIAEoCzIhLkQzLk9u" + 
          "bGluZVNlcnZpY2UuUHZQQ3JlYXRlUGFyYW1zEgwKBG5hbWUYBSABKAkSEgoK" + 
          "aXNfcHJpdmF0ZRgGIAIoCCJOChBIZXJvQ3JlYXRlUGFyYW1zEhIKCmdiaWRf" + 
          "Y2xhc3MYASACKA8SEwoLaXNfaGFyZGNvcmUYAiACKAgSEQoJaXNfZmVtYWxl" + 
          "GAMgAigI");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_OnlineService_EntityId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_OnlineService_EntityId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder>(internal__static_D3_OnlineService_EntityId__Descriptor,
                new string[] { "IdHigh", "IdLow", });
        internal__static_D3_OnlineService_GameId__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_OnlineService_GameId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder>(internal__static_D3_OnlineService_GameId__Descriptor,
                new string[] { "Factory", "IdHigh", "IdLow", });
        internal__static_D3_OnlineService_ItemId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_OnlineService_ItemId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder>(internal__static_D3_OnlineService_ItemId__Descriptor,
                new string[] { "IdHigh", "IdLow", });
        internal__static_D3_OnlineService_CoopCreateParams__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CoopCreateParams, global::D3.OnlineService.CoopCreateParams.Builder>(internal__static_D3_OnlineService_CoopCreateParams__Descriptor,
                new string[] { "DifficultyLevel", "Act", "SnoQuest", "QuestStepId", "ResumeFromSaveHeroId", "OpenToFriends", "OpenToFriendsMessage", });
        internal__static_D3_OnlineService_PvPCreateParams__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder>(internal__static_D3_OnlineService_PvPCreateParams__Descriptor,
                new string[] { "SnoWorld", });
        internal__static_D3_OnlineService_GameCreateParams__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder>(internal__static_D3_OnlineService_GameCreateParams__Descriptor,
                new string[] { "GameType", "CreationFlags", "Coop", "Pvp", "Name", "IsPrivate", });
        internal__static_D3_OnlineService_HeroCreateParams__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder>(internal__static_D3_OnlineService_HeroCreateParams__Descriptor,
                new string[] { "GbidClass", "IsHardcore", "IsFemale", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class EntityId : pb::GeneratedMessage<EntityId, EntityId.Builder> {
    private static readonly EntityId defaultInstance = new Builder().BuildPartial();
    public static EntityId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override EntityId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityId, EntityId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__FieldAccessorTable; }
    }
    
    public const int IdHighFieldNumber = 1;
    private bool hasIdHigh;
    private ulong idHigh_ = 0UL;
    public bool HasIdHigh {
      get { return hasIdHigh; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdHigh {
      get { return idHigh_; }
    }
    
    public const int IdLowFieldNumber = 2;
    private bool hasIdLow;
    private ulong idLow_ = 0UL;
    public bool HasIdLow {
      get { return hasIdLow; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdHigh) return false;
        if (!hasIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasIdHigh) {
        output.WriteUInt64(1, IdHigh);
      }
      if (HasIdLow) {
        output.WriteUInt64(2, IdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasIdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, IdHigh);
        }
        if (HasIdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EntityId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<EntityId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      EntityId result = new EntityId();
      
      protected override EntityId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new EntityId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.EntityId.Descriptor; }
      }
      
      public override EntityId DefaultInstanceForType {
        get { return global::D3.OnlineService.EntityId.DefaultInstance; }
      }
      
      public override EntityId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        EntityId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityId) {
          return MergeFrom((EntityId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityId other) {
        if (other == global::D3.OnlineService.EntityId.DefaultInstance) return this;
        if (other.HasIdHigh) {
          IdHigh = other.IdHigh;
        }
        if (other.HasIdLow) {
          IdLow = other.IdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              IdHigh = input.ReadUInt64();
              break;
            }
            case 16: {
              IdLow = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasIdHigh {
        get { return result.HasIdHigh; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdHigh {
        get { return result.IdHigh; }
        set { SetIdHigh(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdHigh(ulong value) {
        result.hasIdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearIdHigh() {
        result.hasIdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasIdLow {
        get { return result.HasIdLow; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdLow {
        get { return result.IdLow; }
        set { SetIdLow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdLow(ulong value) {
        result.hasIdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearIdLow() {
        result.hasIdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static EntityId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class GameId : pb::GeneratedMessage<GameId, GameId.Builder> {
    private static readonly GameId defaultInstance = new Builder().BuildPartial();
    public static GameId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameId, GameId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__FieldAccessorTable; }
    }
    
    public const int FactoryFieldNumber = 1;
    private bool hasFactory;
    private ulong factory_ = 0UL;
    public bool HasFactory {
      get { return hasFactory; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Factory {
      get { return factory_; }
    }
    
    public const int IdHighFieldNumber = 2;
    private bool hasIdHigh;
    private ulong idHigh_ = 0UL;
    public bool HasIdHigh {
      get { return hasIdHigh; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdHigh {
      get { return idHigh_; }
    }
    
    public const int IdLowFieldNumber = 3;
    private bool hasIdLow;
    private ulong idLow_ = 0UL;
    public bool HasIdLow {
      get { return hasIdLow; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactory) return false;
        if (!hasIdHigh) return false;
        if (!hasIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasFactory) {
        output.WriteUInt64(1, Factory);
      }
      if (HasIdHigh) {
        output.WriteUInt64(2, IdHigh);
      }
      if (HasIdLow) {
        output.WriteUInt64(3, IdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasFactory) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Factory);
        }
        if (HasIdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, IdHigh);
        }
        if (HasIdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, IdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameId result = new GameId();
      
      protected override GameId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameId.Descriptor; }
      }
      
      public override GameId DefaultInstanceForType {
        get { return global::D3.OnlineService.GameId.DefaultInstance; }
      }
      
      public override GameId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GameId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameId) {
          return MergeFrom((GameId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameId other) {
        if (other == global::D3.OnlineService.GameId.DefaultInstance) return this;
        if (other.HasFactory) {
          Factory = other.Factory;
        }
        if (other.HasIdHigh) {
          IdHigh = other.IdHigh;
        }
        if (other.HasIdLow) {
          IdLow = other.IdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Factory = input.ReadUInt64();
              break;
            }
            case 16: {
              IdHigh = input.ReadUInt64();
              break;
            }
            case 24: {
              IdLow = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasFactory {
        get { return result.HasFactory; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Factory {
        get { return result.Factory; }
        set { SetFactory(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFactory(ulong value) {
        result.hasFactory = true;
        result.factory_ = value;
        return this;
      }
      public Builder ClearFactory() {
        result.hasFactory = false;
        result.factory_ = 0UL;
        return this;
      }
      
      public bool HasIdHigh {
        get { return result.HasIdHigh; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdHigh {
        get { return result.IdHigh; }
        set { SetIdHigh(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdHigh(ulong value) {
        result.hasIdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearIdHigh() {
        result.hasIdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasIdLow {
        get { return result.HasIdLow; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdLow {
        get { return result.IdLow; }
        set { SetIdLow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdLow(ulong value) {
        result.hasIdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearIdLow() {
        result.hasIdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static GameId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class ItemId : pb::GeneratedMessage<ItemId, ItemId.Builder> {
    private static readonly ItemId defaultInstance = new Builder().BuildPartial();
    public static ItemId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemId DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ItemId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemId, ItemId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__FieldAccessorTable; }
    }
    
    public const int IdHighFieldNumber = 1;
    private bool hasIdHigh;
    private ulong idHigh_ = 0UL;
    public bool HasIdHigh {
      get { return hasIdHigh; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdHigh {
      get { return idHigh_; }
    }
    
    public const int IdLowFieldNumber = 2;
    private bool hasIdLow;
    private ulong idLow_ = 0UL;
    public bool HasIdLow {
      get { return hasIdLow; }
    }
    [global::System.CLSCompliant(false)]
    public ulong IdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdHigh) return false;
        if (!hasIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasIdHigh) {
        output.WriteUInt64(1, IdHigh);
      }
      if (HasIdLow) {
        output.WriteUInt64(2, IdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasIdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, IdHigh);
        }
        if (HasIdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemId ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemId prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ItemId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ItemId result = new ItemId();
      
      protected override ItemId MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ItemId();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ItemId.Descriptor; }
      }
      
      public override ItemId DefaultInstanceForType {
        get { return global::D3.OnlineService.ItemId.DefaultInstance; }
      }
      
      public override ItemId BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ItemId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemId) {
          return MergeFrom((ItemId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemId other) {
        if (other == global::D3.OnlineService.ItemId.DefaultInstance) return this;
        if (other.HasIdHigh) {
          IdHigh = other.IdHigh;
        }
        if (other.HasIdLow) {
          IdLow = other.IdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              IdHigh = input.ReadUInt64();
              break;
            }
            case 16: {
              IdLow = input.ReadUInt64();
              break;
            }
          }
        }
      }
      
      
      public bool HasIdHigh {
        get { return result.HasIdHigh; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdHigh {
        get { return result.IdHigh; }
        set { SetIdHigh(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdHigh(ulong value) {
        result.hasIdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearIdHigh() {
        result.hasIdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasIdLow {
        get { return result.HasIdLow; }
      }
      [global::System.CLSCompliant(false)]
      public ulong IdLow {
        get { return result.IdLow; }
        set { SetIdLow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdLow(ulong value) {
        result.hasIdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearIdLow() {
        result.hasIdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static ItemId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class CoopCreateParams : pb::GeneratedMessage<CoopCreateParams, CoopCreateParams.Builder> {
    private static readonly CoopCreateParams defaultInstance = new Builder().BuildPartial();
    public static CoopCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CoopCreateParams DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override CoopCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CoopCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CoopCreateParams, CoopCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CoopCreateParams__FieldAccessorTable; }
    }
    
    public const int DifficultyLevelFieldNumber = 1;
    private bool hasDifficultyLevel;
    private int difficultyLevel_ = 0;
    public bool HasDifficultyLevel {
      get { return hasDifficultyLevel; }
    }
    public int DifficultyLevel {
      get { return difficultyLevel_; }
    }
    
    public const int ActFieldNumber = 2;
    private bool hasAct;
    private int act_ = 0;
    public bool HasAct {
      get { return hasAct; }
    }
    public int Act {
      get { return act_; }
    }
    
    public const int SnoQuestFieldNumber = 3;
    private bool hasSnoQuest;
    private int snoQuest_ = 0;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int QuestStepIdFieldNumber = 4;
    private bool hasQuestStepId;
    private int questStepId_ = 0;
    public bool HasQuestStepId {
      get { return hasQuestStepId; }
    }
    public int QuestStepId {
      get { return questStepId_; }
    }
    
    public const int ResumeFromSaveHeroIdFieldNumber = 5;
    private bool hasResumeFromSaveHeroId;
    private global::D3.OnlineService.EntityId resumeFromSaveHeroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasResumeFromSaveHeroId {
      get { return hasResumeFromSaveHeroId; }
    }
    public global::D3.OnlineService.EntityId ResumeFromSaveHeroId {
      get { return resumeFromSaveHeroId_; }
    }
    
    public const int OpenToFriendsFieldNumber = 6;
    private bool hasOpenToFriends;
    private bool openToFriends_ = false;
    public bool HasOpenToFriends {
      get { return hasOpenToFriends; }
    }
    public bool OpenToFriends {
      get { return openToFriends_; }
    }
    
    public const int OpenToFriendsMessageFieldNumber = 7;
    private bool hasOpenToFriendsMessage;
    private string openToFriendsMessage_ = "";
    public bool HasOpenToFriendsMessage {
      get { return hasOpenToFriendsMessage; }
    }
    public string OpenToFriendsMessage {
      get { return openToFriendsMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDifficultyLevel) return false;
        if (!hasAct) return false;
        if (!hasSnoQuest) return false;
        if (!hasQuestStepId) return false;
        if (!hasOpenToFriends) return false;
        if (HasResumeFromSaveHeroId) {
          if (!ResumeFromSaveHeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasDifficultyLevel) {
        output.WriteInt32(1, DifficultyLevel);
      }
      if (HasAct) {
        output.WriteSInt32(2, Act);
      }
      if (HasSnoQuest) {
        output.WriteSFixed32(3, SnoQuest);
      }
      if (HasQuestStepId) {
        output.WriteInt32(4, QuestStepId);
      }
      if (HasResumeFromSaveHeroId) {
        output.WriteMessage(5, ResumeFromSaveHeroId);
      }
      if (HasOpenToFriends) {
        output.WriteBool(6, OpenToFriends);
      }
      if (HasOpenToFriendsMessage) {
        output.WriteString(7, OpenToFriendsMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasDifficultyLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, DifficultyLevel);
        }
        if (HasAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Act);
        }
        if (HasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, SnoQuest);
        }
        if (HasQuestStepId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, QuestStepId);
        }
        if (HasResumeFromSaveHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ResumeFromSaveHeroId);
        }
        if (HasOpenToFriends) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, OpenToFriends);
        }
        if (HasOpenToFriendsMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OpenToFriendsMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CoopCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CoopCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CoopCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CoopCreateParams ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CoopCreateParams prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<CoopCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      CoopCreateParams result = new CoopCreateParams();
      
      protected override CoopCreateParams MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new CoopCreateParams();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.CoopCreateParams.Descriptor; }
      }
      
      public override CoopCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.CoopCreateParams.DefaultInstance; }
      }
      
      public override CoopCreateParams BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        CoopCreateParams returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CoopCreateParams) {
          return MergeFrom((CoopCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CoopCreateParams other) {
        if (other == global::D3.OnlineService.CoopCreateParams.DefaultInstance) return this;
        if (other.HasDifficultyLevel) {
          DifficultyLevel = other.DifficultyLevel;
        }
        if (other.HasAct) {
          Act = other.Act;
        }
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasQuestStepId) {
          QuestStepId = other.QuestStepId;
        }
        if (other.HasResumeFromSaveHeroId) {
          MergeResumeFromSaveHeroId(other.ResumeFromSaveHeroId);
        }
        if (other.HasOpenToFriends) {
          OpenToFriends = other.OpenToFriends;
        }
        if (other.HasOpenToFriendsMessage) {
          OpenToFriendsMessage = other.OpenToFriendsMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              DifficultyLevel = input.ReadInt32();
              break;
            }
            case 16: {
              Act = input.ReadSInt32();
              break;
            }
            case 29: {
              SnoQuest = input.ReadSFixed32();
              break;
            }
            case 32: {
              QuestStepId = input.ReadInt32();
              break;
            }
            case 42: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasResumeFromSaveHeroId) {
                subBuilder.MergeFrom(ResumeFromSaveHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResumeFromSaveHeroId = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              OpenToFriends = input.ReadBool();
              break;
            }
            case 58: {
              OpenToFriendsMessage = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasDifficultyLevel {
        get { return result.HasDifficultyLevel; }
      }
      public int DifficultyLevel {
        get { return result.DifficultyLevel; }
        set { SetDifficultyLevel(value); }
      }
      public Builder SetDifficultyLevel(int value) {
        result.hasDifficultyLevel = true;
        result.difficultyLevel_ = value;
        return this;
      }
      public Builder ClearDifficultyLevel() {
        result.hasDifficultyLevel = false;
        result.difficultyLevel_ = 0;
        return this;
      }
      
      public bool HasAct {
        get { return result.HasAct; }
      }
      public int Act {
        get { return result.Act; }
        set { SetAct(value); }
      }
      public Builder SetAct(int value) {
        result.hasAct = true;
        result.act_ = value;
        return this;
      }
      public Builder ClearAct() {
        result.hasAct = false;
        result.act_ = 0;
        return this;
      }
      
      public bool HasSnoQuest {
        get { return result.HasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      public bool HasQuestStepId {
        get { return result.HasQuestStepId; }
      }
      public int QuestStepId {
        get { return result.QuestStepId; }
        set { SetQuestStepId(value); }
      }
      public Builder SetQuestStepId(int value) {
        result.hasQuestStepId = true;
        result.questStepId_ = value;
        return this;
      }
      public Builder ClearQuestStepId() {
        result.hasQuestStepId = false;
        result.questStepId_ = 0;
        return this;
      }
      
      public bool HasResumeFromSaveHeroId {
       get { return result.HasResumeFromSaveHeroId; }
      }
      public global::D3.OnlineService.EntityId ResumeFromSaveHeroId {
        get { return result.ResumeFromSaveHeroId; }
        set { SetResumeFromSaveHeroId(value); }
      }
      public Builder SetResumeFromSaveHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResumeFromSaveHeroId = true;
        result.resumeFromSaveHeroId_ = value;
        return this;
      }
      public Builder SetResumeFromSaveHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResumeFromSaveHeroId = true;
        result.resumeFromSaveHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResumeFromSaveHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResumeFromSaveHeroId &&
            result.resumeFromSaveHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.resumeFromSaveHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.resumeFromSaveHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.resumeFromSaveHeroId_ = value;
        }
        result.hasResumeFromSaveHeroId = true;
        return this;
      }
      public Builder ClearResumeFromSaveHeroId() {
        result.hasResumeFromSaveHeroId = false;
        result.resumeFromSaveHeroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasOpenToFriends {
        get { return result.HasOpenToFriends; }
      }
      public bool OpenToFriends {
        get { return result.OpenToFriends; }
        set { SetOpenToFriends(value); }
      }
      public Builder SetOpenToFriends(bool value) {
        result.hasOpenToFriends = true;
        result.openToFriends_ = value;
        return this;
      }
      public Builder ClearOpenToFriends() {
        result.hasOpenToFriends = false;
        result.openToFriends_ = false;
        return this;
      }
      
      public bool HasOpenToFriendsMessage {
        get { return result.HasOpenToFriendsMessage; }
      }
      public string OpenToFriendsMessage {
        get { return result.OpenToFriendsMessage; }
        set { SetOpenToFriendsMessage(value); }
      }
      public Builder SetOpenToFriendsMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasOpenToFriendsMessage = true;
        result.openToFriendsMessage_ = value;
        return this;
      }
      public Builder ClearOpenToFriendsMessage() {
        result.hasOpenToFriendsMessage = false;
        result.openToFriendsMessage_ = "";
        return this;
      }
    }
    static CoopCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class PvPCreateParams : pb::GeneratedMessage<PvPCreateParams, PvPCreateParams.Builder> {
    private static readonly PvPCreateParams defaultInstance = new Builder().BuildPartial();
    public static PvPCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvPCreateParams DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PvPCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvPCreateParams, PvPCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = 0;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasSnoWorld) {
        output.WriteSFixed32(1, SnoWorld);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvPCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvPCreateParams prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PvPCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PvPCreateParams result = new PvPCreateParams();
      
      protected override PvPCreateParams MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PvPCreateParams();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.PvPCreateParams.Descriptor; }
      }
      
      public override PvPCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.PvPCreateParams.DefaultInstance; }
      }
      
      public override PvPCreateParams BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PvPCreateParams returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvPCreateParams) {
          return MergeFrom((PvPCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvPCreateParams other) {
        if (other == global::D3.OnlineService.PvPCreateParams.DefaultInstance) return this;
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              SnoWorld = input.ReadSFixed32();
              break;
            }
          }
        }
      }
      
      
      public bool HasSnoWorld {
        get { return result.HasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        result.hasSnoWorld = false;
        result.snoWorld_ = 0;
        return this;
      }
    }
    static PvPCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class GameCreateParams : pb::GeneratedMessage<GameCreateParams, GameCreateParams.Builder> {
    private static readonly GameCreateParams defaultInstance = new Builder().BuildPartial();
    public static GameCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameCreateParams DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameCreateParams, GameCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable; }
    }
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private int gameType_ = 0;
    public bool HasGameType {
      get { return hasGameType; }
    }
    public int GameType {
      get { return gameType_; }
    }
    
    public const int CreationFlagsFieldNumber = 2;
    private bool hasCreationFlags;
    private uint creationFlags_ = 0;
    public bool HasCreationFlags {
      get { return hasCreationFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint CreationFlags {
      get { return creationFlags_; }
    }
    
    public const int CoopFieldNumber = 3;
    private bool hasCoop;
    private global::D3.OnlineService.CoopCreateParams coop_ = global::D3.OnlineService.CoopCreateParams.DefaultInstance;
    public bool HasCoop {
      get { return hasCoop; }
    }
    public global::D3.OnlineService.CoopCreateParams Coop {
      get { return coop_; }
    }
    
    public const int PvpFieldNumber = 4;
    private bool hasPvp;
    private global::D3.OnlineService.PvPCreateParams pvp_ = global::D3.OnlineService.PvPCreateParams.DefaultInstance;
    public bool HasPvp {
      get { return hasPvp; }
    }
    public global::D3.OnlineService.PvPCreateParams Pvp {
      get { return pvp_; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int IsPrivateFieldNumber = 6;
    private bool hasIsPrivate;
    private bool isPrivate_ = false;
    public bool HasIsPrivate {
      get { return hasIsPrivate; }
    }
    public bool IsPrivate {
      get { return isPrivate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        if (!hasCreationFlags) return false;
        if (!hasIsPrivate) return false;
        if (HasCoop) {
          if (!Coop.IsInitialized) return false;
        }
        if (HasPvp) {
          if (!Pvp.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasGameType) {
        output.WriteSInt32(1, GameType);
      }
      if (HasCreationFlags) {
        output.WriteUInt32(2, CreationFlags);
      }
      if (HasCoop) {
        output.WriteMessage(3, Coop);
      }
      if (HasPvp) {
        output.WriteMessage(4, Pvp);
      }
      if (HasName) {
        output.WriteString(5, Name);
      }
      if (HasIsPrivate) {
        output.WriteBool(6, IsPrivate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasGameType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, GameType);
        }
        if (HasCreationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CreationFlags);
        }
        if (HasCoop) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Coop);
        }
        if (HasPvp) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Pvp);
        }
        if (HasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (HasIsPrivate) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsPrivate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameCreateParams prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameCreateParams result = new GameCreateParams();
      
      protected override GameCreateParams MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameCreateParams();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameCreateParams.Descriptor; }
      }
      
      public override GameCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.GameCreateParams.DefaultInstance; }
      }
      
      public override GameCreateParams BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GameCreateParams returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameCreateParams) {
          return MergeFrom((GameCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameCreateParams other) {
        if (other == global::D3.OnlineService.GameCreateParams.DefaultInstance) return this;
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasCreationFlags) {
          CreationFlags = other.CreationFlags;
        }
        if (other.HasCoop) {
          MergeCoop(other.Coop);
        }
        if (other.HasPvp) {
          MergePvp(other.Pvp);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasIsPrivate) {
          IsPrivate = other.IsPrivate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              GameType = input.ReadSInt32();
              break;
            }
            case 16: {
              CreationFlags = input.ReadUInt32();
              break;
            }
            case 26: {
              global::D3.OnlineService.CoopCreateParams.Builder subBuilder = global::D3.OnlineService.CoopCreateParams.CreateBuilder();
              if (HasCoop) {
                subBuilder.MergeFrom(Coop);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Coop = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.OnlineService.PvPCreateParams.Builder subBuilder = global::D3.OnlineService.PvPCreateParams.CreateBuilder();
              if (HasPvp) {
                subBuilder.MergeFrom(Pvp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pvp = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              Name = input.ReadString();
              break;
            }
            case 48: {
              IsPrivate = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasGameType {
        get { return result.HasGameType; }
      }
      public int GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      public Builder SetGameType(int value) {
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      public bool HasCreationFlags {
        get { return result.HasCreationFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint CreationFlags {
        get { return result.CreationFlags; }
        set { SetCreationFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCreationFlags(uint value) {
        result.hasCreationFlags = true;
        result.creationFlags_ = value;
        return this;
      }
      public Builder ClearCreationFlags() {
        result.hasCreationFlags = false;
        result.creationFlags_ = 0;
        return this;
      }
      
      public bool HasCoop {
       get { return result.HasCoop; }
      }
      public global::D3.OnlineService.CoopCreateParams Coop {
        get { return result.Coop; }
        set { SetCoop(value); }
      }
      public Builder SetCoop(global::D3.OnlineService.CoopCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCoop = true;
        result.coop_ = value;
        return this;
      }
      public Builder SetCoop(global::D3.OnlineService.CoopCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasCoop = true;
        result.coop_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCoop(global::D3.OnlineService.CoopCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasCoop &&
            result.coop_ != global::D3.OnlineService.CoopCreateParams.DefaultInstance) {
            result.coop_ = global::D3.OnlineService.CoopCreateParams.CreateBuilder(result.coop_).MergeFrom(value).BuildPartial();
        } else {
          result.coop_ = value;
        }
        result.hasCoop = true;
        return this;
      }
      public Builder ClearCoop() {
        result.hasCoop = false;
        result.coop_ = global::D3.OnlineService.CoopCreateParams.DefaultInstance;
        return this;
      }
      
      public bool HasPvp {
       get { return result.HasPvp; }
      }
      public global::D3.OnlineService.PvPCreateParams Pvp {
        get { return result.Pvp; }
        set { SetPvp(value); }
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPvp = true;
        result.pvp_ = value;
        return this;
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPvp = true;
        result.pvp_ = builderForValue.Build();
        return this;
      }
      public Builder MergePvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPvp &&
            result.pvp_ != global::D3.OnlineService.PvPCreateParams.DefaultInstance) {
            result.pvp_ = global::D3.OnlineService.PvPCreateParams.CreateBuilder(result.pvp_).MergeFrom(value).BuildPartial();
        } else {
          result.pvp_ = value;
        }
        result.hasPvp = true;
        return this;
      }
      public Builder ClearPvp() {
        result.hasPvp = false;
        result.pvp_ = global::D3.OnlineService.PvPCreateParams.DefaultInstance;
        return this;
      }
      
      public bool HasName {
        get { return result.HasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasIsPrivate {
        get { return result.HasIsPrivate; }
      }
      public bool IsPrivate {
        get { return result.IsPrivate; }
        set { SetIsPrivate(value); }
      }
      public Builder SetIsPrivate(bool value) {
        result.hasIsPrivate = true;
        result.isPrivate_ = value;
        return this;
      }
      public Builder ClearIsPrivate() {
        result.hasIsPrivate = false;
        result.isPrivate_ = false;
        return this;
      }
    }
    static GameCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  public sealed partial class HeroCreateParams : pb::GeneratedMessage<HeroCreateParams, HeroCreateParams.Builder> {
    private static readonly HeroCreateParams defaultInstance = new Builder().BuildPartial();
    public static HeroCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroCreateParams DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroCreateParams, HeroCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable; }
    }
    
    public const int GbidClassFieldNumber = 1;
    private bool hasGbidClass;
    private int gbidClass_ = 0;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int IsHardcoreFieldNumber = 2;
    private bool hasIsHardcore;
    private bool isHardcore_ = false;
    public bool HasIsHardcore {
      get { return hasIsHardcore; }
    }
    public bool IsHardcore {
      get { return isHardcore_; }
    }
    
    public const int IsFemaleFieldNumber = 3;
    private bool hasIsFemale;
    private bool isFemale_ = false;
    public bool HasIsFemale {
      get { return hasIsFemale; }
    }
    public bool IsFemale {
      get { return isFemale_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGbidClass) return false;
        if (!hasIsHardcore) return false;
        if (!hasIsFemale) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasGbidClass) {
        output.WriteSFixed32(1, GbidClass);
      }
      if (HasIsHardcore) {
        output.WriteBool(2, IsHardcore);
      }
      if (HasIsFemale) {
        output.WriteBool(3, IsFemale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, GbidClass);
        }
        if (HasIsHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsHardcore);
        }
        if (HasIsFemale) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsFemale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroCreateParams prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroCreateParams result = new HeroCreateParams();
      
      protected override HeroCreateParams MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroCreateParams();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.HeroCreateParams.Descriptor; }
      }
      
      public override HeroCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.HeroCreateParams.DefaultInstance; }
      }
      
      public override HeroCreateParams BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        HeroCreateParams returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroCreateParams) {
          return MergeFrom((HeroCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroCreateParams other) {
        if (other == global::D3.OnlineService.HeroCreateParams.DefaultInstance) return this;
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasIsHardcore) {
          IsHardcore = other.IsHardcore;
        }
        if (other.HasIsFemale) {
          IsFemale = other.IsFemale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 13: {
              GbidClass = input.ReadSFixed32();
              break;
            }
            case 16: {
              IsHardcore = input.ReadBool();
              break;
            }
            case 24: {
              IsFemale = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasGbidClass {
        get { return result.HasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasIsHardcore {
        get { return result.HasIsHardcore; }
      }
      public bool IsHardcore {
        get { return result.IsHardcore; }
        set { SetIsHardcore(value); }
      }
      public Builder SetIsHardcore(bool value) {
        result.hasIsHardcore = true;
        result.isHardcore_ = value;
        return this;
      }
      public Builder ClearIsHardcore() {
        result.hasIsHardcore = false;
        result.isHardcore_ = false;
        return this;
      }
      
      public bool HasIsFemale {
        get { return result.HasIsFemale; }
      }
      public bool IsFemale {
        get { return result.IsFemale; }
        set { SetIsFemale(value); }
      }
      public Builder SetIsFemale(bool value) {
        result.hasIsFemale = true;
        result.isFemale_ = value;
        return this;
      }
      public Builder ClearIsFemale() {
        result.hasIsFemale = false;
        result.isFemale_ = false;
        return this;
      }
    }
    static HeroCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  #endregion
  
}
