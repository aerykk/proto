// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.GameMessage {
  
  public static partial class GameMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestList, global::D3.GameMessage.HeroDigestList.Builder> internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ClientToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientToonSettings, global::D3.GameMessage.ClientToonSettings.Builder> internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListRequest, global::D3.GameMessage.HeroDigestListRequest.Builder> internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestResponse, global::D3.GameMessage.HeroDigestResponse.Builder> internal__static_D3_GameMessage_HeroDigestResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListResponse, global::D3.GameMessage.HeroDigestListResponse.Builder> internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_PlayerBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.PlayerBanner, global::D3.GameMessage.PlayerBanner.Builder> internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SaveBannerConfiguration, global::D3.GameMessage.SaveBannerConfiguration.Builder> internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestBanner, global::D3.GameMessage.HeroDigestBanner.Builder> internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GameCurrentPlayers, global::D3.GameMessage.GameCurrentPlayers.Builder> internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChREMy9HYW1lTWVzc2FnZS5wcm90bxIORDMuR2FtZU1lc3NhZ2UaDUQzL0hl" + 
          "cm8ucHJvdG8aFkQzL09ubGluZVNlcnZpY2UucHJvdG8aEUQzL1NldHRpbmdz" + 
          "LnByb3RvGhBEMy9BY2NvdW50LnByb3RvImYKDkhlcm9EaWdlc3RMaXN0Ei4K" + 
          "CmFjY291bnRfaWQYASACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlk" + 
          "EiQKC2RpZ2VzdF9saXN0GAIgAygLMg8uRDMuSGVyby5EaWdlc3QieAoSQ2xp" + 
          "ZW50VG9vblNldHRpbmdzEisKB3Rvb25faWQYASACKAsyGi5EMy5PbmxpbmVT" + 
          "ZXJ2aWNlLkVudGl0eUlkEjUKFGNsaWVudF90b29uX3NldHRpbmdzGAIgAigL" + 
          "MhcuRDMuQ2xpZW50LlRvb25TZXR0aW5ncyJEChVIZXJvRGlnZXN0TGlzdFJl" + 
          "cXVlc3QSKwoHdG9vbl9pZBgBIAMoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50" + 
          "aXR5SWQieAoSSGVyb0RpZ2VzdFJlc3BvbnNlEisKB3Rvb25faWQYASACKAsy" + 
          "Gi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEg8KB3N1Y2Nlc3MYAiACKAgS" + 
          "JAoLaGVyb19kaWdlc3QYAyABKAsyDy5EMy5IZXJvLkRpZ2VzdCJRChZIZXJv" + 
          "RGlnZXN0TGlzdFJlc3BvbnNlEjcKC2RpZ2VzdF9saXN0GAEgAygLMiIuRDMu" + 
          "R2FtZU1lc3NhZ2UuSGVyb0RpZ2VzdFJlc3BvbnNlIlUKDFBsYXllckJhbm5l" + 
          "chIUCgxwbGF5ZXJfaW5kZXgYASACKA0SLwoGYmFubmVyGAIgAigLMh8uRDMu" + 
          "QWNjb3VudC5CYW5uZXJDb25maWd1cmF0aW9uInMKF1NhdmVCYW5uZXJDb25m" + 
          "aWd1cmF0aW9uEi8KBmJhbm5lchgBIAIoCzIfLkQzLkFjY291bnQuQmFubmVy" + 
          "Q29uZmlndXJhdGlvbhISCgpzbG90X2luZGV4GAIgASgNEhMKC21ha2VfYWN0" + 
          "aXZlGAMgASgIImkKEEhlcm9EaWdlc3RCYW5uZXISJAoLaGVyb19kaWdlc3QY" + 
          "ASACKAsyDy5EMy5IZXJvLkRpZ2VzdBIvCgZiYW5uZXIYAiACKAsyHy5EMy5B" + 
          "Y2NvdW50LkJhbm5lckNvbmZpZ3VyYXRpb24iRwoSR2FtZUN1cnJlbnRQbGF5" + 
          "ZXJzEjEKB3BsYXllcnMYASADKAsyIC5EMy5HYW1lTWVzc2FnZS5IZXJvRGln" + 
          "ZXN0QmFubmVy");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_GameMessage_HeroDigestList__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestList, global::D3.GameMessage.HeroDigestList.Builder>(internal__static_D3_GameMessage_HeroDigestList__Descriptor,
                new string[] { "AccountId", "DigestList", });
        internal__static_D3_GameMessage_ClientToonSettings__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientToonSettings, global::D3.GameMessage.ClientToonSettings.Builder>(internal__static_D3_GameMessage_ClientToonSettings__Descriptor,
                new string[] { "ToonId", "ClientToonSettings_", });
        internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListRequest, global::D3.GameMessage.HeroDigestListRequest.Builder>(internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor,
                new string[] { "ToonId", });
        internal__static_D3_GameMessage_HeroDigestResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_GameMessage_HeroDigestResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestResponse, global::D3.GameMessage.HeroDigestResponse.Builder>(internal__static_D3_GameMessage_HeroDigestResponse__Descriptor,
                new string[] { "ToonId", "Success", "HeroDigest", });
        internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListResponse, global::D3.GameMessage.HeroDigestListResponse.Builder>(internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor,
                new string[] { "DigestList", });
        internal__static_D3_GameMessage_PlayerBanner__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.PlayerBanner, global::D3.GameMessage.PlayerBanner.Builder>(internal__static_D3_GameMessage_PlayerBanner__Descriptor,
                new string[] { "PlayerIndex", "Banner", });
        internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SaveBannerConfiguration, global::D3.GameMessage.SaveBannerConfiguration.Builder>(internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor,
                new string[] { "Banner", "SlotIndex", "MakeActive", });
        internal__static_D3_GameMessage_HeroDigestBanner__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestBanner, global::D3.GameMessage.HeroDigestBanner.Builder>(internal__static_D3_GameMessage_HeroDigestBanner__Descriptor,
                new string[] { "HeroDigest", "Banner", });
        internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GameCurrentPlayers, global::D3.GameMessage.GameCurrentPlayers.Builder>(internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor,
                new string[] { "Players", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.Hero.Hero.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Client.Settings.Descriptor, 
          global::D3.Account.Account.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class HeroDigestList : pb::GeneratedMessage<HeroDigestList, HeroDigestList.Builder> {
    private static readonly HeroDigestList defaultInstance = new Builder().BuildPartial();
    public static HeroDigestList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestList DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroDigestList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestList, HeroDigestList.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_; }
    }
    
    public const int DigestListFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.Digest> digestList_ = new pbc::PopsicleList<global::D3.Hero.Digest>();
    public scg::IList<global::D3.Hero.Digest> DigestListList {
      get { return digestList_; }
    }
    public int DigestListCount {
      get { return digestList_.Count; }
    }
    public global::D3.Hero.Digest GetDigestList(int index) {
      return digestList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        foreach (global::D3.Hero.Digest element in DigestListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasAccountId) {
        output.WriteMessage(1, AccountId);
      }
      foreach (global::D3.Hero.Digest element in DigestListList) {
        output.WriteMessage(2, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        foreach (global::D3.Hero.Digest element in DigestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestList prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroDigestList result = new HeroDigestList();
      
      protected override HeroDigestList MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroDigestList();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestList.Descriptor; }
      }
      
      public override HeroDigestList DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestList.DefaultInstance; }
      }
      
      public override HeroDigestList BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.digestList_.MakeReadOnly();
        HeroDigestList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestList) {
          return MergeFrom((HeroDigestList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestList other) {
        if (other == global::D3.GameMessage.HeroDigestList.DefaultInstance) return this;
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.digestList_.Count != 0) {
          base.AddRange(other.digestList_, result.digestList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddDigestList(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasAccountId {
       get { return result.HasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.Digest> DigestListList {
        get { return result.digestList_; }
      }
      public int DigestListCount {
        get { return result.DigestListCount; }
      }
      public global::D3.Hero.Digest GetDigestList(int index) {
        return result.GetDigestList(index);
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.digestList_[index] = value;
        return this;
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.digestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.digestList_.Add(value);
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.digestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDigestList(scg::IEnumerable<global::D3.Hero.Digest> values) {
        base.AddRange(values, result.digestList_);
        return this;
      }
      public Builder ClearDigestList() {
        result.digestList_.Clear();
        return this;
      }
    }
    static HeroDigestList() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class ClientToonSettings : pb::GeneratedMessage<ClientToonSettings, ClientToonSettings.Builder> {
    private static readonly ClientToonSettings defaultInstance = new Builder().BuildPartial();
    public static ClientToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientToonSettings DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ClientToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientToonSettings, ClientToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private global::D3.OnlineService.EntityId toonId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::D3.OnlineService.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int ClientToonSettings_FieldNumber = 2;
    private bool hasClientToonSettings_;
    private global::D3.Client.ToonSettings clientToonSettings_ = global::D3.Client.ToonSettings.DefaultInstance;
    public bool HasClientToonSettings_ {
      get { return hasClientToonSettings_; }
    }
    public global::D3.Client.ToonSettings ClientToonSettings_ {
      get { return clientToonSettings_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!hasClientToonSettings_) return false;
        if (!ToonId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasToonId) {
        output.WriteMessage(1, ToonId);
      }
      if (HasClientToonSettings_) {
        output.WriteMessage(2, ClientToonSettings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ToonId);
        }
        if (HasClientToonSettings_) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ClientToonSettings_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientToonSettings prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<ClientToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ClientToonSettings result = new ClientToonSettings();
      
      protected override ClientToonSettings MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ClientToonSettings();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ClientToonSettings.Descriptor; }
      }
      
      public override ClientToonSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.ClientToonSettings.DefaultInstance; }
      }
      
      public override ClientToonSettings BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ClientToonSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientToonSettings) {
          return MergeFrom((ClientToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientToonSettings other) {
        if (other == global::D3.GameMessage.ClientToonSettings.DefaultInstance) return this;
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasClientToonSettings_) {
          MergeClientToonSettings_(other.ClientToonSettings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Client.ToonSettings.Builder subBuilder = global::D3.Client.ToonSettings.CreateBuilder();
              if (HasClientToonSettings_) {
                subBuilder.MergeFrom(ClientToonSettings_);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientToonSettings_ = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::D3.OnlineService.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.toonId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasClientToonSettings_ {
       get { return result.HasClientToonSettings_; }
      }
      public global::D3.Client.ToonSettings ClientToonSettings_ {
        get { return result.ClientToonSettings_; }
        set { SetClientToonSettings_(value); }
      }
      public Builder SetClientToonSettings_(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClientToonSettings_ = true;
        result.clientToonSettings_ = value;
        return this;
      }
      public Builder SetClientToonSettings_(global::D3.Client.ToonSettings.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClientToonSettings_ = true;
        result.clientToonSettings_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientToonSettings_(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClientToonSettings_ &&
            result.clientToonSettings_ != global::D3.Client.ToonSettings.DefaultInstance) {
            result.clientToonSettings_ = global::D3.Client.ToonSettings.CreateBuilder(result.clientToonSettings_).MergeFrom(value).BuildPartial();
        } else {
          result.clientToonSettings_ = value;
        }
        result.hasClientToonSettings_ = true;
        return this;
      }
      public Builder ClearClientToonSettings_() {
        result.hasClientToonSettings_ = false;
        result.clientToonSettings_ = global::D3.Client.ToonSettings.DefaultInstance;
        return this;
      }
    }
    static ClientToonSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class HeroDigestListRequest : pb::GeneratedMessage<HeroDigestListRequest, HeroDigestListRequest.Builder> {
    private static readonly HeroDigestListRequest defaultInstance = new Builder().BuildPartial();
    public static HeroDigestListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestListRequest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroDigestListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestListRequest, HeroDigestListRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private pbc::PopsicleList<global::D3.OnlineService.EntityId> toonId_ = new pbc::PopsicleList<global::D3.OnlineService.EntityId>();
    public scg::IList<global::D3.OnlineService.EntityId> ToonIdList {
      get { return toonId_; }
    }
    public int ToonIdCount {
      get { return toonId_.Count; }
    }
    public global::D3.OnlineService.EntityId GetToonId(int index) {
      return toonId_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.OnlineService.EntityId element in ToonIdList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.OnlineService.EntityId element in ToonIdList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.OnlineService.EntityId element in ToonIdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestListRequest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroDigestListRequest result = new HeroDigestListRequest();
      
      protected override HeroDigestListRequest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroDigestListRequest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestListRequest.Descriptor; }
      }
      
      public override HeroDigestListRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestListRequest.DefaultInstance; }
      }
      
      public override HeroDigestListRequest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.toonId_.MakeReadOnly();
        HeroDigestListRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestListRequest) {
          return MergeFrom((HeroDigestListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestListRequest other) {
        if (other == global::D3.GameMessage.HeroDigestListRequest.DefaultInstance) return this;
        if (other.toonId_.Count != 0) {
          base.AddRange(other.toonId_, result.toonId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddToonId(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.OnlineService.EntityId> ToonIdList {
        get { return result.toonId_; }
      }
      public int ToonIdCount {
        get { return result.ToonIdCount; }
      }
      public global::D3.OnlineService.EntityId GetToonId(int index) {
        return result.GetToonId(index);
      }
      public Builder SetToonId(int index, global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.toonId_[index] = value;
        return this;
      }
      public Builder SetToonId(int index, global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.toonId_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddToonId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.toonId_.Add(value);
        return this;
      }
      public Builder AddToonId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.toonId_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeToonId(scg::IEnumerable<global::D3.OnlineService.EntityId> values) {
        base.AddRange(values, result.toonId_);
        return this;
      }
      public Builder ClearToonId() {
        result.toonId_.Clear();
        return this;
      }
    }
    static HeroDigestListRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class HeroDigestResponse : pb::GeneratedMessage<HeroDigestResponse, HeroDigestResponse.Builder> {
    private static readonly HeroDigestResponse defaultInstance = new Builder().BuildPartial();
    public static HeroDigestResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroDigestResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestResponse, HeroDigestResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestResponse__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private global::D3.OnlineService.EntityId toonId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::D3.OnlineService.EntityId ToonId {
      get { return toonId_; }
    }
    
    public const int SuccessFieldNumber = 2;
    private bool hasSuccess;
    private bool success_ = false;
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public bool Success {
      get { return success_; }
    }
    
    public const int HeroDigestFieldNumber = 3;
    private bool hasHeroDigest;
    private global::D3.Hero.Digest heroDigest_ = global::D3.Hero.Digest.DefaultInstance;
    public bool HasHeroDigest {
      get { return hasHeroDigest; }
    }
    public global::D3.Hero.Digest HeroDigest {
      get { return heroDigest_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!hasSuccess) return false;
        if (!ToonId.IsInitialized) return false;
        if (HasHeroDigest) {
          if (!HeroDigest.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasToonId) {
        output.WriteMessage(1, ToonId);
      }
      if (HasSuccess) {
        output.WriteBool(2, Success);
      }
      if (HasHeroDigest) {
        output.WriteMessage(3, HeroDigest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ToonId);
        }
        if (HasSuccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Success);
        }
        if (HasHeroDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, HeroDigest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroDigestResponse result = new HeroDigestResponse();
      
      protected override HeroDigestResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroDigestResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestResponse.Descriptor; }
      }
      
      public override HeroDigestResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestResponse.DefaultInstance; }
      }
      
      public override HeroDigestResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        HeroDigestResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestResponse) {
          return MergeFrom((HeroDigestResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestResponse other) {
        if (other == global::D3.GameMessage.HeroDigestResponse.DefaultInstance) return this;
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasSuccess) {
          Success = other.Success;
        }
        if (other.HasHeroDigest) {
          MergeHeroDigest(other.HeroDigest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (HasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              Success = input.ReadBool();
              break;
            }
            case 26: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (HasHeroDigest) {
                subBuilder.MergeFrom(HeroDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigest = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasToonId {
       get { return result.HasToonId; }
      }
      public global::D3.OnlineService.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasToonId &&
            result.toonId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.toonId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        result.hasToonId = false;
        result.toonId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasSuccess {
        get { return result.HasSuccess; }
      }
      public bool Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(bool value) {
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        result.hasSuccess = false;
        result.success_ = false;
        return this;
      }
      
      public bool HasHeroDigest {
       get { return result.HasHeroDigest; }
      }
      public global::D3.Hero.Digest HeroDigest {
        get { return result.HeroDigest; }
        set { SetHeroDigest(value); }
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHeroDigest &&
            result.heroDigest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.heroDigest_ = global::D3.Hero.Digest.CreateBuilder(result.heroDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder ClearHeroDigest() {
        result.hasHeroDigest = false;
        result.heroDigest_ = global::D3.Hero.Digest.DefaultInstance;
        return this;
      }
    }
    static HeroDigestResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class HeroDigestListResponse : pb::GeneratedMessage<HeroDigestListResponse, HeroDigestListResponse.Builder> {
    private static readonly HeroDigestListResponse defaultInstance = new Builder().BuildPartial();
    public static HeroDigestListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestListResponse DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroDigestListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestListResponse, HeroDigestListResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable; }
    }
    
    public const int DigestListFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.HeroDigestResponse> digestList_ = new pbc::PopsicleList<global::D3.GameMessage.HeroDigestResponse>();
    public scg::IList<global::D3.GameMessage.HeroDigestResponse> DigestListList {
      get { return digestList_; }
    }
    public int DigestListCount {
      get { return digestList_.Count; }
    }
    public global::D3.GameMessage.HeroDigestResponse GetDigestList(int index) {
      return digestList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.GameMessage.HeroDigestResponse element in DigestListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.GameMessage.HeroDigestResponse element in DigestListList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.HeroDigestResponse element in DigestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestListResponse prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroDigestListResponse result = new HeroDigestListResponse();
      
      protected override HeroDigestListResponse MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroDigestListResponse();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestListResponse.Descriptor; }
      }
      
      public override HeroDigestListResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestListResponse.DefaultInstance; }
      }
      
      public override HeroDigestListResponse BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.digestList_.MakeReadOnly();
        HeroDigestListResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestListResponse) {
          return MergeFrom((HeroDigestListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestListResponse other) {
        if (other == global::D3.GameMessage.HeroDigestListResponse.DefaultInstance) return this;
        if (other.digestList_.Count != 0) {
          base.AddRange(other.digestList_, result.digestList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.GameMessage.HeroDigestResponse.Builder subBuilder = global::D3.GameMessage.HeroDigestResponse.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddDigestList(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.HeroDigestResponse> DigestListList {
        get { return result.digestList_; }
      }
      public int DigestListCount {
        get { return result.DigestListCount; }
      }
      public global::D3.GameMessage.HeroDigestResponse GetDigestList(int index) {
        return result.GetDigestList(index);
      }
      public Builder SetDigestList(int index, global::D3.GameMessage.HeroDigestResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.digestList_[index] = value;
        return this;
      }
      public Builder SetDigestList(int index, global::D3.GameMessage.HeroDigestResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.digestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDigestList(global::D3.GameMessage.HeroDigestResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.digestList_.Add(value);
        return this;
      }
      public Builder AddDigestList(global::D3.GameMessage.HeroDigestResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.digestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDigestList(scg::IEnumerable<global::D3.GameMessage.HeroDigestResponse> values) {
        base.AddRange(values, result.digestList_);
        return this;
      }
      public Builder ClearDigestList() {
        result.digestList_.Clear();
        return this;
      }
    }
    static HeroDigestListResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class PlayerBanner : pb::GeneratedMessage<PlayerBanner, PlayerBanner.Builder> {
    private static readonly PlayerBanner defaultInstance = new Builder().BuildPartial();
    public static PlayerBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerBanner DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PlayerBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_PlayerBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerBanner, PlayerBanner.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable; }
    }
    
    public const int PlayerIndexFieldNumber = 1;
    private bool hasPlayerIndex;
    private uint playerIndex_ = 0;
    public bool HasPlayerIndex {
      get { return hasPlayerIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerIndex {
      get { return playerIndex_; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerIndex) return false;
        if (!hasBanner) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasPlayerIndex) {
        output.WriteUInt32(1, PlayerIndex);
      }
      if (HasBanner) {
        output.WriteMessage(2, Banner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasPlayerIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerIndex);
        }
        if (HasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerBanner prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PlayerBanner result = new PlayerBanner();
      
      protected override PlayerBanner MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PlayerBanner();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.PlayerBanner.Descriptor; }
      }
      
      public override PlayerBanner DefaultInstanceForType {
        get { return global::D3.GameMessage.PlayerBanner.DefaultInstance; }
      }
      
      public override PlayerBanner BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PlayerBanner returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerBanner) {
          return MergeFrom((PlayerBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerBanner other) {
        if (other == global::D3.GameMessage.PlayerBanner.DefaultInstance) return this;
        if (other.HasPlayerIndex) {
          PlayerIndex = other.PlayerIndex;
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              PlayerIndex = input.ReadUInt32();
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (HasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasPlayerIndex {
        get { return result.HasPlayerIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerIndex {
        get { return result.PlayerIndex; }
        set { SetPlayerIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerIndex(uint value) {
        result.hasPlayerIndex = true;
        result.playerIndex_ = value;
        return this;
      }
      public Builder ClearPlayerIndex() {
        result.hasPlayerIndex = false;
        result.playerIndex_ = 0;
        return this;
      }
      
      public bool HasBanner {
       get { return result.HasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        result.hasBanner = false;
        result.banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
        return this;
      }
    }
    static PlayerBanner() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class SaveBannerConfiguration : pb::GeneratedMessage<SaveBannerConfiguration, SaveBannerConfiguration.Builder> {
    private static readonly SaveBannerConfiguration defaultInstance = new Builder().BuildPartial();
    public static SaveBannerConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SaveBannerConfiguration DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SaveBannerConfiguration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SaveBannerConfiguration, SaveBannerConfiguration.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable; }
    }
    
    public const int BannerFieldNumber = 1;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_; }
    }
    
    public const int SlotIndexFieldNumber = 2;
    private bool hasSlotIndex;
    private uint slotIndex_ = 0;
    public bool HasSlotIndex {
      get { return hasSlotIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlotIndex {
      get { return slotIndex_; }
    }
    
    public const int MakeActiveFieldNumber = 3;
    private bool hasMakeActive;
    private bool makeActive_ = false;
    public bool HasMakeActive {
      get { return hasMakeActive; }
    }
    public bool MakeActive {
      get { return makeActive_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBanner) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasBanner) {
        output.WriteMessage(1, Banner);
      }
      if (HasSlotIndex) {
        output.WriteUInt32(2, SlotIndex);
      }
      if (HasMakeActive) {
        output.WriteBool(3, MakeActive);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Banner);
        }
        if (HasSlotIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotIndex);
        }
        if (HasMakeActive) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, MakeActive);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SaveBannerConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SaveBannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SaveBannerConfiguration prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<SaveBannerConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SaveBannerConfiguration result = new SaveBannerConfiguration();
      
      protected override SaveBannerConfiguration MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SaveBannerConfiguration();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SaveBannerConfiguration.Descriptor; }
      }
      
      public override SaveBannerConfiguration DefaultInstanceForType {
        get { return global::D3.GameMessage.SaveBannerConfiguration.DefaultInstance; }
      }
      
      public override SaveBannerConfiguration BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        SaveBannerConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SaveBannerConfiguration) {
          return MergeFrom((SaveBannerConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SaveBannerConfiguration other) {
        if (other == global::D3.GameMessage.SaveBannerConfiguration.DefaultInstance) return this;
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        if (other.HasSlotIndex) {
          SlotIndex = other.SlotIndex;
        }
        if (other.HasMakeActive) {
          MakeActive = other.MakeActive;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (HasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              SlotIndex = input.ReadUInt32();
              break;
            }
            case 24: {
              MakeActive = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasBanner {
       get { return result.HasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        result.hasBanner = false;
        result.banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
        return this;
      }
      
      public bool HasSlotIndex {
        get { return result.HasSlotIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlotIndex {
        get { return result.SlotIndex; }
        set { SetSlotIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlotIndex(uint value) {
        result.hasSlotIndex = true;
        result.slotIndex_ = value;
        return this;
      }
      public Builder ClearSlotIndex() {
        result.hasSlotIndex = false;
        result.slotIndex_ = 0;
        return this;
      }
      
      public bool HasMakeActive {
        get { return result.HasMakeActive; }
      }
      public bool MakeActive {
        get { return result.MakeActive; }
        set { SetMakeActive(value); }
      }
      public Builder SetMakeActive(bool value) {
        result.hasMakeActive = true;
        result.makeActive_ = value;
        return this;
      }
      public Builder ClearMakeActive() {
        result.hasMakeActive = false;
        result.makeActive_ = false;
        return this;
      }
    }
    static SaveBannerConfiguration() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class HeroDigestBanner : pb::GeneratedMessage<HeroDigestBanner, HeroDigestBanner.Builder> {
    private static readonly HeroDigestBanner defaultInstance = new Builder().BuildPartial();
    public static HeroDigestBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestBanner DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override HeroDigestBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestBanner, HeroDigestBanner.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable; }
    }
    
    public const int HeroDigestFieldNumber = 1;
    private bool hasHeroDigest;
    private global::D3.Hero.Digest heroDigest_ = global::D3.Hero.Digest.DefaultInstance;
    public bool HasHeroDigest {
      get { return hasHeroDigest; }
    }
    public global::D3.Hero.Digest HeroDigest {
      get { return heroDigest_; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroDigest) return false;
        if (!hasBanner) return false;
        if (!HeroDigest.IsInitialized) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasHeroDigest) {
        output.WriteMessage(1, HeroDigest);
      }
      if (HasBanner) {
        output.WriteMessage(2, Banner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasHeroDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, HeroDigest);
        }
        if (HasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestBanner prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      HeroDigestBanner result = new HeroDigestBanner();
      
      protected override HeroDigestBanner MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new HeroDigestBanner();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestBanner.Descriptor; }
      }
      
      public override HeroDigestBanner DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestBanner.DefaultInstance; }
      }
      
      public override HeroDigestBanner BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        HeroDigestBanner returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestBanner) {
          return MergeFrom((HeroDigestBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestBanner other) {
        if (other == global::D3.GameMessage.HeroDigestBanner.DefaultInstance) return this;
        if (other.HasHeroDigest) {
          MergeHeroDigest(other.HeroDigest);
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (HasHeroDigest) {
                subBuilder.MergeFrom(HeroDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigest = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (HasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasHeroDigest {
       get { return result.HasHeroDigest; }
      }
      public global::D3.Hero.Digest HeroDigest {
        get { return result.HeroDigest; }
        set { SetHeroDigest(value); }
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasHeroDigest &&
            result.heroDigest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.heroDigest_ = global::D3.Hero.Digest.CreateBuilder(result.heroDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder ClearHeroDigest() {
        result.hasHeroDigest = false;
        result.heroDigest_ = global::D3.Hero.Digest.DefaultInstance;
        return this;
      }
      
      public bool HasBanner {
       get { return result.HasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        result.hasBanner = false;
        result.banner_ = global::D3.Account.BannerConfiguration.DefaultInstance;
        return this;
      }
    }
    static HeroDigestBanner() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  public sealed partial class GameCurrentPlayers : pb::GeneratedMessage<GameCurrentPlayers, GameCurrentPlayers.Builder> {
    private static readonly GameCurrentPlayers defaultInstance = new Builder().BuildPartial();
    public static GameCurrentPlayers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameCurrentPlayers DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameCurrentPlayers ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameCurrentPlayers, GameCurrentPlayers.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable; }
    }
    
    public const int PlayersFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.HeroDigestBanner> players_ = new pbc::PopsicleList<global::D3.GameMessage.HeroDigestBanner>();
    public scg::IList<global::D3.GameMessage.HeroDigestBanner> PlayersList {
      get { return players_; }
    }
    public int PlayersCount {
      get { return players_.Count; }
    }
    public global::D3.GameMessage.HeroDigestBanner GetPlayers(int index) {
      return players_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.GameMessage.HeroDigestBanner element in PlayersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::D3.GameMessage.HeroDigestBanner element in PlayersList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.HeroDigestBanner element in PlayersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameCurrentPlayers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameCurrentPlayers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameCurrentPlayers prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<GameCurrentPlayers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameCurrentPlayers result = new GameCurrentPlayers();
      
      protected override GameCurrentPlayers MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameCurrentPlayers();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GameCurrentPlayers.Descriptor; }
      }
      
      public override GameCurrentPlayers DefaultInstanceForType {
        get { return global::D3.GameMessage.GameCurrentPlayers.DefaultInstance; }
      }
      
      public override GameCurrentPlayers BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.players_.MakeReadOnly();
        GameCurrentPlayers returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameCurrentPlayers) {
          return MergeFrom((GameCurrentPlayers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameCurrentPlayers other) {
        if (other == global::D3.GameMessage.GameCurrentPlayers.DefaultInstance) return this;
        if (other.players_.Count != 0) {
          base.AddRange(other.players_, result.players_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::D3.GameMessage.HeroDigestBanner.Builder subBuilder = global::D3.GameMessage.HeroDigestBanner.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddPlayers(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.HeroDigestBanner> PlayersList {
        get { return result.players_; }
      }
      public int PlayersCount {
        get { return result.PlayersCount; }
      }
      public global::D3.GameMessage.HeroDigestBanner GetPlayers(int index) {
        return result.GetPlayers(index);
      }
      public Builder SetPlayers(int index, global::D3.GameMessage.HeroDigestBanner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.players_[index] = value;
        return this;
      }
      public Builder SetPlayers(int index, global::D3.GameMessage.HeroDigestBanner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.players_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayers(global::D3.GameMessage.HeroDigestBanner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.players_.Add(value);
        return this;
      }
      public Builder AddPlayers(global::D3.GameMessage.HeroDigestBanner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.players_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayers(scg::IEnumerable<global::D3.GameMessage.HeroDigestBanner> values) {
        base.AddRange(values, result.players_);
        return this;
      }
      public Builder ClearPlayers() {
        result.players_.Clear();
        return this;
      }
    }
    static GameCurrentPlayers() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}
