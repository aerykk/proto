// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/toon/toon_external.proto

package bnet.protocol.toon.external;

public final class ToonExternal {
  private ToonExternal() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class ToonListRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use ToonListRequest.newBuilder() to construct.
    private ToonListRequest() {
      initFields();
    }
    private ToonListRequest(boolean noInit) {}
    
    private static final ToonListRequest defaultInstance;
    public static ToonListRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public ToonListRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_ToonListRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_ToonListRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.ToonListRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.ToonListRequest result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.ToonListRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.ToonListRequest();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.ToonListRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.ToonListRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.ToonListRequest.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.ToonListRequest getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.ToonListRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.ToonListRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.ToonListRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.ToonListRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.ToonListRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.ToonListRequest) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.ToonListRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.ToonListRequest other) {
        if (other == bnet.protocol.toon.external.ToonExternal.ToonListRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.ToonListRequest)
    }
    
    static {
      defaultInstance = new ToonListRequest(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.ToonListRequest)
  }
  
  public static final class ToonListResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use ToonListResponse.newBuilder() to construct.
    private ToonListResponse() {
      initFields();
    }
    private ToonListResponse(boolean noInit) {}
    
    private static final ToonListResponse defaultInstance;
    public static ToonListResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public ToonListResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_ToonListResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_ToonListResponse_fieldAccessorTable;
    }
    
    // repeated .bnet.protocol.EntityId toons = 2;
    public static final int TOONS_FIELD_NUMBER = 2;
    private java.util.List<bnet.protocol.Entity.EntityId> toons_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.Entity.EntityId> getToonsList() {
      return toons_;
    }
    public int getToonsCount() { return toons_.size(); }
    public bnet.protocol.Entity.EntityId getToons(int index) {
      return toons_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (bnet.protocol.Entity.EntityId element : getToonsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (bnet.protocol.Entity.EntityId element : getToonsList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (bnet.protocol.Entity.EntityId element : getToonsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.ToonListResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.ToonListResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.ToonListResponse result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.ToonListResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.ToonListResponse();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.ToonListResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.ToonListResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.ToonListResponse getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.ToonListResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.ToonListResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.ToonListResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.toons_ != java.util.Collections.EMPTY_LIST) {
          result.toons_ =
            java.util.Collections.unmodifiableList(result.toons_);
        }
        bnet.protocol.toon.external.ToonExternal.ToonListResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.ToonListResponse) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.ToonListResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.ToonListResponse other) {
        if (other == bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance()) return this;
        if (!other.toons_.isEmpty()) {
          if (result.toons_.isEmpty()) {
            result.toons_ = new java.util.ArrayList<bnet.protocol.Entity.EntityId>();
          }
          result.toons_.addAll(other.toons_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 18: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addToons(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .bnet.protocol.EntityId toons = 2;
      public java.util.List<bnet.protocol.Entity.EntityId> getToonsList() {
        return java.util.Collections.unmodifiableList(result.toons_);
      }
      public int getToonsCount() {
        return result.getToonsCount();
      }
      public bnet.protocol.Entity.EntityId getToons(int index) {
        return result.getToons(index);
      }
      public Builder setToons(int index, bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.toons_.set(index, value);
        return this;
      }
      public Builder setToons(int index, bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.toons_.set(index, builderForValue.build());
        return this;
      }
      public Builder addToons(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.toons_.isEmpty()) {
          result.toons_ = new java.util.ArrayList<bnet.protocol.Entity.EntityId>();
        }
        result.toons_.add(value);
        return this;
      }
      public Builder addToons(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        if (result.toons_.isEmpty()) {
          result.toons_ = new java.util.ArrayList<bnet.protocol.Entity.EntityId>();
        }
        result.toons_.add(builderForValue.build());
        return this;
      }
      public Builder addAllToons(
          java.lang.Iterable<? extends bnet.protocol.Entity.EntityId> values) {
        if (result.toons_.isEmpty()) {
          result.toons_ = new java.util.ArrayList<bnet.protocol.Entity.EntityId>();
        }
        super.addAll(values, result.toons_);
        return this;
      }
      public Builder clearToons() {
        result.toons_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.ToonListResponse)
    }
    
    static {
      defaultInstance = new ToonListResponse(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.ToonListResponse)
  }
  
  public static final class SelectToonRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use SelectToonRequest.newBuilder() to construct.
    private SelectToonRequest() {
      initFields();
    }
    private SelectToonRequest(boolean noInit) {}
    
    private static final SelectToonRequest defaultInstance;
    public static SelectToonRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public SelectToonRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_SelectToonRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_SelectToonRequest_fieldAccessorTable;
    }
    
    // required .bnet.protocol.EntityId toon = 1;
    public static final int TOON_FIELD_NUMBER = 1;
    private boolean hasToon;
    private bnet.protocol.Entity.EntityId toon_;
    public boolean hasToon() { return hasToon; }
    public bnet.protocol.Entity.EntityId getToon() { return toon_; }
    
    private void initFields() {
      toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasToon) return false;
      if (!getToon().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToon()) {
        output.writeMessage(1, getToon());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToon()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToon());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.SelectToonRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.SelectToonRequest result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.SelectToonRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.SelectToonRequest();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.SelectToonRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.SelectToonRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.SelectToonRequest.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonRequest getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.SelectToonRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.SelectToonRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.SelectToonRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.SelectToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.SelectToonRequest) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.SelectToonRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.SelectToonRequest other) {
        if (other == bnet.protocol.toon.external.ToonExternal.SelectToonRequest.getDefaultInstance()) return this;
        if (other.hasToon()) {
          mergeToon(other.getToon());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasToon()) {
                subBuilder.mergeFrom(getToon());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToon(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .bnet.protocol.EntityId toon = 1;
      public boolean hasToon() {
        return result.hasToon();
      }
      public bnet.protocol.Entity.EntityId getToon() {
        return result.getToon();
      }
      public Builder setToon(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder setToon(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasToon = true;
        result.toon_ = builderForValue.build();
        return this;
      }
      public Builder mergeToon(bnet.protocol.Entity.EntityId value) {
        if (result.hasToon() &&
            result.toon_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.toon_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.toon_).mergeFrom(value).buildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder clearToon() {
        result.hasToon = false;
        result.toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.SelectToonRequest)
    }
    
    static {
      defaultInstance = new SelectToonRequest(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.SelectToonRequest)
  }
  
  public static final class SelectToonResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use SelectToonResponse.newBuilder() to construct.
    private SelectToonResponse() {
      initFields();
    }
    private SelectToonResponse(boolean noInit) {}
    
    private static final SelectToonResponse defaultInstance;
    public static SelectToonResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public SelectToonResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_SelectToonResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_SelectToonResponse_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.SelectToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.SelectToonResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.SelectToonResponse result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.SelectToonResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.SelectToonResponse();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.SelectToonResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.SelectToonResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonResponse getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.SelectToonResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.SelectToonResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.SelectToonResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.SelectToonResponse) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.SelectToonResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.SelectToonResponse other) {
        if (other == bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.SelectToonResponse)
    }
    
    static {
      defaultInstance = new SelectToonResponse(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.SelectToonResponse)
  }
  
  public static final class CreateToonRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use CreateToonRequest.newBuilder() to construct.
    private CreateToonRequest() {
      initFields();
    }
    private CreateToonRequest(boolean noInit) {}
    
    private static final CreateToonRequest defaultInstance;
    public static CreateToonRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public CreateToonRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_CreateToonRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_CreateToonRequest_fieldAccessorTable;
    }
    
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // repeated .bnet.protocol.attribute.Attribute attribute = 2;
    public static final int ATTRIBUTE_FIELD_NUMBER = 2;
    private java.util.List<bnet.protocol.attribute.CAttribute.Attribute> attribute_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.attribute.CAttribute.Attribute> getAttributeList() {
      return attribute_;
    }
    public int getAttributeCount() { return attribute_.size(); }
    public bnet.protocol.attribute.CAttribute.Attribute getAttribute(int index) {
      return attribute_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (bnet.protocol.attribute.CAttribute.Attribute element : getAttributeList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      for (bnet.protocol.attribute.CAttribute.Attribute element : getAttributeList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      for (bnet.protocol.attribute.CAttribute.Attribute element : getAttributeList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.CreateToonRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.CreateToonRequest result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.CreateToonRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.CreateToonRequest();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.CreateToonRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.CreateToonRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.CreateToonRequest.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonRequest getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.CreateToonRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.CreateToonRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.CreateToonRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.attribute_ != java.util.Collections.EMPTY_LIST) {
          result.attribute_ =
            java.util.Collections.unmodifiableList(result.attribute_);
        }
        bnet.protocol.toon.external.ToonExternal.CreateToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.CreateToonRequest) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.CreateToonRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.CreateToonRequest other) {
        if (other == bnet.protocol.toon.external.ToonExternal.CreateToonRequest.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (!other.attribute_.isEmpty()) {
          if (result.attribute_.isEmpty()) {
            result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.CAttribute.Attribute>();
          }
          result.attribute_.addAll(other.attribute_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              bnet.protocol.attribute.CAttribute.Attribute.Builder subBuilder = bnet.protocol.attribute.CAttribute.Attribute.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAttribute(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 2;
      public java.util.List<bnet.protocol.attribute.CAttribute.Attribute> getAttributeList() {
        return java.util.Collections.unmodifiableList(result.attribute_);
      }
      public int getAttributeCount() {
        return result.getAttributeCount();
      }
      public bnet.protocol.attribute.CAttribute.Attribute getAttribute(int index) {
        return result.getAttribute(index);
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.CAttribute.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.attribute_.set(index, value);
        return this;
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.CAttribute.Attribute.Builder builderForValue) {
        result.attribute_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.CAttribute.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.CAttribute.Attribute>();
        }
        result.attribute_.add(value);
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.CAttribute.Attribute.Builder builderForValue) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.CAttribute.Attribute>();
        }
        result.attribute_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAttribute(
          java.lang.Iterable<? extends bnet.protocol.attribute.CAttribute.Attribute> values) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.CAttribute.Attribute>();
        }
        super.addAll(values, result.attribute_);
        return this;
      }
      public Builder clearAttribute() {
        result.attribute_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.CreateToonRequest)
    }
    
    static {
      defaultInstance = new CreateToonRequest(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.CreateToonRequest)
  }
  
  public static final class CreateToonResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use CreateToonResponse.newBuilder() to construct.
    private CreateToonResponse() {
      initFields();
    }
    private CreateToonResponse(boolean noInit) {}
    
    private static final CreateToonResponse defaultInstance;
    public static CreateToonResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public CreateToonResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_CreateToonResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_CreateToonResponse_fieldAccessorTable;
    }
    
    // optional .bnet.protocol.EntityId toon = 2;
    public static final int TOON_FIELD_NUMBER = 2;
    private boolean hasToon;
    private bnet.protocol.Entity.EntityId toon_;
    public boolean hasToon() { return hasToon; }
    public bnet.protocol.Entity.EntityId getToon() { return toon_; }
    
    private void initFields() {
      toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasToon()) {
        if (!getToon().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToon()) {
        output.writeMessage(2, getToon());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToon()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getToon());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.CreateToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.CreateToonResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.CreateToonResponse result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.CreateToonResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.CreateToonResponse();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.CreateToonResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.CreateToonResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonResponse getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.CreateToonResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.CreateToonResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.CreateToonResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.CreateToonResponse) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.CreateToonResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.CreateToonResponse other) {
        if (other == bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance()) return this;
        if (other.hasToon()) {
          mergeToon(other.getToon());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 18: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasToon()) {
                subBuilder.mergeFrom(getToon());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToon(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .bnet.protocol.EntityId toon = 2;
      public boolean hasToon() {
        return result.hasToon();
      }
      public bnet.protocol.Entity.EntityId getToon() {
        return result.getToon();
      }
      public Builder setToon(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder setToon(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasToon = true;
        result.toon_ = builderForValue.build();
        return this;
      }
      public Builder mergeToon(bnet.protocol.Entity.EntityId value) {
        if (result.hasToon() &&
            result.toon_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.toon_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.toon_).mergeFrom(value).buildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder clearToon() {
        result.hasToon = false;
        result.toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.CreateToonResponse)
    }
    
    static {
      defaultInstance = new CreateToonResponse(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.CreateToonResponse)
  }
  
  public static final class DeleteToonRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use DeleteToonRequest.newBuilder() to construct.
    private DeleteToonRequest() {
      initFields();
    }
    private DeleteToonRequest(boolean noInit) {}
    
    private static final DeleteToonRequest defaultInstance;
    public static DeleteToonRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public DeleteToonRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_DeleteToonRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_DeleteToonRequest_fieldAccessorTable;
    }
    
    // required .bnet.protocol.EntityId toon = 1;
    public static final int TOON_FIELD_NUMBER = 1;
    private boolean hasToon;
    private bnet.protocol.Entity.EntityId toon_;
    public boolean hasToon() { return hasToon; }
    public bnet.protocol.Entity.EntityId getToon() { return toon_; }
    
    private void initFields() {
      toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasToon) return false;
      if (!getToon().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToon()) {
        output.writeMessage(1, getToon());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToon()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToon());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.DeleteToonRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.DeleteToonRequest result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.DeleteToonRequest();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.DeleteToonRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.DeleteToonRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonRequest getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.DeleteToonRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.DeleteToonRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.DeleteToonRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.DeleteToonRequest) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.DeleteToonRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.DeleteToonRequest other) {
        if (other == bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.getDefaultInstance()) return this;
        if (other.hasToon()) {
          mergeToon(other.getToon());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasToon()) {
                subBuilder.mergeFrom(getToon());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToon(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .bnet.protocol.EntityId toon = 1;
      public boolean hasToon() {
        return result.hasToon();
      }
      public bnet.protocol.Entity.EntityId getToon() {
        return result.getToon();
      }
      public Builder setToon(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder setToon(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasToon = true;
        result.toon_ = builderForValue.build();
        return this;
      }
      public Builder mergeToon(bnet.protocol.Entity.EntityId value) {
        if (result.hasToon() &&
            result.toon_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.toon_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.toon_).mergeFrom(value).buildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder clearToon() {
        result.hasToon = false;
        result.toon_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.DeleteToonRequest)
    }
    
    static {
      defaultInstance = new DeleteToonRequest(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.DeleteToonRequest)
  }
  
  public static final class DeleteToonResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use DeleteToonResponse.newBuilder() to construct.
    private DeleteToonResponse() {
      initFields();
    }
    private DeleteToonResponse(boolean noInit) {}
    
    private static final DeleteToonResponse defaultInstance;
    public static DeleteToonResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public DeleteToonResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_DeleteToonResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.toon.external.ToonExternal.internal_static_bnet_protocol_toon_external_DeleteToonResponse_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.toon.external.ToonExternal.DeleteToonResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.toon.external.ToonExternal.DeleteToonResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.toon.external.ToonExternal.DeleteToonResponse result;
      
      // Construct using bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.toon.external.ToonExternal.DeleteToonResponse();
        return builder;
      }
      
      protected bnet.protocol.toon.external.ToonExternal.DeleteToonResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.toon.external.ToonExternal.DeleteToonResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDescriptor();
      }
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonResponse getDefaultInstanceForType() {
        return bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.toon.external.ToonExternal.DeleteToonResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.toon.external.ToonExternal.DeleteToonResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.toon.external.ToonExternal.DeleteToonResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.toon.external.ToonExternal.DeleteToonResponse) {
          return mergeFrom((bnet.protocol.toon.external.ToonExternal.DeleteToonResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.toon.external.ToonExternal.DeleteToonResponse other) {
        if (other == bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.toon.external.DeleteToonResponse)
    }
    
    static {
      defaultInstance = new DeleteToonResponse(true);
      bnet.protocol.toon.external.ToonExternal.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.toon.external.DeleteToonResponse)
  }
  
  public static abstract class ToonServiceExternal
      implements com.google.protobuf.Service {
    protected ToonServiceExternal() {}
    
    public interface Interface {
      public abstract void toonList(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.ToonListRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.ToonListResponse> done);
      
      public abstract void selectToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.SelectToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.SelectToonResponse> done);
      
      public abstract void createToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.CreateToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.CreateToonResponse> done);
      
      public abstract void deleteToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.DeleteToonResponse> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new ToonServiceExternal() {
        @Override
        public  void toonList(
            com.google.protobuf.RpcController controller,
            bnet.protocol.toon.external.ToonExternal.ToonListRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.ToonListResponse> done) {
          impl.toonList(controller, request, done);
        }
        
        @Override
        public  void selectToon(
            com.google.protobuf.RpcController controller,
            bnet.protocol.toon.external.ToonExternal.SelectToonRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.SelectToonResponse> done) {
          impl.selectToon(controller, request, done);
        }
        
        @Override
        public  void createToon(
            com.google.protobuf.RpcController controller,
            bnet.protocol.toon.external.ToonExternal.CreateToonRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.CreateToonResponse> done) {
          impl.createToon(controller, request, done);
        }
        
        @Override
        public  void deleteToon(
            com.google.protobuf.RpcController controller,
            bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.DeleteToonResponse> done) {
          impl.deleteToon(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.toonList(controller, (bnet.protocol.toon.external.ToonExternal.ToonListRequest)request);
            case 1:
              return impl.selectToon(controller, (bnet.protocol.toon.external.ToonExternal.SelectToonRequest)request);
            case 2:
              return impl.createToon(controller, (bnet.protocol.toon.external.ToonExternal.CreateToonRequest)request);
            case 3:
              return impl.deleteToon(controller, (bnet.protocol.toon.external.ToonExternal.DeleteToonRequest)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return bnet.protocol.toon.external.ToonExternal.ToonListRequest.getDefaultInstance();
            case 1:
              return bnet.protocol.toon.external.ToonExternal.SelectToonRequest.getDefaultInstance();
            case 2:
              return bnet.protocol.toon.external.ToonExternal.CreateToonRequest.getDefaultInstance();
            case 3:
              return bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance();
            case 1:
              return bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance();
            case 2:
              return bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance();
            case 3:
              return bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void toonList(
        com.google.protobuf.RpcController controller,
        bnet.protocol.toon.external.ToonExternal.ToonListRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.ToonListResponse> done);
    
    public abstract void selectToon(
        com.google.protobuf.RpcController controller,
        bnet.protocol.toon.external.ToonExternal.SelectToonRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.SelectToonResponse> done);
    
    public abstract void createToon(
        com.google.protobuf.RpcController controller,
        bnet.protocol.toon.external.ToonExternal.CreateToonRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.CreateToonResponse> done);
    
    public abstract void deleteToon(
        com.google.protobuf.RpcController controller,
        bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.DeleteToonResponse> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return bnet.protocol.toon.external.ToonExternal.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.toonList(controller, (bnet.protocol.toon.external.ToonExternal.ToonListRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.toon.external.ToonExternal.ToonListResponse>specializeCallback(
              done));
          return;
        case 1:
          this.selectToon(controller, (bnet.protocol.toon.external.ToonExternal.SelectToonRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.toon.external.ToonExternal.SelectToonResponse>specializeCallback(
              done));
          return;
        case 2:
          this.createToon(controller, (bnet.protocol.toon.external.ToonExternal.CreateToonRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.toon.external.ToonExternal.CreateToonResponse>specializeCallback(
              done));
          return;
        case 3:
          this.deleteToon(controller, (bnet.protocol.toon.external.ToonExternal.DeleteToonRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.toon.external.ToonExternal.DeleteToonResponse>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return bnet.protocol.toon.external.ToonExternal.ToonListRequest.getDefaultInstance();
        case 1:
          return bnet.protocol.toon.external.ToonExternal.SelectToonRequest.getDefaultInstance();
        case 2:
          return bnet.protocol.toon.external.ToonExternal.CreateToonRequest.getDefaultInstance();
        case 3:
          return bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance();
        case 1:
          return bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance();
        case 2:
          return bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance();
        case 3:
          return bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends bnet.protocol.toon.external.ToonExternal.ToonServiceExternal implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void toonList(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.ToonListRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.ToonListResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.toon.external.ToonExternal.ToonListResponse.class,
            bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance()));
      }
      
      public  void selectToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.SelectToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.SelectToonResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.toon.external.ToonExternal.SelectToonResponse.class,
            bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance()));
      }
      
      public  void createToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.CreateToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.CreateToonResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.toon.external.ToonExternal.CreateToonResponse.class,
            bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance()));
      }
      
      public  void deleteToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.toon.external.ToonExternal.DeleteToonResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.class,
            bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public bnet.protocol.toon.external.ToonExternal.ToonListResponse toonList(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.ToonListRequest request)
          throws com.google.protobuf.ServiceException;
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonResponse selectToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.SelectToonRequest request)
          throws com.google.protobuf.ServiceException;
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonResponse createToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.CreateToonRequest request)
          throws com.google.protobuf.ServiceException;
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonResponse deleteToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public bnet.protocol.toon.external.ToonExternal.ToonListResponse toonList(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.ToonListRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.toon.external.ToonExternal.ToonListResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.ToonListResponse.getDefaultInstance());
      }
      
      
      public bnet.protocol.toon.external.ToonExternal.SelectToonResponse selectToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.SelectToonRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.toon.external.ToonExternal.SelectToonResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.SelectToonResponse.getDefaultInstance());
      }
      
      
      public bnet.protocol.toon.external.ToonExternal.CreateToonResponse createToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.CreateToonRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.toon.external.ToonExternal.CreateToonResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.CreateToonResponse.getDefaultInstance());
      }
      
      
      public bnet.protocol.toon.external.ToonExternal.DeleteToonResponse deleteToon(
          com.google.protobuf.RpcController controller,
          bnet.protocol.toon.external.ToonExternal.DeleteToonRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.toon.external.ToonExternal.DeleteToonResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.getDefaultInstance());
      }
      
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_ToonListRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_ToonListRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_ToonListResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_ToonListResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_SelectToonRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_SelectToonRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_SelectToonResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_SelectToonResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_CreateToonRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_CreateToonRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_CreateToonResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_CreateToonResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_DeleteToonRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_DeleteToonRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_toon_external_DeleteToonResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_toon_external_DeleteToonResponse_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n service/toon/toon_external.proto\022\033bnet" +
      ".protocol.toon.external\032\021lib/rpc/rpc.pro" +
      "to\032\031lib/protocol/entity.proto\032\034lib/proto" +
      "col/attribute.proto\032\027service/toon/toon.p" +
      "roto\"\021\n\017ToonListRequest\":\n\020ToonListRespo" +
      "nse\022&\n\005toons\030\002 \003(\0132\027.bnet.protocol.Entit" +
      "yId\":\n\021SelectToonRequest\022%\n\004toon\030\001 \002(\0132\027" +
      ".bnet.protocol.EntityId\"\024\n\022SelectToonRes" +
      "ponse\"X\n\021CreateToonRequest\022\014\n\004name\030\001 \001(\t" +
      "\0225\n\tattribute\030\002 \003(\0132\".bnet.protocol.attr",
      "ibute.Attribute\";\n\022CreateToonResponse\022%\n" +
      "\004toon\030\002 \001(\0132\027.bnet.protocol.EntityId\":\n\021" +
      "DeleteToonRequest\022%\n\004toon\030\001 \002(\0132\027.bnet.p" +
      "rotocol.EntityId\"\024\n\022DeleteToonResponse2\313" +
      "\003\n\023ToonServiceExternal\022g\n\010ToonList\022,.bne" +
      "t.protocol.toon.external.ToonListRequest" +
      "\032-.bnet.protocol.toon.external.ToonListR" +
      "esponse\022m\n\nSelectToon\022..bnet.protocol.to" +
      "on.external.SelectToonRequest\032/.bnet.pro" +
      "tocol.toon.external.SelectToonResponse\022m",
      "\n\nCreateToon\022..bnet.protocol.toon.extern" +
      "al.CreateToonRequest\032/.bnet.protocol.too" +
      "n.external.CreateToonResponse\022m\n\nDeleteT" +
      "oon\022..bnet.protocol.toon.external.Delete" +
      "ToonRequest\032/.bnet.protocol.toon.externa" +
      "l.DeleteToonResponseB\003\200\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_bnet_protocol_toon_external_ToonListRequest_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_bnet_protocol_toon_external_ToonListRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_ToonListRequest_descriptor,
              new java.lang.String[] { },
              bnet.protocol.toon.external.ToonExternal.ToonListRequest.class,
              bnet.protocol.toon.external.ToonExternal.ToonListRequest.Builder.class);
          internal_static_bnet_protocol_toon_external_ToonListResponse_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_bnet_protocol_toon_external_ToonListResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_ToonListResponse_descriptor,
              new java.lang.String[] { "Toons", },
              bnet.protocol.toon.external.ToonExternal.ToonListResponse.class,
              bnet.protocol.toon.external.ToonExternal.ToonListResponse.Builder.class);
          internal_static_bnet_protocol_toon_external_SelectToonRequest_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_bnet_protocol_toon_external_SelectToonRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_SelectToonRequest_descriptor,
              new java.lang.String[] { "Toon", },
              bnet.protocol.toon.external.ToonExternal.SelectToonRequest.class,
              bnet.protocol.toon.external.ToonExternal.SelectToonRequest.Builder.class);
          internal_static_bnet_protocol_toon_external_SelectToonResponse_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_bnet_protocol_toon_external_SelectToonResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_SelectToonResponse_descriptor,
              new java.lang.String[] { },
              bnet.protocol.toon.external.ToonExternal.SelectToonResponse.class,
              bnet.protocol.toon.external.ToonExternal.SelectToonResponse.Builder.class);
          internal_static_bnet_protocol_toon_external_CreateToonRequest_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_bnet_protocol_toon_external_CreateToonRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_CreateToonRequest_descriptor,
              new java.lang.String[] { "Name", "Attribute", },
              bnet.protocol.toon.external.ToonExternal.CreateToonRequest.class,
              bnet.protocol.toon.external.ToonExternal.CreateToonRequest.Builder.class);
          internal_static_bnet_protocol_toon_external_CreateToonResponse_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_bnet_protocol_toon_external_CreateToonResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_CreateToonResponse_descriptor,
              new java.lang.String[] { "Toon", },
              bnet.protocol.toon.external.ToonExternal.CreateToonResponse.class,
              bnet.protocol.toon.external.ToonExternal.CreateToonResponse.Builder.class);
          internal_static_bnet_protocol_toon_external_DeleteToonRequest_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_bnet_protocol_toon_external_DeleteToonRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_DeleteToonRequest_descriptor,
              new java.lang.String[] { "Toon", },
              bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.class,
              bnet.protocol.toon.external.ToonExternal.DeleteToonRequest.Builder.class);
          internal_static_bnet_protocol_toon_external_DeleteToonResponse_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_bnet_protocol_toon_external_DeleteToonResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_toon_external_DeleteToonResponse_descriptor,
              new java.lang.String[] { },
              bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.class,
              bnet.protocol.toon.external.ToonExternal.DeleteToonResponse.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          bnet.protocol.Rpc.getDescriptor(),
          bnet.protocol.Entity.getDescriptor(),
          bnet.protocol.attribute.CAttribute.getDescriptor(),
          bnet.protocol.toon.Toon.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
