// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/chat/definition/chat.proto

package bnet.protocol.chat;

public final class Chat {
  private Chat() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static abstract class ChatService
      implements com.google.protobuf.Service {
    protected ChatService() {}
    
    public interface Interface {
      public abstract void findChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.FindChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.FindChannelResponse> done);
      
      public abstract void createChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.CreateChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.CreateChannelResponse> done);
      
      public abstract void joinChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.JoinChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.JoinChannelResponse> done);
      
    }
    
    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new ChatService() {
        @Override
        public  void findChannel(
            com.google.protobuf.RpcController controller,
            bnet.protocol.channel.ChannelTypes.FindChannelRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.FindChannelResponse> done) {
          impl.findChannel(controller, request, done);
        }
        
        @Override
        public  void createChannel(
            com.google.protobuf.RpcController controller,
            bnet.protocol.channel.ChannelTypes.CreateChannelRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.CreateChannelResponse> done) {
          impl.createChannel(controller, request, done);
        }
        
        @Override
        public  void joinChannel(
            com.google.protobuf.RpcController controller,
            bnet.protocol.channel.ChannelTypes.JoinChannelRequest request,
            com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.JoinChannelResponse> done) {
          impl.joinChannel(controller, request, done);
        }
        
      };
    }
    
    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        
        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.findChannel(controller, (bnet.protocol.channel.ChannelTypes.FindChannelRequest)request);
            case 1:
              return impl.createChannel(controller, (bnet.protocol.channel.ChannelTypes.CreateChannelRequest)request);
            case 2:
              return impl.joinChannel(controller, (bnet.protocol.channel.ChannelTypes.JoinChannelRequest)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return bnet.protocol.channel.ChannelTypes.FindChannelRequest.getDefaultInstance();
            case 1:
              return bnet.protocol.channel.ChannelTypes.CreateChannelRequest.getDefaultInstance();
            case 2:
              return bnet.protocol.channel.ChannelTypes.JoinChannelRequest.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return bnet.protocol.channel.ChannelTypes.FindChannelResponse.getDefaultInstance();
            case 1:
              return bnet.protocol.channel.ChannelTypes.CreateChannelResponse.getDefaultInstance();
            case 2:
              return bnet.protocol.channel.ChannelTypes.JoinChannelResponse.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }
        
      };
    }
    
    public abstract void findChannel(
        com.google.protobuf.RpcController controller,
        bnet.protocol.channel.ChannelTypes.FindChannelRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.FindChannelResponse> done);
    
    public abstract void createChannel(
        com.google.protobuf.RpcController controller,
        bnet.protocol.channel.ChannelTypes.CreateChannelRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.CreateChannelResponse> done);
    
    public abstract void joinChannel(
        com.google.protobuf.RpcController controller,
        bnet.protocol.channel.ChannelTypes.JoinChannelRequest request,
        com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.JoinChannelResponse> done);
    
    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return bnet.protocol.chat.Chat.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    
    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.findChannel(controller, (bnet.protocol.channel.ChannelTypes.FindChannelRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.channel.ChannelTypes.FindChannelResponse>specializeCallback(
              done));
          return;
        case 1:
          this.createChannel(controller, (bnet.protocol.channel.ChannelTypes.CreateChannelRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.channel.ChannelTypes.CreateChannelResponse>specializeCallback(
              done));
          return;
        case 2:
          this.joinChannel(controller, (bnet.protocol.channel.ChannelTypes.JoinChannelRequest)request,
            com.google.protobuf.RpcUtil.<bnet.protocol.channel.ChannelTypes.JoinChannelResponse>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return bnet.protocol.channel.ChannelTypes.FindChannelRequest.getDefaultInstance();
        case 1:
          return bnet.protocol.channel.ChannelTypes.CreateChannelRequest.getDefaultInstance();
        case 2:
          return bnet.protocol.channel.ChannelTypes.JoinChannelRequest.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return bnet.protocol.channel.ChannelTypes.FindChannelResponse.getDefaultInstance();
        case 1:
          return bnet.protocol.channel.ChannelTypes.CreateChannelResponse.getDefaultInstance();
        case 2:
          return bnet.protocol.channel.ChannelTypes.JoinChannelResponse.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }
    
    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }
    
    public static final class Stub extends bnet.protocol.chat.Chat.ChatService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.RpcChannel channel;
      
      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }
      
      public  void findChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.FindChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.FindChannelResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.FindChannelResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.channel.ChannelTypes.FindChannelResponse.class,
            bnet.protocol.channel.ChannelTypes.FindChannelResponse.getDefaultInstance()));
      }
      
      public  void createChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.CreateChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.CreateChannelResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.CreateChannelResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.channel.ChannelTypes.CreateChannelResponse.class,
            bnet.protocol.channel.ChannelTypes.CreateChannelResponse.getDefaultInstance()));
      }
      
      public  void joinChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.JoinChannelRequest request,
          com.google.protobuf.RpcCallback<bnet.protocol.channel.ChannelTypes.JoinChannelResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.JoinChannelResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            bnet.protocol.channel.ChannelTypes.JoinChannelResponse.class,
            bnet.protocol.channel.ChannelTypes.JoinChannelResponse.getDefaultInstance()));
      }
    }
    
    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }
    
    public interface BlockingInterface {
      public bnet.protocol.channel.ChannelTypes.FindChannelResponse findChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.FindChannelRequest request)
          throws com.google.protobuf.ServiceException;
      
      public bnet.protocol.channel.ChannelTypes.CreateChannelResponse createChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.CreateChannelRequest request)
          throws com.google.protobuf.ServiceException;
      
      public bnet.protocol.channel.ChannelTypes.JoinChannelResponse joinChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.JoinChannelRequest request)
          throws com.google.protobuf.ServiceException;
    }
    
    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }
      
      private final com.google.protobuf.BlockingRpcChannel channel;
      
      public bnet.protocol.channel.ChannelTypes.FindChannelResponse findChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.FindChannelRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.channel.ChannelTypes.FindChannelResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.FindChannelResponse.getDefaultInstance());
      }
      
      
      public bnet.protocol.channel.ChannelTypes.CreateChannelResponse createChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.CreateChannelRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.channel.ChannelTypes.CreateChannelResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.CreateChannelResponse.getDefaultInstance());
      }
      
      
      public bnet.protocol.channel.ChannelTypes.JoinChannelResponse joinChannel(
          com.google.protobuf.RpcController controller,
          bnet.protocol.channel.ChannelTypes.JoinChannelRequest request)
          throws com.google.protobuf.ServiceException {
        return (bnet.protocol.channel.ChannelTypes.JoinChannelResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          bnet.protocol.channel.ChannelTypes.JoinChannelResponse.getDefaultInstance());
      }
      
    }
  }
  
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"service/chat/definition/chat.proto\022\022bn" +
      "et.protocol.chat\032\034lib/protocol/attribute" +
      ".proto\032\031lib/protocol/entity.proto\032\035lib/p" +
      "rotocol/invitation.proto\032\021lib/rpc/rpc.pr" +
      "oto\032#service/channel/channel_types.proto" +
      "\032(service/chat/definition/chat_types.pro" +
      "to2\305\002\n\013ChatService\022d\n\013FindChannel\022).bnet" +
      ".protocol.channel.FindChannelRequest\032*.b" +
      "net.protocol.channel.FindChannelResponse" +
      "\022j\n\rCreateChannel\022+.bnet.protocol.channe",
      "l.CreateChannelRequest\032,.bnet.protocol.c" +
      "hannel.CreateChannelResponse\022d\n\013JoinChan" +
      "nel\022).bnet.protocol.channel.JoinChannelR" +
      "equest\032*.bnet.protocol.channel.JoinChann" +
      "elResponseB\003\200\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          bnet.protocol.attribute.CAttribute.getDescriptor(),
          bnet.protocol.Entity.getDescriptor(),
          bnet.protocol.invitation.CInvitation.getDescriptor(),
          bnet.protocol.Rpc.getDescriptor(),
          bnet.protocol.channel.ChannelTypes.getDescriptor(),
          bnet.protocol.chat.ChatTypes.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
